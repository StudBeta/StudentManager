"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apexcharts";
exports.ids = ["vendor-chunks/apexcharts"];
exports.modules = {

/***/ "(ssr)/./node_modules/apexcharts/dist/apexcharts.common.js":
/*!***********************************************************!*\
  !*** ./node_modules/apexcharts/dist/apexcharts.common.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * ApexCharts v3.45.2\n * (c) 2018-2024 ApexCharts\n * Released under the MIT License.\n */ \nfunction t(t, e) {\n    var i = Object.keys(t);\n    if (Object.getOwnPropertySymbols) {\n        var a = Object.getOwnPropertySymbols(t);\n        e && (a = a.filter(function(e) {\n            return Object.getOwnPropertyDescriptor(t, e).enumerable;\n        })), i.push.apply(i, a);\n    }\n    return i;\n}\nfunction e(e) {\n    for(var i = 1; i < arguments.length; i++){\n        var a = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? t(Object(a), !0).forEach(function(t) {\n            o(e, t, a[t]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a)) : t(Object(a)).forEach(function(t) {\n            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(a, t));\n        });\n    }\n    return e;\n}\nfunction i(t) {\n    return i = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n        return typeof t;\n    } : function(t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n    }, i(t);\n}\nfunction a(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction s(t, e) {\n    for(var i = 0; i < e.length; i++){\n        var a = e[i];\n        a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);\n    }\n}\nfunction r(t, e, i) {\n    return e && s(t.prototype, e), i && s(t, i), t;\n}\nfunction o(t, e, i) {\n    return e in t ? Object.defineProperty(t, e, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : t[e] = i, t;\n}\nfunction n(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n            value: t,\n            writable: !0,\n            configurable: !0\n        }\n    }), e && h(t, e);\n}\nfunction l(t) {\n    return l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {\n        return t.__proto__ || Object.getPrototypeOf(t);\n    }, l(t);\n}\nfunction h(t, e) {\n    return h = Object.setPrototypeOf || function(t, e) {\n        return t.__proto__ = e, t;\n    }, h(t, e);\n}\nfunction c(t) {\n    if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return t;\n}\nfunction d(t) {\n    var e = function() {\n        if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n        if (Reflect.construct.sham) return !1;\n        if (\"function\" == typeof Proxy) return !0;\n        try {\n            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0;\n        } catch (t) {\n            return !1;\n        }\n    }();\n    return function() {\n        var i, a = l(t);\n        if (e) {\n            var s = l(this).constructor;\n            i = Reflect.construct(a, arguments, s);\n        } else i = a.apply(this, arguments);\n        return function(t, e) {\n            if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n            if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n            return c(t);\n        }(this, i);\n    };\n}\nfunction g(t, e) {\n    return function(t) {\n        if (Array.isArray(t)) return t;\n    }(t) || function(t, e) {\n        var i = null == t ? null : \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n        if (null == i) return;\n        var a, s, r = [], o = !0, n = !1;\n        try {\n            for(i = i.call(t); !(o = (a = i.next()).done) && (r.push(a.value), !e || r.length !== e); o = !0);\n        } catch (t) {\n            n = !0, s = t;\n        } finally{\n            try {\n                o || null == i.return || i.return();\n            } finally{\n                if (n) throw s;\n            }\n        }\n        return r;\n    }(t, e) || p(t, e) || function() {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction u(t) {\n    return function(t) {\n        if (Array.isArray(t)) return f(t);\n    }(t) || function(t) {\n        if (\"undefined\" != typeof Symbol && null != t[Symbol.iterator] || null != t[\"@@iterator\"]) return Array.from(t);\n    }(t) || p(t) || function() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n}\nfunction p(t, e) {\n    if (t) {\n        if (\"string\" == typeof t) return f(t, e);\n        var i = Object.prototype.toString.call(t).slice(8, -1);\n        return \"Object\" === i && t.constructor && (i = t.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(t) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? f(t, e) : void 0;\n    }\n}\nfunction f(t, e) {\n    (null == e || e > t.length) && (e = t.length);\n    for(var i = 0, a = new Array(e); i < e; i++)a[i] = t[i];\n    return a;\n}\nvar x = function() {\n    function t() {\n        a(this, t);\n    }\n    return r(t, [\n        {\n            key: \"shadeRGBColor\",\n            value: function(t, e) {\n                var i = e.split(\",\"), a = t < 0 ? 0 : 255, s = t < 0 ? -1 * t : t, r = parseInt(i[0].slice(4), 10), o = parseInt(i[1], 10), n = parseInt(i[2], 10);\n                return \"rgb(\" + (Math.round((a - r) * s) + r) + \",\" + (Math.round((a - o) * s) + o) + \",\" + (Math.round((a - n) * s) + n) + \")\";\n            }\n        },\n        {\n            key: \"shadeHexColor\",\n            value: function(t, e) {\n                var i = parseInt(e.slice(1), 16), a = t < 0 ? 0 : 255, s = t < 0 ? -1 * t : t, r = i >> 16, o = i >> 8 & 255, n = 255 & i;\n                return \"#\" + (16777216 + 65536 * (Math.round((a - r) * s) + r) + 256 * (Math.round((a - o) * s) + o) + (Math.round((a - n) * s) + n)).toString(16).slice(1);\n            }\n        },\n        {\n            key: \"shadeColor\",\n            value: function(e, i) {\n                return t.isColorHex(i) ? this.shadeHexColor(e, i) : this.shadeRGBColor(e, i);\n            }\n        }\n    ], [\n        {\n            key: \"bind\",\n            value: function(t, e) {\n                return function() {\n                    return t.apply(e, arguments);\n                };\n            }\n        },\n        {\n            key: \"isObject\",\n            value: function(t) {\n                return t && \"object\" === i(t) && !Array.isArray(t) && null != t;\n            }\n        },\n        {\n            key: \"is\",\n            value: function(t, e) {\n                return Object.prototype.toString.call(e) === \"[object \" + t + \"]\";\n            }\n        },\n        {\n            key: \"listToArray\",\n            value: function(t) {\n                var e, i = [];\n                for(e = 0; e < t.length; e++)i[e] = t[e];\n                return i;\n            }\n        },\n        {\n            key: \"extend\",\n            value: function(t, e) {\n                var i = this;\n                \"function\" != typeof Object.assign && (Object.assign = function(t) {\n                    if (null == t) throw new TypeError(\"Cannot convert undefined or null to object\");\n                    for(var e = Object(t), i = 1; i < arguments.length; i++){\n                        var a = arguments[i];\n                        if (null != a) for(var s in a)a.hasOwnProperty(s) && (e[s] = a[s]);\n                    }\n                    return e;\n                });\n                var a = Object.assign({}, t);\n                return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function(s) {\n                    i.isObject(e[s]) && s in t ? a[s] = i.extend(t[s], e[s]) : Object.assign(a, o({}, s, e[s]));\n                }), a;\n            }\n        },\n        {\n            key: \"extendArray\",\n            value: function(e, i) {\n                var a = [];\n                return e.map(function(e) {\n                    a.push(t.extend(i, e));\n                }), e = a;\n            }\n        },\n        {\n            key: \"monthMod\",\n            value: function(t) {\n                return t % 12;\n            }\n        },\n        {\n            key: \"clone\",\n            value: function(e) {\n                if (t.is(\"Array\", e)) {\n                    for(var a = [], s = 0; s < e.length; s++)a[s] = this.clone(e[s]);\n                    return a;\n                }\n                if (t.is(\"Null\", e)) return null;\n                if (t.is(\"Date\", e)) return e;\n                if (\"object\" === i(e)) {\n                    var r = {};\n                    for(var o in e)e.hasOwnProperty(o) && (r[o] = this.clone(e[o]));\n                    return r;\n                }\n                return e;\n            }\n        },\n        {\n            key: \"log10\",\n            value: function(t) {\n                return Math.log(t) / Math.LN10;\n            }\n        },\n        {\n            key: \"roundToBase10\",\n            value: function(t) {\n                return Math.pow(10, Math.floor(Math.log10(t)));\n            }\n        },\n        {\n            key: \"roundToBase\",\n            value: function(t, e) {\n                return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));\n            }\n        },\n        {\n            key: \"parseNumber\",\n            value: function(t) {\n                return null === t ? t : parseFloat(t);\n            }\n        },\n        {\n            key: \"stripNumber\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;\n                return Number.isInteger(t) ? t : parseFloat(t.toPrecision(e));\n            }\n        },\n        {\n            key: \"randomId\",\n            value: function() {\n                return (Math.random() + 1).toString(36).substring(4);\n            }\n        },\n        {\n            key: \"noExponents\",\n            value: function(t) {\n                var e = String(t).split(/[eE]/);\n                if (1 === e.length) return e[0];\n                var i = \"\", a = t < 0 ? \"-\" : \"\", s = e[0].replace(\".\", \"\"), r = Number(e[1]) + 1;\n                if (r < 0) {\n                    for(i = a + \"0.\"; r++;)i += \"0\";\n                    return i + s.replace(/^-/, \"\");\n                }\n                for(r -= s.length; r--;)i += \"0\";\n                return s + i;\n            }\n        },\n        {\n            key: \"getDimensions\",\n            value: function(t) {\n                var e = getComputedStyle(t, null), i = t.clientHeight, a = t.clientWidth;\n                return i -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), [\n                    a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight),\n                    i\n                ];\n            }\n        },\n        {\n            key: \"getBoundingClientRect\",\n            value: function(t) {\n                var e = t.getBoundingClientRect();\n                return {\n                    top: e.top,\n                    right: e.right,\n                    bottom: e.bottom,\n                    left: e.left,\n                    width: t.clientWidth,\n                    height: t.clientHeight,\n                    x: e.left,\n                    y: e.top\n                };\n            }\n        },\n        {\n            key: \"getLargestStringFromArr\",\n            value: function(t) {\n                return t.reduce(function(t, e) {\n                    return Array.isArray(e) && (e = e.reduce(function(t, e) {\n                        return t.length > e.length ? t : e;\n                    })), t.length > e.length ? t : e;\n                }, 0);\n            }\n        },\n        {\n            key: \"hexToRgba\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"#999999\", e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;\n                \"#\" !== t.substring(0, 1) && (t = \"#999999\");\n                var i = t.replace(\"#\", \"\");\n                i = i.match(new RegExp(\"(.{\" + i.length / 3 + \"})\", \"g\"));\n                for(var a = 0; a < i.length; a++)i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);\n                return void 0 !== e && i.push(e), \"rgba(\" + i.join(\",\") + \")\";\n            }\n        },\n        {\n            key: \"getOpacityFromRGBA\",\n            value: function(t) {\n                return parseFloat(t.replace(/^.*,(.+)\\)/, \"$1\"));\n            }\n        },\n        {\n            key: \"rgb2hex\",\n            value: function(t) {\n                return (t = t.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)) && 4 === t.length ? \"#\" + (\"0\" + parseInt(t[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[3], 10).toString(16)).slice(-2) : \"\";\n            }\n        },\n        {\n            key: \"isColorHex\",\n            value: function(t) {\n                return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t);\n            }\n        },\n        {\n            key: \"getPolygonPos\",\n            value: function(t, e) {\n                for(var i = [], a = 2 * Math.PI / e, s = 0; s < e; s++){\n                    var r = {};\n                    r.x = t * Math.sin(s * a), r.y = -t * Math.cos(s * a), i.push(r);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"polarToCartesian\",\n            value: function(t, e, i, a) {\n                var s = (a - 90) * Math.PI / 180;\n                return {\n                    x: t + i * Math.cos(s),\n                    y: e + i * Math.sin(s)\n                };\n            }\n        },\n        {\n            key: \"escapeString\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"x\", i = t.toString().slice();\n                return i = i.replace(/[` ~!@#$%^&*()|+\\=?;:'\",.<>{}[\\]\\\\/]/gi, e);\n            }\n        },\n        {\n            key: \"negToZero\",\n            value: function(t) {\n                return t < 0 ? 0 : t;\n            }\n        },\n        {\n            key: \"moveIndexInArray\",\n            value: function(t, e, i) {\n                if (i >= t.length) for(var a = i - t.length + 1; a--;)t.push(void 0);\n                return t.splice(i, 0, t.splice(e, 1)[0]), t;\n            }\n        },\n        {\n            key: \"extractNumber\",\n            value: function(t) {\n                return parseFloat(t.replace(/[^\\d.]*/g, \"\"));\n            }\n        },\n        {\n            key: \"findAncestor\",\n            value: function(t, e) {\n                for(; (t = t.parentElement) && !t.classList.contains(e););\n                return t;\n            }\n        },\n        {\n            key: \"setELstyles\",\n            value: function(t, e) {\n                for(var i in e)e.hasOwnProperty(i) && (t.style.key = e[i]);\n            }\n        },\n        {\n            key: \"isNumber\",\n            value: function(t) {\n                return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));\n            }\n        },\n        {\n            key: \"isFloat\",\n            value: function(t) {\n                return Number(t) === t && t % 1 != 0;\n            }\n        },\n        {\n            key: \"isSafari\",\n            value: function() {\n                return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n            }\n        },\n        {\n            key: \"isFirefox\",\n            value: function() {\n                return navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n            }\n        },\n        {\n            key: \"isIE11\",\n            value: function() {\n                if (-1 !== window.navigator.userAgent.indexOf(\"MSIE\") || window.navigator.appVersion.indexOf(\"Trident/\") > -1) return !0;\n            }\n        },\n        {\n            key: \"isIE\",\n            value: function() {\n                var t = window.navigator.userAgent, e = t.indexOf(\"MSIE \");\n                if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(\".\", e)), 10);\n                if (t.indexOf(\"Trident/\") > 0) {\n                    var i = t.indexOf(\"rv:\");\n                    return parseInt(t.substring(i + 3, t.indexOf(\".\", i)), 10);\n                }\n                var a = t.indexOf(\"Edge/\");\n                return a > 0 && parseInt(t.substring(a + 5, t.indexOf(\".\", a)), 10);\n            }\n        }\n    ]), t;\n}(), b = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.setEasingFunctions();\n    }\n    return r(t, [\n        {\n            key: \"setEasingFunctions\",\n            value: function() {\n                var t;\n                if (!this.w.globals.easing) {\n                    switch(this.w.config.chart.animations.easing){\n                        case \"linear\":\n                            t = \"-\";\n                            break;\n                        case \"easein\":\n                            t = \"<\";\n                            break;\n                        case \"easeout\":\n                            t = \">\";\n                            break;\n                        case \"easeinout\":\n                        default:\n                            t = \"<>\";\n                            break;\n                        case \"swing\":\n                            t = function(t) {\n                                var e = 1.70158;\n                                return (t -= 1) * t * ((e + 1) * t + e) + 1;\n                            };\n                            break;\n                        case \"bounce\":\n                            t = function(t) {\n                                return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\n                            };\n                            break;\n                        case \"elastic\":\n                            t = function(t) {\n                                return t === !!t ? t : Math.pow(2, -10 * t) * Math.sin((t - .075) * (2 * Math.PI) / .3) + 1;\n                            };\n                    }\n                    this.w.globals.easing = t;\n                }\n            }\n        },\n        {\n            key: \"animateLine\",\n            value: function(t, e, i, a) {\n                t.attr(e).animate(a).attr(i);\n            }\n        },\n        {\n            key: \"animateMarker\",\n            value: function(t, e, i, a, s, r) {\n                e || (e = 0), t.attr({\n                    r: e,\n                    width: e,\n                    height: e\n                }).animate(a, s).attr({\n                    r: i,\n                    width: i.width,\n                    height: i.height\n                }).afterAll(function() {\n                    r();\n                });\n            }\n        },\n        {\n            key: \"animateCircle\",\n            value: function(t, e, i, a, s) {\n                t.attr({\n                    r: e.r,\n                    cx: e.cx,\n                    cy: e.cy\n                }).animate(a, s).attr({\n                    r: i.r,\n                    cx: i.cx,\n                    cy: i.cy\n                });\n            }\n        },\n        {\n            key: \"animateRect\",\n            value: function(t, e, i, a, s) {\n                t.attr(e).animate(a).attr(i).afterAll(function() {\n                    return s();\n                });\n            }\n        },\n        {\n            key: \"animatePathsGradually\",\n            value: function(t) {\n                var e = t.el, i = t.realIndex, a = t.j, s = t.fill, r = t.pathFrom, o = t.pathTo, n = t.speed, l = t.delay, h = this.w, c = 0;\n                h.config.chart.animations.animateGradually.enabled && (c = h.config.chart.animations.animateGradually.delay), h.config.chart.animations.dynamicAnimation.enabled && h.globals.dataChanged && \"bar\" !== h.config.chart.type && (c = 0), this.morphSVG(e, i, a, \"line\" !== h.config.chart.type || h.globals.comboCharts ? s : \"stroke\", r, o, n, l * c);\n            }\n        },\n        {\n            key: \"showDelayedElements\",\n            value: function() {\n                this.w.globals.delayedElements.forEach(function(t) {\n                    var e = t.el;\n                    e.classList.remove(\"apexcharts-element-hidden\"), e.classList.add(\"apexcharts-hidden-element-shown\");\n                });\n            }\n        },\n        {\n            key: \"animationCompleted\",\n            value: function(t) {\n                var e = this.w;\n                e.globals.animationEnded || (e.globals.animationEnded = !0, this.showDelayedElements(), \"function\" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, {\n                    el: t,\n                    w: e\n                }));\n            }\n        },\n        {\n            key: \"morphSVG\",\n            value: function(t, e, i, a, s, r, o, n) {\n                var l = this, h = this.w;\n                s || (s = t.attr(\"pathFrom\")), r || (r = t.attr(\"pathTo\"));\n                var c = function(t) {\n                    return \"radar\" === h.config.chart.type && (o = 1), \"M 0 \".concat(h.globals.gridHeight);\n                };\n                (!s || s.indexOf(\"undefined\") > -1 || s.indexOf(\"NaN\") > -1) && (s = c()), (!r || r.indexOf(\"undefined\") > -1 || r.indexOf(\"NaN\") > -1) && (r = c()), h.globals.shouldAnimate || (o = 1), t.plot(s).animate(1, h.globals.easing, n).plot(s).animate(o, h.globals.easing, n).plot(r).afterAll(function() {\n                    x.isNumber(i) ? i === h.globals.series[h.globals.maxValsInArrayIndex].length - 2 && h.globals.shouldAnimate && l.animationCompleted(t) : \"none\" !== a && h.globals.shouldAnimate && (!h.globals.comboCharts && e === h.globals.series.length - 1 || h.globals.comboCharts) && l.animationCompleted(t), l.showDelayedElements();\n                });\n            }\n        }\n    ]), t;\n}(), v = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"getDefaultFilter\",\n            value: function(t, e) {\n                var i = this.w;\n                t.unfilter(!0), (new window.SVG.Filter).size(\"120%\", \"180%\", \"-5%\", \"-40%\"), \"none\" !== i.config.states.normal.filter ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value) : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);\n            }\n        },\n        {\n            key: \"addNormalFilter\",\n            value: function(t, e) {\n                var i = this.w;\n                i.config.chart.dropShadow.enabled && !t.node.classList.contains(\"apexcharts-marker\") && this.dropShadow(t, i.config.chart.dropShadow, e);\n            }\n        },\n        {\n            key: \"addLightenFilter\",\n            value: function(t, e, i) {\n                var a = this, s = this.w, r = i.intensity;\n                t.unfilter(!0);\n                new window.SVG.Filter;\n                t.filter(function(t) {\n                    var i = s.config.chart.dropShadow;\n                    (i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({\n                        rgb: {\n                            type: \"linear\",\n                            slope: 1.5,\n                            intercept: r\n                        }\n                    });\n                }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node);\n            }\n        },\n        {\n            key: \"addDarkenFilter\",\n            value: function(t, e, i) {\n                var a = this, s = this.w, r = i.intensity;\n                t.unfilter(!0);\n                new window.SVG.Filter;\n                t.filter(function(t) {\n                    var i = s.config.chart.dropShadow;\n                    (i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({\n                        rgb: {\n                            type: \"linear\",\n                            slope: r\n                        }\n                    });\n                }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node);\n            }\n        },\n        {\n            key: \"applyFilter\",\n            value: function(t, e, i) {\n                var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;\n                switch(i){\n                    case \"none\":\n                        this.addNormalFilter(t, e);\n                        break;\n                    case \"lighten\":\n                        this.addLightenFilter(t, e, {\n                            intensity: a\n                        });\n                        break;\n                    case \"darken\":\n                        this.addDarkenFilter(t, e, {\n                            intensity: a\n                        });\n                }\n            }\n        },\n        {\n            key: \"addShadow\",\n            value: function(t, e, i) {\n                var a = i.blur, s = i.top, r = i.left, o = i.color, n = i.opacity, l = t.flood(Array.isArray(o) ? o[e] : o, n).composite(t.sourceAlpha, \"in\").offset(r, s).gaussianBlur(a).merge(t.source);\n                return t.blend(t.source, l);\n            }\n        },\n        {\n            key: \"dropShadow\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a = e.top, s = e.left, r = e.blur, o = e.color, n = e.opacity, l = e.noUserSpaceOnUse, h = this.w;\n                return t.unfilter(!0), x.isIE() && \"radialBar\" === h.config.chart.type || (o = Array.isArray(o) ? o[i] : o, t.filter(function(t) {\n                    var e = null;\n                    e = x.isSafari() || x.isFirefox() || x.isIE() ? t.flood(o, n).composite(t.sourceAlpha, \"in\").offset(s, a).gaussianBlur(r) : t.flood(o, n).composite(t.sourceAlpha, \"in\").offset(s, a).gaussianBlur(r).merge(t.source), t.blend(t.source, e);\n                }), l || t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node)), t;\n            }\n        },\n        {\n            key: \"setSelectionFilter\",\n            value: function(t, e, i) {\n                var a = this.w;\n                if (void 0 !== a.globals.selectedDataPoints[e] && a.globals.selectedDataPoints[e].indexOf(i) > -1) {\n                    t.node.setAttribute(\"selected\", !0);\n                    var s = a.config.states.active.filter;\n                    \"none\" !== s && this.applyFilter(t, e, s.type, s.value);\n                }\n            }\n        },\n        {\n            key: \"_scaleFilterSize\",\n            value: function(t) {\n                !function(e) {\n                    for(var i in e)e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n                }({\n                    width: \"200%\",\n                    height: \"200%\",\n                    x: \"-50%\",\n                    y: \"-50%\"\n                });\n            }\n        }\n    ]), t;\n}(), m = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"roundPathCorners\",\n            value: function(t, e) {\n                function i(t, e, i) {\n                    var s = e.x - t.x, r = e.y - t.y, o = Math.sqrt(s * s + r * r);\n                    return a(t, e, Math.min(1, i / o));\n                }\n                function a(t, e, i) {\n                    return {\n                        x: t.x + (e.x - t.x) * i,\n                        y: t.y + (e.y - t.y) * i\n                    };\n                }\n                function s(t, e) {\n                    t.length > 2 && (t[t.length - 2] = e.x, t[t.length - 1] = e.y);\n                }\n                function r(t) {\n                    return {\n                        x: parseFloat(t[t.length - 2]),\n                        y: parseFloat(t[t.length - 1])\n                    };\n                }\n                t.indexOf(\"NaN\") > -1 && (t = \"\");\n                var o = t.split(/[,\\s]/).reduce(function(t, e) {\n                    var i = e.match(\"([a-zA-Z])(.+)\");\n                    return i ? (t.push(i[1]), t.push(i[2])) : t.push(e), t;\n                }, []).reduce(function(t, e) {\n                    return parseFloat(e) == e && t.length ? t[t.length - 1].push(e) : t.push([\n                        e\n                    ]), t;\n                }, []), n = [];\n                if (o.length > 1) {\n                    var l = r(o[0]), h = null;\n                    \"Z\" == o[o.length - 1][0] && o[0].length > 2 && (h = [\n                        \"L\",\n                        l.x,\n                        l.y\n                    ], o[o.length - 1] = h), n.push(o[0]);\n                    for(var c = 1; c < o.length; c++){\n                        var d = n[n.length - 1], g = o[c], u = g == h ? o[1] : o[c + 1];\n                        if (u && d && d.length > 2 && \"L\" == g[0] && u.length > 2 && \"L\" == u[0]) {\n                            var p, f, x = r(d), b = r(g), v = r(u);\n                            p = i(b, x, e), f = i(b, v, e), s(g, p), g.origPoint = b, n.push(g);\n                            var m = a(p, b, .5), y = a(b, f, .5), w = [\n                                \"C\",\n                                m.x,\n                                m.y,\n                                y.x,\n                                y.y,\n                                f.x,\n                                f.y\n                            ];\n                            w.origPoint = b, n.push(w);\n                        } else n.push(g);\n                    }\n                    if (h) {\n                        var k = r(n[n.length - 1]);\n                        n.push([\n                            \"Z\"\n                        ]), s(n[0], k);\n                    }\n                } else n = o;\n                return n.reduce(function(t, e) {\n                    return t + e.join(\" \") + \" \";\n                }, \"\");\n            }\n        },\n        {\n            key: \"drawLine\",\n            value: function(t, e, i, a) {\n                var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : \"#a8a8a8\", r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : \"butt\";\n                return this.w.globals.dom.Paper.line().attr({\n                    x1: t,\n                    y1: e,\n                    x2: i,\n                    y2: a,\n                    stroke: s,\n                    \"stroke-dasharray\": r,\n                    \"stroke-width\": o,\n                    \"stroke-linecap\": n\n                });\n            }\n        },\n        {\n            key: \"drawRect\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"#fefefe\", o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c = this.w.globals.dom.Paper.rect();\n                return c.attr({\n                    x: t,\n                    y: e,\n                    width: i > 0 ? i : 0,\n                    height: a > 0 ? a : 0,\n                    rx: s,\n                    ry: s,\n                    opacity: o,\n                    \"stroke-width\": null !== n ? n : 0,\n                    stroke: null !== l ? l : \"none\",\n                    \"stroke-dasharray\": h\n                }), c.node.setAttribute(\"fill\", r), c;\n            }\n        },\n        {\n            key: \"drawPolygon\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"#e1e1e1\", i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"none\";\n                return this.w.globals.dom.Paper.polygon(t).attr({\n                    fill: a,\n                    stroke: e,\n                    \"stroke-width\": i\n                });\n            }\n        },\n        {\n            key: \"drawCircle\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n                t < 0 && (t = 0);\n                var i = this.w.globals.dom.Paper.circle(2 * t);\n                return null !== e && i.attr(e), i;\n            }\n        },\n        {\n            key: \"drawPath\",\n            value: function(t) {\n                var e = t.d, i = void 0 === e ? \"\" : e, a = t.stroke, s = void 0 === a ? \"#a8a8a8\" : a, r = t.strokeWidth, o = void 0 === r ? 1 : r, n = t.fill, l = t.fillOpacity, h = void 0 === l ? 1 : l, c = t.strokeOpacity, d = void 0 === c ? 1 : c, g = t.classes, u = t.strokeLinecap, p = void 0 === u ? null : u, f = t.strokeDashArray, x = void 0 === f ? 0 : f, b = this.w;\n                return null === p && (p = b.config.stroke.lineCap), (i.indexOf(\"undefined\") > -1 || i.indexOf(\"NaN\") > -1) && (i = \"M 0 \".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({\n                    fill: n,\n                    \"fill-opacity\": h,\n                    stroke: s,\n                    \"stroke-opacity\": d,\n                    \"stroke-linecap\": p,\n                    \"stroke-width\": o,\n                    \"stroke-dasharray\": x,\n                    class: g\n                });\n            }\n        },\n        {\n            key: \"group\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = this.w.globals.dom.Paper.group();\n                return null !== t && e.attr(t), e;\n            }\n        },\n        {\n            key: \"move\",\n            value: function(t, e) {\n                var i = [\n                    \"M\",\n                    t,\n                    e\n                ].join(\" \");\n                return i;\n            }\n        },\n        {\n            key: \"line\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = null;\n                return null === i ? a = [\n                    \" L\",\n                    t,\n                    e\n                ].join(\" \") : \"H\" === i ? a = [\n                    \" H\",\n                    t\n                ].join(\" \") : \"V\" === i && (a = [\n                    \" V\",\n                    e\n                ].join(\" \")), a;\n            }\n        },\n        {\n            key: \"curve\",\n            value: function(t, e, i, a, s, r) {\n                var o = [\n                    \"C\",\n                    t,\n                    e,\n                    i,\n                    a,\n                    s,\n                    r\n                ].join(\" \");\n                return o;\n            }\n        },\n        {\n            key: \"quadraticCurve\",\n            value: function(t, e, i, a) {\n                return [\n                    \"Q\",\n                    t,\n                    e,\n                    i,\n                    a\n                ].join(\" \");\n            }\n        },\n        {\n            key: \"arc\",\n            value: function(t, e, i, a, s, r, o) {\n                var n = \"A\";\n                arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (n = \"a\");\n                var l = [\n                    n,\n                    t,\n                    e,\n                    i,\n                    a,\n                    s,\n                    r,\n                    o\n                ].join(\" \");\n                return l;\n            }\n        },\n        {\n            key: \"renderPaths\",\n            value: function(t) {\n                var i, a = t.j, s = t.realIndex, r = t.pathFrom, o = t.pathTo, n = t.stroke, l = t.strokeWidth, h = t.strokeLinecap, c = t.fill, d = t.animationDelay, g = t.initialSpeed, u = t.dataChangeSpeed, p = t.className, f = t.shouldClipToGrid, x = void 0 === f || f, m = t.bindEventsOnPaths, y = void 0 === m || m, w = t.drawShadow, k = void 0 === w || w, A = this.w, S = new v(this.ctx), C = new b(this.ctx), L = this.w.config.chart.animations.enabled, P = L && this.w.config.chart.animations.dynamicAnimation.enabled, I = !!(L && !A.globals.resized || P && A.globals.dataChanged && A.globals.shouldAnimate);\n                I ? i = r : (i = o, A.globals.animationEnded = !0);\n                var T = A.config.stroke.dashArray, M = 0;\n                M = Array.isArray(T) ? T[s] : A.config.stroke.dashArray;\n                var z = this.drawPath({\n                    d: i,\n                    stroke: n,\n                    strokeWidth: l,\n                    fill: c,\n                    fillOpacity: 1,\n                    classes: p,\n                    strokeLinecap: h,\n                    strokeDashArray: M\n                });\n                if (z.attr(\"index\", s), x && z.attr({\n                    \"clip-path\": \"url(#gridRectMask\".concat(A.globals.cuid, \")\")\n                }), \"none\" !== A.config.states.normal.filter.type) S.getDefaultFilter(z, s);\n                else if (A.config.chart.dropShadow.enabled && k && (!A.config.chart.dropShadow.enabledOnSeries || A.config.chart.dropShadow.enabledOnSeries && -1 !== A.config.chart.dropShadow.enabledOnSeries.indexOf(s))) {\n                    var X = A.config.chart.dropShadow;\n                    S.dropShadow(z, X, s);\n                }\n                y && (z.node.addEventListener(\"mouseenter\", this.pathMouseEnter.bind(this, z)), z.node.addEventListener(\"mouseleave\", this.pathMouseLeave.bind(this, z)), z.node.addEventListener(\"mousedown\", this.pathMouseDown.bind(this, z))), z.attr({\n                    pathTo: o,\n                    pathFrom: r\n                });\n                var E = {\n                    el: z,\n                    j: a,\n                    realIndex: s,\n                    pathFrom: r,\n                    pathTo: o,\n                    fill: c,\n                    strokeWidth: l,\n                    delay: d\n                };\n                return !L || A.globals.resized || A.globals.dataChanged ? !A.globals.resized && A.globals.dataChanged || C.showDelayedElements() : C.animatePathsGradually(e(e({}, E), {}, {\n                    speed: g\n                })), A.globals.dataChanged && P && I && C.animatePathsGradually(e(e({}, E), {}, {\n                    speed: u\n                })), z;\n            }\n        },\n        {\n            key: \"drawPattern\",\n            value: function(t, e, i) {\n                var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"#a8a8a8\", s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;\n                return this.w.globals.dom.Paper.pattern(e, i, function(r) {\n                    \"horizontalLines\" === t ? r.line(0, 0, i, 0).stroke({\n                        color: a,\n                        width: s + 1\n                    }) : \"verticalLines\" === t ? r.line(0, 0, 0, e).stroke({\n                        color: a,\n                        width: s + 1\n                    }) : \"slantedLines\" === t ? r.line(0, 0, e, i).stroke({\n                        color: a,\n                        width: s\n                    }) : \"squares\" === t ? r.rect(e, i).fill(\"none\").stroke({\n                        color: a,\n                        width: s\n                    }) : \"circles\" === t && r.circle(e).fill(\"none\").stroke({\n                        color: a,\n                        width: s\n                    });\n                });\n            }\n        },\n        {\n            key: \"drawGradient\",\n            value: function(t, e, i, a, s) {\n                var r, o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c = this.w;\n                e.length < 9 && 0 === e.indexOf(\"#\") && (e = x.hexToRgba(e, a)), i.length < 9 && 0 === i.indexOf(\"#\") && (i = x.hexToRgba(i, s));\n                var d = 0, g = 1, u = 1, p = null;\n                null !== n && (d = void 0 !== n[0] ? n[0] / 100 : 0, g = void 0 !== n[1] ? n[1] / 100 : 1, u = void 0 !== n[2] ? n[2] / 100 : 1, p = void 0 !== n[3] ? n[3] / 100 : null);\n                var f = !(\"donut\" !== c.config.chart.type && \"pie\" !== c.config.chart.type && \"polarArea\" !== c.config.chart.type && \"bubble\" !== c.config.chart.type);\n                if (r = null === l || 0 === l.length ? c.globals.dom.Paper.gradient(f ? \"radial\" : \"linear\", function(t) {\n                    t.at(d, e, a), t.at(g, i, s), t.at(u, i, s), null !== p && t.at(p, e, a);\n                }) : c.globals.dom.Paper.gradient(f ? \"radial\" : \"linear\", function(t) {\n                    (Array.isArray(l[h]) ? l[h] : l).forEach(function(e) {\n                        t.at(e.offset / 100, e.color, e.opacity);\n                    });\n                }), f) {\n                    var b = c.globals.gridWidth / 2, v = c.globals.gridHeight / 2;\n                    \"bubble\" !== c.config.chart.type ? r.attr({\n                        gradientUnits: \"userSpaceOnUse\",\n                        cx: b,\n                        cy: v,\n                        r: o\n                    }) : r.attr({\n                        cx: .5,\n                        cy: .5,\n                        r: .8,\n                        fx: .2,\n                        fy: .2\n                    });\n                } else \"vertical\" === t ? r.from(0, 0).to(0, 1) : \"diagonal\" === t ? r.from(0, 0).to(1, 1) : \"horizontal\" === t ? r.from(0, 1).to(1, 1) : \"diagonal2\" === t && r.from(1, 0).to(0, 1);\n                return r;\n            }\n        },\n        {\n            key: \"getTextBasedOnMaxWidth\",\n            value: function(t) {\n                var e = t.text, i = t.maxWidth, a = t.fontSize, s = t.fontFamily, r = this.getTextRects(e, a, s), o = r.width / e.length, n = Math.floor(i / o);\n                return i < r.width ? e.slice(0, n - 3) + \"...\" : e;\n            }\n        },\n        {\n            key: \"drawText\",\n            value: function(t) {\n                var i = this, a = t.x, s = t.y, r = t.text, o = t.textAnchor, n = t.fontSize, l = t.fontFamily, h = t.fontWeight, c = t.foreColor, d = t.opacity, g = t.maxWidth, u = t.cssClass, p = void 0 === u ? \"\" : u, f = t.isPlainText, x = void 0 === f || f, b = t.dominantBaseline, v = void 0 === b ? \"auto\" : b, m = this.w;\n                void 0 === r && (r = \"\");\n                var y = r;\n                o || (o = \"start\"), c && c.length || (c = m.config.chart.foreColor), l = l || m.config.chart.fontFamily, h = h || \"regular\";\n                var w, k = {\n                    maxWidth: g,\n                    fontSize: n = n || \"11px\",\n                    fontFamily: l\n                };\n                return Array.isArray(r) ? w = m.globals.dom.Paper.text(function(t) {\n                    for(var a = 0; a < r.length; a++)y = r[a], g && (y = i.getTextBasedOnMaxWidth(e({\n                        text: r[a]\n                    }, k))), 0 === a ? t.tspan(y) : t.tspan(y).newLine();\n                }) : (g && (y = this.getTextBasedOnMaxWidth(e({\n                    text: r\n                }, k))), w = x ? m.globals.dom.Paper.plain(r) : m.globals.dom.Paper.text(function(t) {\n                    return t.tspan(y);\n                })), w.attr({\n                    x: a,\n                    y: s,\n                    \"text-anchor\": o,\n                    \"dominant-baseline\": v,\n                    \"font-size\": n,\n                    \"font-family\": l,\n                    \"font-weight\": h,\n                    fill: c,\n                    class: \"apexcharts-text \" + p\n                }), w.node.style.fontFamily = l, w.node.style.opacity = d, w;\n            }\n        },\n        {\n            key: \"drawMarker\",\n            value: function(t, e, i) {\n                t = t || 0;\n                var a = i.pSize || 0, s = null;\n                if (\"square\" === i.shape || \"rect\" === i.shape) {\n                    var r = void 0 === i.pRadius ? a / 2 : i.pRadius;\n                    null !== e && a || (a = 0, r = 0);\n                    var o = 1.2 * a + r, n = this.drawRect(o, o, o, o, r);\n                    n.attr({\n                        x: t - o / 2,\n                        y: e - o / 2,\n                        cx: t,\n                        cy: e,\n                        class: i.class ? i.class : \"\",\n                        fill: i.pointFillColor,\n                        \"fill-opacity\": i.pointFillOpacity ? i.pointFillOpacity : 1,\n                        stroke: i.pointStrokeColor,\n                        \"stroke-width\": i.pointStrokeWidth ? i.pointStrokeWidth : 0,\n                        \"stroke-opacity\": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1\n                    }), s = n;\n                } else \"circle\" !== i.shape && i.shape || (x.isNumber(e) || (a = 0, e = 0), s = this.drawCircle(a, {\n                    cx: t,\n                    cy: e,\n                    class: i.class ? i.class : \"\",\n                    stroke: i.pointStrokeColor,\n                    fill: i.pointFillColor,\n                    \"fill-opacity\": i.pointFillOpacity ? i.pointFillOpacity : 1,\n                    \"stroke-width\": i.pointStrokeWidth ? i.pointStrokeWidth : 0,\n                    \"stroke-opacity\": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1\n                }));\n                return s;\n            }\n        },\n        {\n            key: \"pathMouseEnter\",\n            value: function(t, e) {\n                var i = this.w, a = new v(this.ctx), s = parseInt(t.node.getAttribute(\"index\"), 10), r = parseInt(t.node.getAttribute(\"j\"), 10);\n                if (\"function\" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: i\n                }), this.ctx.events.fireEvent(\"dataPointMouseEnter\", [\n                    e,\n                    this.ctx,\n                    {\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: i\n                    }\n                ]), (\"none\" === i.config.states.active.filter.type || \"true\" !== t.node.getAttribute(\"selected\")) && \"none\" !== i.config.states.hover.filter.type && !i.globals.isTouchDevice) {\n                    var o = i.config.states.hover.filter;\n                    a.applyFilter(t, s, o.type, o.value);\n                }\n            }\n        },\n        {\n            key: \"pathMouseLeave\",\n            value: function(t, e) {\n                var i = this.w, a = new v(this.ctx), s = parseInt(t.node.getAttribute(\"index\"), 10), r = parseInt(t.node.getAttribute(\"j\"), 10);\n                \"function\" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: i\n                }), this.ctx.events.fireEvent(\"dataPointMouseLeave\", [\n                    e,\n                    this.ctx,\n                    {\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: i\n                    }\n                ]), \"none\" !== i.config.states.active.filter.type && \"true\" === t.node.getAttribute(\"selected\") || \"none\" !== i.config.states.hover.filter.type && a.getDefaultFilter(t, s);\n            }\n        },\n        {\n            key: \"pathMouseDown\",\n            value: function(t, e) {\n                var i = this.w, a = new v(this.ctx), s = parseInt(t.node.getAttribute(\"index\"), 10), r = parseInt(t.node.getAttribute(\"j\"), 10), o = \"false\";\n                if (\"true\" === t.node.getAttribute(\"selected\")) {\n                    if (t.node.setAttribute(\"selected\", \"false\"), i.globals.selectedDataPoints[s].indexOf(r) > -1) {\n                        var n = i.globals.selectedDataPoints[s].indexOf(r);\n                        i.globals.selectedDataPoints[s].splice(n, 1);\n                    }\n                } else {\n                    if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {\n                        i.globals.selectedDataPoints = [];\n                        var l = i.globals.dom.Paper.select(\".apexcharts-series path\").members, h = i.globals.dom.Paper.select(\".apexcharts-series circle, .apexcharts-series rect\").members, c = function(t) {\n                            Array.prototype.forEach.call(t, function(t) {\n                                t.node.setAttribute(\"selected\", \"false\"), a.getDefaultFilter(t, s);\n                            });\n                        };\n                        c(l), c(h);\n                    }\n                    t.node.setAttribute(\"selected\", \"true\"), o = \"true\", void 0 === i.globals.selectedDataPoints[s] && (i.globals.selectedDataPoints[s] = []), i.globals.selectedDataPoints[s].push(r);\n                }\n                if (\"true\" === o) {\n                    var d = i.config.states.active.filter;\n                    if (\"none\" !== d) a.applyFilter(t, s, d.type, d.value);\n                    else if (\"none\" !== i.config.states.hover.filter && !i.globals.isTouchDevice) {\n                        var g = i.config.states.hover.filter;\n                        a.applyFilter(t, s, g.type, g.value);\n                    }\n                } else if (\"none\" !== i.config.states.active.filter.type) if (\"none\" === i.config.states.hover.filter.type || i.globals.isTouchDevice) a.getDefaultFilter(t, s);\n                else {\n                    g = i.config.states.hover.filter;\n                    a.applyFilter(t, s, g.type, g.value);\n                }\n                \"function\" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {\n                    selectedDataPoints: i.globals.selectedDataPoints,\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: i\n                }), e && this.ctx.events.fireEvent(\"dataPointSelection\", [\n                    e,\n                    this.ctx,\n                    {\n                        selectedDataPoints: i.globals.selectedDataPoints,\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: i\n                    }\n                ]);\n            }\n        },\n        {\n            key: \"rotateAroundCenter\",\n            value: function(t) {\n                var e = {};\n                return t && \"function\" == typeof t.getBBox && (e = t.getBBox()), {\n                    x: e.x + e.width / 2,\n                    y: e.y + e.height / 2\n                };\n            }\n        },\n        {\n            key: \"getTextRects\",\n            value: function(t, e, i, a) {\n                var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r = this.w, o = this.drawText({\n                    x: -200,\n                    y: -200,\n                    text: t,\n                    textAnchor: \"start\",\n                    fontSize: e,\n                    fontFamily: i,\n                    foreColor: \"#fff\",\n                    opacity: 0\n                });\n                a && o.attr(\"transform\", a), r.globals.dom.Paper.add(o);\n                var n = o.bbox();\n                return s || (n = o.node.getBoundingClientRect()), o.remove(), {\n                    width: n.width,\n                    height: n.height\n                };\n            }\n        },\n        {\n            key: \"placeTextWithEllipsis\",\n            value: function(t, e, i) {\n                if (\"function\" == typeof t.getComputedTextLength && (t.textContent = e, e.length > 0 && t.getComputedTextLength() >= i / 1.1)) {\n                    for(var a = e.length - 3; a > 0; a -= 3)if (t.getSubStringLength(0, a) <= i / 1.1) return void (t.textContent = e.substring(0, a) + \"...\");\n                    t.textContent = \".\";\n                }\n            }\n        }\n    ], [\n        {\n            key: \"setAttrs\",\n            value: function(t, e) {\n                for(var i in e)e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n            }\n        }\n    ]), t;\n}(), y = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"getStackedSeriesTotals\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = this.w, i = [];\n                if (0 === e.globals.series.length) return i;\n                for(var a = 0; a < e.globals.series[e.globals.maxValsInArrayIndex].length; a++){\n                    for(var s = 0, r = 0; r < e.globals.series.length; r++)void 0 !== e.globals.series[r][a] && -1 === t.indexOf(r) && (s += e.globals.series[r][a]);\n                    i.push(s);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"getSeriesTotalByIndex\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n                return null === t ? this.w.config.series.reduce(function(t, e) {\n                    return t + e;\n                }, 0) : this.w.globals.series[t].reduce(function(t, e) {\n                    return t + e;\n                }, 0);\n            }\n        },\n        {\n            key: \"getStackedSeriesTotalsByGroups\",\n            value: function() {\n                var t = this, e = this.w, i = [];\n                return e.globals.seriesGroups.forEach(function(a) {\n                    var s = [];\n                    e.config.series.forEach(function(t, e) {\n                        a.indexOf(t.name) > -1 && s.push(e);\n                    });\n                    var r = e.globals.series.map(function(t, e) {\n                        return -1 === s.indexOf(e) ? e : -1;\n                    }).filter(function(t) {\n                        return -1 !== t;\n                    });\n                    i.push(t.getStackedSeriesTotals(r));\n                }), i;\n            }\n        },\n        {\n            key: \"isSeriesNull\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n                return 0 === (null === t ? this.w.config.series.filter(function(t) {\n                    return null !== t;\n                }) : this.w.config.series[t].data.filter(function(t) {\n                    return null !== t;\n                })).length;\n            }\n        },\n        {\n            key: \"seriesHaveSameValues\",\n            value: function(t) {\n                return this.w.globals.series[t].every(function(t, e, i) {\n                    return t === i[0];\n                });\n            }\n        },\n        {\n            key: \"getCategoryLabels\",\n            value: function(t) {\n                var e = this.w, i = t.slice();\n                return e.config.xaxis.convertedCatToNumeric && (i = t.map(function(t, i) {\n                    return e.config.xaxis.labels.formatter(t - e.globals.minX + 1);\n                })), i;\n            }\n        },\n        {\n            key: \"getLargestSeries\",\n            value: function() {\n                var t = this.w;\n                t.globals.maxValsInArrayIndex = t.globals.series.map(function(t) {\n                    return t.length;\n                }).indexOf(Math.max.apply(Math, t.globals.series.map(function(t) {\n                    return t.length;\n                })));\n            }\n        },\n        {\n            key: \"getLargestMarkerSize\",\n            value: function() {\n                var t = this.w, e = 0;\n                return t.globals.markers.size.forEach(function(t) {\n                    e = Math.max(e, t);\n                }), t.config.markers.discrete && t.config.markers.discrete.length && t.config.markers.discrete.forEach(function(t) {\n                    e = Math.max(e, t.size);\n                }), e > 0 && (e += t.config.markers.hover.sizeOffset + 1), t.globals.markers.largestSize = e, e;\n            }\n        },\n        {\n            key: \"getSeriesTotals\",\n            value: function() {\n                var t = this.w;\n                t.globals.seriesTotals = t.globals.series.map(function(t, e) {\n                    var i = 0;\n                    if (Array.isArray(t)) for(var a = 0; a < t.length; a++)i += t[a];\n                    else i += t;\n                    return i;\n                });\n            }\n        },\n        {\n            key: \"getSeriesTotalsXRange\",\n            value: function(t, e) {\n                var i = this.w;\n                return i.globals.series.map(function(a, s) {\n                    for(var r = 0, o = 0; o < a.length; o++)i.globals.seriesX[s][o] > t && i.globals.seriesX[s][o] < e && (r += a[o]);\n                    return r;\n                });\n            }\n        },\n        {\n            key: \"getPercentSeries\",\n            value: function() {\n                var t = this.w;\n                t.globals.seriesPercent = t.globals.series.map(function(e, i) {\n                    var a = [];\n                    if (Array.isArray(e)) for(var s = 0; s < e.length; s++){\n                        var r = t.globals.stackedSeriesTotals[s], o = 0;\n                        r && (o = 100 * e[s] / r), a.push(o);\n                    }\n                    else {\n                        var n = 100 * e / t.globals.seriesTotals.reduce(function(t, e) {\n                            return t + e;\n                        }, 0);\n                        a.push(n);\n                    }\n                    return a;\n                });\n            }\n        },\n        {\n            key: \"getCalculatedRatios\",\n            value: function() {\n                var t, e, i, a = this.w.globals, s = [], r = 0, o = [], n = .1, l = 0;\n                if (a.yRange = [], a.isMultipleYAxis) for(var h = 0; h < a.minYArr.length; h++)a.yRange.push(Math.abs(a.minYArr[h] - a.maxYArr[h])), o.push(0);\n                else a.yRange.push(Math.abs(a.minY - a.maxY));\n                a.xRange = Math.abs(a.maxX - a.minX), a.zRange = Math.abs(a.maxZ - a.minZ);\n                for(var c = 0; c < a.yRange.length; c++)s.push(a.yRange[c] / a.gridHeight);\n                if (e = a.xRange / a.gridWidth, t = a.yRange / a.gridWidth, i = a.xRange / a.gridHeight, (r = a.zRange / a.gridHeight * 16) || (r = 1), a.minY !== Number.MIN_VALUE && 0 !== Math.abs(a.minY) && (a.hasNegs = !0), a.isMultipleYAxis) {\n                    o = [];\n                    for(var d = 0; d < s.length; d++)o.push(-a.minYArr[d] / s[d]);\n                } else o.push(-a.minY / s[0]), a.minY !== Number.MIN_VALUE && 0 !== Math.abs(a.minY) && (n = -a.minY / t, l = a.minX / e);\n                return {\n                    yRatio: s,\n                    invertedYRatio: t,\n                    zRatio: r,\n                    xRatio: e,\n                    invertedXRatio: i,\n                    baseLineInvertedY: n,\n                    baseLineY: o,\n                    baseLineX: l\n                };\n            }\n        },\n        {\n            key: \"getLogSeries\",\n            value: function(t) {\n                var e = this, i = this.w;\n                return i.globals.seriesLog = t.map(function(t, a) {\n                    return i.config.yaxis[a] && i.config.yaxis[a].logarithmic ? t.map(function(t) {\n                        return null === t ? null : e.getLogVal(i.config.yaxis[a].logBase, t, a);\n                    }) : t;\n                }), i.globals.invalidLogScale ? t : i.globals.seriesLog;\n            }\n        },\n        {\n            key: \"getBaseLog\",\n            value: function(t, e) {\n                return Math.log(e) / Math.log(t);\n            }\n        },\n        {\n            key: \"getLogVal\",\n            value: function(t, e, i) {\n                if (0 === e) return 0;\n                var a = this.w, s = 0 === a.globals.minYArr[i] ? -1 : this.getBaseLog(t, a.globals.minYArr[i]), r = (0 === a.globals.maxYArr[i] ? 0 : this.getBaseLog(t, a.globals.maxYArr[i])) - s;\n                return e < 1 ? e / r : (this.getBaseLog(t, e) - s) / r;\n            }\n        },\n        {\n            key: \"getLogYRatios\",\n            value: function(t) {\n                var e = this, i = this.w, a = this.w.globals;\n                return a.yLogRatio = t.slice(), a.logYRange = a.yRange.map(function(t, s) {\n                    if (i.config.yaxis[s] && e.w.config.yaxis[s].logarithmic) {\n                        var r, o = -Number.MAX_VALUE, n = Number.MIN_VALUE;\n                        return a.seriesLog.forEach(function(t, e) {\n                            t.forEach(function(t) {\n                                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (o = Math.max(t, o), n = Math.min(t, n));\n                            });\n                        }), r = Math.pow(a.yRange[s], Math.abs(n - o) / a.yRange[s]), a.yLogRatio[s] = r / a.gridHeight, r;\n                    }\n                }), a.invalidLogScale ? t.slice() : a.yLogRatio;\n            }\n        }\n    ], [\n        {\n            key: \"checkComboSeries\",\n            value: function(t) {\n                var e = !1, i = 0, a = 0;\n                return t.length && void 0 !== t[0].type && t.forEach(function(t) {\n                    \"bar\" !== t.type && \"column\" !== t.type && \"candlestick\" !== t.type && \"boxPlot\" !== t.type || i++, void 0 !== t.type && a++;\n                }), a > 0 && (e = !0), {\n                    comboBarCount: i,\n                    comboCharts: e\n                };\n            }\n        },\n        {\n            key: \"extendArrayProps\",\n            value: function(t, e, i) {\n                return e.yaxis && (e = t.extendYAxis(e, i)), e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))), e;\n            }\n        }\n    ]), t;\n}(), w = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.annoCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"setOrientations\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = this.w;\n                if (\"vertical\" === t.label.orientation) {\n                    var a = null !== e ? e : 0, s = i.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(a, \"']\"));\n                    if (null !== s) {\n                        var r = s.getBoundingClientRect();\n                        s.setAttribute(\"x\", parseFloat(s.getAttribute(\"x\")) - r.height + 4), \"top\" === t.label.position ? s.setAttribute(\"y\", parseFloat(s.getAttribute(\"y\")) + r.width) : s.setAttribute(\"y\", parseFloat(s.getAttribute(\"y\")) - r.width);\n                        var o = this.annoCtx.graphics.rotateAroundCenter(s), n = o.x, l = o.y;\n                        s.setAttribute(\"transform\", \"rotate(-90 \".concat(n, \" \").concat(l, \")\"));\n                    }\n                }\n            }\n        },\n        {\n            key: \"addBackgroundToAnno\",\n            value: function(t, e) {\n                var i = this.w;\n                if (!t || void 0 === e.label.text || void 0 !== e.label.text && !String(e.label.text).trim()) return null;\n                var a = i.globals.dom.baseEl.querySelector(\".apexcharts-grid\").getBoundingClientRect(), s = t.getBoundingClientRect(), r = e.label.style.padding.left, o = e.label.style.padding.right, n = e.label.style.padding.top, l = e.label.style.padding.bottom;\n                \"vertical\" === e.label.orientation && (n = e.label.style.padding.left, l = e.label.style.padding.right, r = e.label.style.padding.top, o = e.label.style.padding.bottom);\n                var h = s.left - a.left - r, c = s.top - a.top - n, d = this.annoCtx.graphics.drawRect(h - i.globals.barPadForNumericAxis, c, s.width + r + o, s.height + n + l, e.label.borderRadius, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);\n                return e.id && d.node.classList.add(e.id), d;\n            }\n        },\n        {\n            key: \"annotationsBackground\",\n            value: function() {\n                var t = this, e = this.w, i = function(i, a, s) {\n                    var r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(a, \"']\"));\n                    if (r) {\n                        var o = r.parentNode, n = t.addBackgroundToAnno(r, i);\n                        n && (o.insertBefore(n.node, r), i.label.mouseEnter && n.node.addEventListener(\"mouseenter\", i.label.mouseEnter.bind(t, i)), i.label.mouseLeave && n.node.addEventListener(\"mouseleave\", i.label.mouseLeave.bind(t, i)), i.label.click && n.node.addEventListener(\"click\", i.label.click.bind(t, i)));\n                    }\n                };\n                e.config.annotations.xaxis.map(function(t, e) {\n                    i(t, e, \"xaxis\");\n                }), e.config.annotations.yaxis.map(function(t, e) {\n                    i(t, e, \"yaxis\");\n                }), e.config.annotations.points.map(function(t, e) {\n                    i(t, e, \"point\");\n                });\n            }\n        },\n        {\n            key: \"getY1Y2\",\n            value: function(t, e) {\n                var i, a = \"y1\" === t ? e.y : e.y2, s = this.w;\n                if (this.annoCtx.invertAxis) {\n                    var r = s.globals.labels.indexOf(a);\n                    s.config.xaxis.convertedCatToNumeric && (r = s.globals.categoryLabels.indexOf(a));\n                    var o = s.globals.dom.baseEl.querySelector(\".apexcharts-yaxis-texts-g text:nth-child(\" + (r + 1) + \")\");\n                    o && (i = parseFloat(o.getAttribute(\"y\"))), void 0 !== e.seriesIndex && s.globals.barHeight && (i = i - s.globals.barHeight / 2 * (s.globals.series.length - 1) + s.globals.barHeight * e.seriesIndex);\n                } else {\n                    var n;\n                    if (s.config.yaxis[e.yAxisIndex].logarithmic) n = (a = new y(this.annoCtx.ctx).getLogVal(a, e.yAxisIndex)) / s.globals.yLogRatio[e.yAxisIndex];\n                    else n = (a - s.globals.minYArr[e.yAxisIndex]) / (s.globals.yRange[e.yAxisIndex] / s.globals.gridHeight);\n                    i = s.globals.gridHeight - n, !e.marker || void 0 !== e.y && null !== e.y || (i = 0), s.config.yaxis[e.yAxisIndex] && s.config.yaxis[e.yAxisIndex].reversed && (i = n);\n                }\n                return \"string\" == typeof a && a.indexOf(\"px\") > -1 && (i = parseFloat(a)), i;\n            }\n        },\n        {\n            key: \"getX1X2\",\n            value: function(t, e) {\n                var i = this.w, a = this.annoCtx.invertAxis ? i.globals.minY : i.globals.minX, s = this.annoCtx.invertAxis ? i.globals.maxY : i.globals.maxX, r = this.annoCtx.invertAxis ? i.globals.yRange[0] : i.globals.xRange, o = (e.x - a) / (r / i.globals.gridWidth);\n                this.annoCtx.inversedReversedAxis && (o = (s - e.x) / (r / i.globals.gridWidth)), \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || (o = this.getStringX(e.x));\n                var n = (e.x2 - a) / (r / i.globals.gridWidth);\n                return this.annoCtx.inversedReversedAxis && (n = (s - e.x2) / (r / i.globals.gridWidth)), \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || (n = this.getStringX(e.x2)), void 0 !== e.x && null !== e.x || !e.marker || (o = i.globals.gridWidth), \"x1\" === t && \"string\" == typeof e.x && e.x.indexOf(\"px\") > -1 && (o = parseFloat(e.x)), \"x2\" === t && \"string\" == typeof e.x2 && e.x2.indexOf(\"px\") > -1 && (n = parseFloat(e.x2)), void 0 !== e.seriesIndex && i.globals.barWidth && !this.annoCtx.invertAxis && (o = o - i.globals.barWidth / 2 * (i.globals.series.length - 1) + i.globals.barWidth * e.seriesIndex), \"x1\" === t ? o : n;\n            }\n        },\n        {\n            key: \"getStringX\",\n            value: function(t) {\n                var e = this.w, i = t;\n                e.config.xaxis.convertedCatToNumeric && e.globals.categoryLabels.length && (t = e.globals.categoryLabels.indexOf(t) + 1);\n                var a = e.globals.labels.indexOf(t), s = e.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g text:nth-child(\" + (a + 1) + \")\");\n                return s && (i = parseFloat(s.getAttribute(\"x\"))), i;\n            }\n        }\n    ]), t;\n}(), k = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.annoCtx = e, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w(this.annoCtx);\n    }\n    return r(t, [\n        {\n            key: \"addXaxisAnnotation\",\n            value: function(t, e, i) {\n                var a, s = this.w, r = this.helpers.getX1X2(\"x1\", t), o = t.label.text, n = t.strokeDashArray;\n                if (x.isNumber(r)) {\n                    if (null === t.x2 || void 0 === t.x2) {\n                        var l = this.annoCtx.graphics.drawLine(r + t.offsetX, 0 + t.offsetY, r + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, n, t.borderWidth);\n                        e.appendChild(l.node), t.id && l.node.classList.add(t.id);\n                    } else {\n                        if ((a = this.helpers.getX1X2(\"x2\", t)) < r) {\n                            var h = r;\n                            r = a, a = h;\n                        }\n                        var c = this.annoCtx.graphics.drawRect(r + t.offsetX, 0 + t.offsetY, a - r, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, n);\n                        c.node.classList.add(\"apexcharts-annotation-rect\"), c.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(c.node), t.id && c.node.classList.add(t.id);\n                    }\n                    var d = this.annoCtx.graphics.getTextRects(o, parseFloat(t.label.style.fontSize)), g = \"top\" === t.label.position ? 4 : \"center\" === t.label.position ? s.globals.gridHeight / 2 + (\"vertical\" === t.label.orientation ? d.width / 2 : 0) : s.globals.gridHeight, u = this.annoCtx.graphics.drawText({\n                        x: r + t.label.offsetX,\n                        y: g + t.label.offsetY - (\"vertical\" === t.label.orientation ? \"top\" === t.label.position ? d.width / 2 - 12 : -d.width / 2 : 0),\n                        text: o,\n                        textAnchor: t.label.textAnchor,\n                        fontSize: t.label.style.fontSize,\n                        fontFamily: t.label.style.fontFamily,\n                        fontWeight: t.label.style.fontWeight,\n                        foreColor: t.label.style.color,\n                        cssClass: \"apexcharts-xaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n                    });\n                    u.attr({\n                        rel: i\n                    }), e.appendChild(u.node), this.annoCtx.helpers.setOrientations(t, i);\n                }\n            }\n        },\n        {\n            key: \"drawXAxisAnnotations\",\n            value: function() {\n                var t = this, e = this.w, i = this.annoCtx.graphics.group({\n                    class: \"apexcharts-xaxis-annotations\"\n                });\n                return e.config.annotations.xaxis.map(function(e, a) {\n                    t.addXaxisAnnotation(e, i.node, a);\n                }), i;\n            }\n        }\n    ]), t;\n}(), A = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new w(this.annoCtx);\n    }\n    return r(t, [\n        {\n            key: \"addYaxisAnnotation\",\n            value: function(t, e, i) {\n                var a, s = this.w, r = t.strokeDashArray, o = this.helpers.getY1Y2(\"y1\", t), n = t.label.text;\n                if (null === t.y2 || void 0 === t.y2) {\n                    var l = this.annoCtx.graphics.drawLine(0 + t.offsetX, o + t.offsetY, this._getYAxisAnnotationWidth(t), o + t.offsetY, t.borderColor, r, t.borderWidth);\n                    e.appendChild(l.node), t.id && l.node.classList.add(t.id);\n                } else {\n                    if ((a = this.helpers.getY1Y2(\"y2\", t)) > o) {\n                        var h = o;\n                        o = a, a = h;\n                    }\n                    var c = this.annoCtx.graphics.drawRect(0 + t.offsetX, a + t.offsetY, this._getYAxisAnnotationWidth(t), o - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);\n                    c.node.classList.add(\"apexcharts-annotation-rect\"), c.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(c.node), t.id && c.node.classList.add(t.id);\n                }\n                var d = \"right\" === t.label.position ? s.globals.gridWidth : \"center\" === t.label.position ? s.globals.gridWidth / 2 : 0, g = this.annoCtx.graphics.drawText({\n                    x: d + t.label.offsetX,\n                    y: (null != a ? a : o) + t.label.offsetY - 3,\n                    text: n,\n                    textAnchor: t.label.textAnchor,\n                    fontSize: t.label.style.fontSize,\n                    fontFamily: t.label.style.fontFamily,\n                    fontWeight: t.label.style.fontWeight,\n                    foreColor: t.label.style.color,\n                    cssClass: \"apexcharts-yaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n                });\n                g.attr({\n                    rel: i\n                }), e.appendChild(g.node);\n            }\n        },\n        {\n            key: \"_getYAxisAnnotationWidth\",\n            value: function(t) {\n                var e = this.w;\n                e.globals.gridWidth;\n                return (t.width.indexOf(\"%\") > -1 ? e.globals.gridWidth * parseInt(t.width, 10) / 100 : parseInt(t.width, 10)) + t.offsetX;\n            }\n        },\n        {\n            key: \"drawYAxisAnnotations\",\n            value: function() {\n                var t = this, e = this.w, i = this.annoCtx.graphics.group({\n                    class: \"apexcharts-yaxis-annotations\"\n                });\n                return e.config.annotations.yaxis.map(function(e, a) {\n                    t.addYaxisAnnotation(e, i.node, a);\n                }), i;\n            }\n        }\n    ]), t;\n}(), S = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new w(this.annoCtx);\n    }\n    return r(t, [\n        {\n            key: \"addPointAnnotation\",\n            value: function(t, e, i) {\n                this.w;\n                var a = this.helpers.getX1X2(\"x1\", t), s = this.helpers.getY1Y2(\"y1\", t);\n                if (x.isNumber(a)) {\n                    var r = {\n                        pSize: t.marker.size,\n                        pointStrokeWidth: t.marker.strokeWidth,\n                        pointFillColor: t.marker.fillColor,\n                        pointStrokeColor: t.marker.strokeColor,\n                        shape: t.marker.shape,\n                        pRadius: t.marker.radius,\n                        class: \"apexcharts-point-annotation-marker \".concat(t.marker.cssClass, \" \").concat(t.id ? t.id : \"\")\n                    }, o = this.annoCtx.graphics.drawMarker(a + t.marker.offsetX, s + t.marker.offsetY, r);\n                    e.appendChild(o.node);\n                    var n = t.label.text ? t.label.text : \"\", l = this.annoCtx.graphics.drawText({\n                        x: a + t.label.offsetX,\n                        y: s + t.label.offsetY - t.marker.size - parseFloat(t.label.style.fontSize) / 1.6,\n                        text: n,\n                        textAnchor: t.label.textAnchor,\n                        fontSize: t.label.style.fontSize,\n                        fontFamily: t.label.style.fontFamily,\n                        fontWeight: t.label.style.fontWeight,\n                        foreColor: t.label.style.color,\n                        cssClass: \"apexcharts-point-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n                    });\n                    if (l.attr({\n                        rel: i\n                    }), e.appendChild(l.node), t.customSVG.SVG) {\n                        var h = this.annoCtx.graphics.group({\n                            class: \"apexcharts-point-annotations-custom-svg \" + t.customSVG.cssClass\n                        });\n                        h.attr({\n                            transform: \"translate(\".concat(a + t.customSVG.offsetX, \", \").concat(s + t.customSVG.offsetY, \")\")\n                        }), h.node.innerHTML = t.customSVG.SVG, e.appendChild(h.node);\n                    }\n                    if (t.image.path) {\n                        var c = t.image.width ? t.image.width : 20, d = t.image.height ? t.image.height : 20;\n                        o = this.annoCtx.addImage({\n                            x: a + t.image.offsetX - c / 2,\n                            y: s + t.image.offsetY - d / 2,\n                            width: c,\n                            height: d,\n                            path: t.image.path,\n                            appendTo: \".apexcharts-point-annotations\"\n                        });\n                    }\n                    t.mouseEnter && o.node.addEventListener(\"mouseenter\", t.mouseEnter.bind(this, t)), t.mouseLeave && o.node.addEventListener(\"mouseleave\", t.mouseLeave.bind(this, t)), t.click && o.node.addEventListener(\"click\", t.click.bind(this, t));\n                }\n            }\n        },\n        {\n            key: \"drawPointAnnotations\",\n            value: function() {\n                var t = this, e = this.w, i = this.annoCtx.graphics.group({\n                    class: \"apexcharts-point-annotations\"\n                });\n                return e.config.annotations.points.map(function(e, a) {\n                    t.addPointAnnotation(e, i.node, a);\n                }), i;\n            }\n        }\n    ]), t;\n}();\nvar C = {\n    name: \"en\",\n    options: {\n        months: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ],\n        shortMonths: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ],\n        days: [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ],\n        shortDays: [\n            \"Sun\",\n            \"Mon\",\n            \"Tue\",\n            \"Wed\",\n            \"Thu\",\n            \"Fri\",\n            \"Sat\"\n        ],\n        toolbar: {\n            exportToSVG: \"Download SVG\",\n            exportToPNG: \"Download PNG\",\n            exportToCSV: \"Download CSV\",\n            menu: \"Menu\",\n            selection: \"Selection\",\n            selectionZoom: \"Selection Zoom\",\n            zoomIn: \"Zoom In\",\n            zoomOut: \"Zoom Out\",\n            pan: \"Panning\",\n            reset: \"Reset Zoom\"\n        }\n    }\n}, L = function() {\n    function t() {\n        a(this, t), this.yAxis = {\n            show: !0,\n            showAlways: !1,\n            showForNullSeries: !0,\n            seriesName: void 0,\n            opposite: !1,\n            reversed: !1,\n            logarithmic: !1,\n            logBase: 10,\n            tickAmount: void 0,\n            stepSize: void 0,\n            forceNiceScale: !1,\n            max: void 0,\n            min: void 0,\n            floating: !1,\n            decimalsInFloat: void 0,\n            labels: {\n                show: !0,\n                minWidth: 0,\n                maxWidth: 160,\n                offsetX: 0,\n                offsetY: 0,\n                align: void 0,\n                rotate: 0,\n                padding: 20,\n                style: {\n                    colors: [],\n                    fontSize: \"11px\",\n                    fontWeight: 400,\n                    fontFamily: void 0,\n                    cssClass: \"\"\n                },\n                formatter: void 0\n            },\n            axisBorder: {\n                show: !1,\n                color: \"#e0e0e0\",\n                width: 1,\n                offsetX: 0,\n                offsetY: 0\n            },\n            axisTicks: {\n                show: !1,\n                color: \"#e0e0e0\",\n                width: 6,\n                offsetX: 0,\n                offsetY: 0\n            },\n            title: {\n                text: void 0,\n                rotate: -90,\n                offsetY: 0,\n                offsetX: 0,\n                style: {\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontWeight: 900,\n                    fontFamily: void 0,\n                    cssClass: \"\"\n                }\n            },\n            tooltip: {\n                enabled: !1,\n                offsetX: 0\n            },\n            crosshairs: {\n                show: !0,\n                position: \"front\",\n                stroke: {\n                    color: \"#b6b6b6\",\n                    width: 1,\n                    dashArray: 0\n                }\n            }\n        }, this.pointAnnotation = {\n            id: void 0,\n            x: 0,\n            y: null,\n            yAxisIndex: 0,\n            seriesIndex: void 0,\n            mouseEnter: void 0,\n            mouseLeave: void 0,\n            click: void 0,\n            marker: {\n                size: 4,\n                fillColor: \"#fff\",\n                strokeWidth: 2,\n                strokeColor: \"#333\",\n                shape: \"circle\",\n                offsetX: 0,\n                offsetY: 0,\n                radius: 2,\n                cssClass: \"\"\n            },\n            label: {\n                borderColor: \"#c2c2c2\",\n                borderWidth: 1,\n                borderRadius: 2,\n                text: void 0,\n                textAnchor: \"middle\",\n                offsetX: 0,\n                offsetY: 0,\n                mouseEnter: void 0,\n                mouseLeave: void 0,\n                click: void 0,\n                style: {\n                    background: \"#fff\",\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    cssClass: \"\",\n                    padding: {\n                        left: 5,\n                        right: 5,\n                        top: 2,\n                        bottom: 2\n                    }\n                }\n            },\n            customSVG: {\n                SVG: void 0,\n                cssClass: void 0,\n                offsetX: 0,\n                offsetY: 0\n            },\n            image: {\n                path: void 0,\n                width: 20,\n                height: 20,\n                offsetX: 0,\n                offsetY: 0\n            }\n        }, this.yAxisAnnotation = {\n            id: void 0,\n            y: 0,\n            y2: null,\n            strokeDashArray: 1,\n            fillColor: \"#c2c2c2\",\n            borderColor: \"#c2c2c2\",\n            borderWidth: 1,\n            opacity: .3,\n            offsetX: 0,\n            offsetY: 0,\n            width: \"100%\",\n            yAxisIndex: 0,\n            label: {\n                borderColor: \"#c2c2c2\",\n                borderWidth: 1,\n                borderRadius: 2,\n                text: void 0,\n                textAnchor: \"end\",\n                position: \"right\",\n                offsetX: 0,\n                offsetY: -3,\n                mouseEnter: void 0,\n                mouseLeave: void 0,\n                click: void 0,\n                style: {\n                    background: \"#fff\",\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    cssClass: \"\",\n                    padding: {\n                        left: 5,\n                        right: 5,\n                        top: 2,\n                        bottom: 2\n                    }\n                }\n            }\n        }, this.xAxisAnnotation = {\n            id: void 0,\n            x: 0,\n            x2: null,\n            strokeDashArray: 1,\n            fillColor: \"#c2c2c2\",\n            borderColor: \"#c2c2c2\",\n            borderWidth: 1,\n            opacity: .3,\n            offsetX: 0,\n            offsetY: 0,\n            label: {\n                borderColor: \"#c2c2c2\",\n                borderWidth: 1,\n                borderRadius: 2,\n                text: void 0,\n                textAnchor: \"middle\",\n                orientation: \"vertical\",\n                position: \"top\",\n                offsetX: 0,\n                offsetY: 0,\n                mouseEnter: void 0,\n                mouseLeave: void 0,\n                click: void 0,\n                style: {\n                    background: \"#fff\",\n                    color: void 0,\n                    fontSize: \"11px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    cssClass: \"\",\n                    padding: {\n                        left: 5,\n                        right: 5,\n                        top: 2,\n                        bottom: 2\n                    }\n                }\n            }\n        }, this.text = {\n            x: 0,\n            y: 0,\n            text: \"\",\n            textAnchor: \"start\",\n            foreColor: void 0,\n            fontSize: \"13px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            appendTo: \".apexcharts-annotations\",\n            backgroundColor: \"transparent\",\n            borderColor: \"#c2c2c2\",\n            borderRadius: 0,\n            borderWidth: 0,\n            paddingLeft: 4,\n            paddingRight: 4,\n            paddingTop: 2,\n            paddingBottom: 2\n        };\n    }\n    return r(t, [\n        {\n            key: \"init\",\n            value: function() {\n                return {\n                    annotations: {\n                        yaxis: [\n                            this.yAxisAnnotation\n                        ],\n                        xaxis: [\n                            this.xAxisAnnotation\n                        ],\n                        points: [\n                            this.pointAnnotation\n                        ],\n                        texts: [],\n                        images: [],\n                        shapes: []\n                    },\n                    chart: {\n                        animations: {\n                            enabled: !0,\n                            easing: \"easeinout\",\n                            speed: 800,\n                            animateGradually: {\n                                delay: 150,\n                                enabled: !0\n                            },\n                            dynamicAnimation: {\n                                enabled: !0,\n                                speed: 350\n                            }\n                        },\n                        background: \"transparent\",\n                        locales: [\n                            C\n                        ],\n                        defaultLocale: \"en\",\n                        dropShadow: {\n                            enabled: !1,\n                            enabledOnSeries: void 0,\n                            top: 2,\n                            left: 2,\n                            blur: 4,\n                            color: \"#000\",\n                            opacity: .35\n                        },\n                        events: {\n                            animationEnd: void 0,\n                            beforeMount: void 0,\n                            mounted: void 0,\n                            updated: void 0,\n                            click: void 0,\n                            mouseMove: void 0,\n                            mouseLeave: void 0,\n                            xAxisLabelClick: void 0,\n                            legendClick: void 0,\n                            markerClick: void 0,\n                            selection: void 0,\n                            dataPointSelection: void 0,\n                            dataPointMouseEnter: void 0,\n                            dataPointMouseLeave: void 0,\n                            beforeZoom: void 0,\n                            beforeResetZoom: void 0,\n                            zoomed: void 0,\n                            scrolled: void 0,\n                            brushScrolled: void 0\n                        },\n                        foreColor: \"#373d3f\",\n                        fontFamily: \"Helvetica, Arial, sans-serif\",\n                        height: \"auto\",\n                        parentHeightOffset: 15,\n                        redrawOnParentResize: !0,\n                        redrawOnWindowResize: !0,\n                        id: void 0,\n                        group: void 0,\n                        nonce: void 0,\n                        offsetX: 0,\n                        offsetY: 0,\n                        selection: {\n                            enabled: !1,\n                            type: \"x\",\n                            fill: {\n                                color: \"#24292e\",\n                                opacity: .1\n                            },\n                            stroke: {\n                                width: 1,\n                                color: \"#24292e\",\n                                opacity: .4,\n                                dashArray: 3\n                            },\n                            xaxis: {\n                                min: void 0,\n                                max: void 0\n                            },\n                            yaxis: {\n                                min: void 0,\n                                max: void 0\n                            }\n                        },\n                        sparkline: {\n                            enabled: !1\n                        },\n                        brush: {\n                            enabled: !1,\n                            autoScaleYaxis: !0,\n                            target: void 0,\n                            targets: void 0\n                        },\n                        stacked: !1,\n                        stackOnlyBar: !0,\n                        stackType: \"normal\",\n                        toolbar: {\n                            show: !0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            tools: {\n                                download: !0,\n                                selection: !0,\n                                zoom: !0,\n                                zoomin: !0,\n                                zoomout: !0,\n                                pan: !0,\n                                reset: !0,\n                                customIcons: []\n                            },\n                            export: {\n                                csv: {\n                                    filename: void 0,\n                                    columnDelimiter: \",\",\n                                    headerCategory: \"category\",\n                                    headerValue: \"value\",\n                                    dateFormatter: function(t) {\n                                        return new Date(t).toDateString();\n                                    }\n                                },\n                                png: {\n                                    filename: void 0\n                                },\n                                svg: {\n                                    filename: void 0\n                                }\n                            },\n                            autoSelected: \"zoom\"\n                        },\n                        type: \"line\",\n                        width: \"100%\",\n                        zoom: {\n                            enabled: !0,\n                            type: \"x\",\n                            autoScaleYaxis: !1,\n                            zoomedArea: {\n                                fill: {\n                                    color: \"#90CAF9\",\n                                    opacity: .4\n                                },\n                                stroke: {\n                                    color: \"#0D47A1\",\n                                    opacity: .4,\n                                    width: 1\n                                }\n                            }\n                        }\n                    },\n                    plotOptions: {\n                        area: {\n                            fillTo: \"origin\"\n                        },\n                        bar: {\n                            horizontal: !1,\n                            columnWidth: \"70%\",\n                            barHeight: \"70%\",\n                            distributed: !1,\n                            borderRadius: 0,\n                            borderRadiusApplication: \"around\",\n                            borderRadiusWhenStacked: \"last\",\n                            rangeBarOverlap: !0,\n                            rangeBarGroupRows: !1,\n                            hideZeroBarsWhenGrouped: !1,\n                            isDumbbell: !1,\n                            dumbbellColors: void 0,\n                            isFunnel: !1,\n                            isFunnel3d: !0,\n                            colors: {\n                                ranges: [],\n                                backgroundBarColors: [],\n                                backgroundBarOpacity: 1,\n                                backgroundBarRadius: 0\n                            },\n                            dataLabels: {\n                                position: \"top\",\n                                maxItems: 100,\n                                hideOverflowingLabels: !0,\n                                orientation: \"horizontal\",\n                                total: {\n                                    enabled: !1,\n                                    formatter: void 0,\n                                    offsetX: 0,\n                                    offsetY: 0,\n                                    style: {\n                                        color: \"#373d3f\",\n                                        fontSize: \"12px\",\n                                        fontFamily: void 0,\n                                        fontWeight: 600\n                                    }\n                                }\n                            }\n                        },\n                        bubble: {\n                            zScaling: !0,\n                            minBubbleRadius: void 0,\n                            maxBubbleRadius: void 0\n                        },\n                        candlestick: {\n                            colors: {\n                                upward: \"#00B746\",\n                                downward: \"#EF403C\"\n                            },\n                            wick: {\n                                useFillColor: !0\n                            }\n                        },\n                        boxPlot: {\n                            colors: {\n                                upper: \"#00E396\",\n                                lower: \"#008FFB\"\n                            }\n                        },\n                        heatmap: {\n                            radius: 2,\n                            enableShades: !0,\n                            shadeIntensity: .5,\n                            reverseNegativeShade: !1,\n                            distributed: !1,\n                            useFillColorAsStroke: !1,\n                            colorScale: {\n                                inverse: !1,\n                                ranges: [],\n                                min: void 0,\n                                max: void 0\n                            }\n                        },\n                        treemap: {\n                            enableShades: !0,\n                            shadeIntensity: .5,\n                            distributed: !1,\n                            reverseNegativeShade: !1,\n                            useFillColorAsStroke: !1,\n                            borderRadius: 4,\n                            dataLabels: {\n                                format: \"scale\"\n                            },\n                            colorScale: {\n                                inverse: !1,\n                                ranges: [],\n                                min: void 0,\n                                max: void 0\n                            }\n                        },\n                        radialBar: {\n                            inverseOrder: !1,\n                            startAngle: 0,\n                            endAngle: 360,\n                            offsetX: 0,\n                            offsetY: 0,\n                            hollow: {\n                                margin: 5,\n                                size: \"50%\",\n                                background: \"transparent\",\n                                image: void 0,\n                                imageWidth: 150,\n                                imageHeight: 150,\n                                imageOffsetX: 0,\n                                imageOffsetY: 0,\n                                imageClipped: !0,\n                                position: \"front\",\n                                dropShadow: {\n                                    enabled: !1,\n                                    top: 0,\n                                    left: 0,\n                                    blur: 3,\n                                    color: \"#000\",\n                                    opacity: .5\n                                }\n                            },\n                            track: {\n                                show: !0,\n                                startAngle: void 0,\n                                endAngle: void 0,\n                                background: \"#f2f2f2\",\n                                strokeWidth: \"97%\",\n                                opacity: 1,\n                                margin: 5,\n                                dropShadow: {\n                                    enabled: !1,\n                                    top: 0,\n                                    left: 0,\n                                    blur: 3,\n                                    color: \"#000\",\n                                    opacity: .5\n                                }\n                            },\n                            dataLabels: {\n                                show: !0,\n                                name: {\n                                    show: !0,\n                                    fontSize: \"16px\",\n                                    fontFamily: void 0,\n                                    fontWeight: 600,\n                                    color: void 0,\n                                    offsetY: 0,\n                                    formatter: function(t) {\n                                        return t;\n                                    }\n                                },\n                                value: {\n                                    show: !0,\n                                    fontSize: \"14px\",\n                                    fontFamily: void 0,\n                                    fontWeight: 400,\n                                    color: void 0,\n                                    offsetY: 16,\n                                    formatter: function(t) {\n                                        return t + \"%\";\n                                    }\n                                },\n                                total: {\n                                    show: !1,\n                                    label: \"Total\",\n                                    fontSize: \"16px\",\n                                    fontWeight: 600,\n                                    fontFamily: void 0,\n                                    color: void 0,\n                                    formatter: function(t) {\n                                        return t.globals.seriesTotals.reduce(function(t, e) {\n                                            return t + e;\n                                        }, 0) / t.globals.series.length + \"%\";\n                                    }\n                                }\n                            },\n                            barLabels: {\n                                enabled: !1,\n                                margin: 5,\n                                useSeriesColors: !0,\n                                fontFamily: void 0,\n                                fontWeight: 600,\n                                fontSize: \"16px\",\n                                formatter: function(t) {\n                                    return t;\n                                },\n                                onClick: void 0\n                            }\n                        },\n                        pie: {\n                            customScale: 1,\n                            offsetX: 0,\n                            offsetY: 0,\n                            startAngle: 0,\n                            endAngle: 360,\n                            expandOnClick: !0,\n                            dataLabels: {\n                                offset: 0,\n                                minAngleToShowLabel: 10\n                            },\n                            donut: {\n                                size: \"65%\",\n                                background: \"transparent\",\n                                labels: {\n                                    show: !1,\n                                    name: {\n                                        show: !0,\n                                        fontSize: \"16px\",\n                                        fontFamily: void 0,\n                                        fontWeight: 600,\n                                        color: void 0,\n                                        offsetY: -10,\n                                        formatter: function(t) {\n                                            return t;\n                                        }\n                                    },\n                                    value: {\n                                        show: !0,\n                                        fontSize: \"20px\",\n                                        fontFamily: void 0,\n                                        fontWeight: 400,\n                                        color: void 0,\n                                        offsetY: 10,\n                                        formatter: function(t) {\n                                            return t;\n                                        }\n                                    },\n                                    total: {\n                                        show: !1,\n                                        showAlways: !1,\n                                        label: \"Total\",\n                                        fontSize: \"16px\",\n                                        fontWeight: 400,\n                                        fontFamily: void 0,\n                                        color: void 0,\n                                        formatter: function(t) {\n                                            return t.globals.seriesTotals.reduce(function(t, e) {\n                                                return t + e;\n                                            }, 0);\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                        polarArea: {\n                            rings: {\n                                strokeWidth: 1,\n                                strokeColor: \"#e8e8e8\"\n                            },\n                            spokes: {\n                                strokeWidth: 1,\n                                connectorColors: \"#e8e8e8\"\n                            }\n                        },\n                        radar: {\n                            size: void 0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            polygons: {\n                                strokeWidth: 1,\n                                strokeColors: \"#e8e8e8\",\n                                connectorColors: \"#e8e8e8\",\n                                fill: {\n                                    colors: void 0\n                                }\n                            }\n                        }\n                    },\n                    colors: void 0,\n                    dataLabels: {\n                        enabled: !0,\n                        enabledOnSeries: void 0,\n                        formatter: function(t) {\n                            return null !== t ? t : \"\";\n                        },\n                        textAnchor: \"middle\",\n                        distributed: !1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        style: {\n                            fontSize: \"12px\",\n                            fontFamily: void 0,\n                            fontWeight: 600,\n                            colors: void 0\n                        },\n                        background: {\n                            enabled: !0,\n                            foreColor: \"#fff\",\n                            borderRadius: 2,\n                            padding: 4,\n                            opacity: .9,\n                            borderWidth: 1,\n                            borderColor: \"#fff\",\n                            dropShadow: {\n                                enabled: !1,\n                                top: 1,\n                                left: 1,\n                                blur: 1,\n                                color: \"#000\",\n                                opacity: .45\n                            }\n                        },\n                        dropShadow: {\n                            enabled: !1,\n                            top: 1,\n                            left: 1,\n                            blur: 1,\n                            color: \"#000\",\n                            opacity: .45\n                        }\n                    },\n                    fill: {\n                        type: \"solid\",\n                        colors: void 0,\n                        opacity: .85,\n                        gradient: {\n                            shade: \"dark\",\n                            type: \"horizontal\",\n                            shadeIntensity: .5,\n                            gradientToColors: void 0,\n                            inverseColors: !0,\n                            opacityFrom: 1,\n                            opacityTo: 1,\n                            stops: [\n                                0,\n                                50,\n                                100\n                            ],\n                            colorStops: []\n                        },\n                        image: {\n                            src: [],\n                            width: void 0,\n                            height: void 0\n                        },\n                        pattern: {\n                            style: \"squares\",\n                            width: 6,\n                            height: 6,\n                            strokeWidth: 2\n                        }\n                    },\n                    forecastDataPoints: {\n                        count: 0,\n                        fillOpacity: .5,\n                        strokeWidth: void 0,\n                        dashArray: 4\n                    },\n                    grid: {\n                        show: !0,\n                        borderColor: \"#e0e0e0\",\n                        strokeDashArray: 0,\n                        position: \"back\",\n                        xaxis: {\n                            lines: {\n                                show: !1\n                            }\n                        },\n                        yaxis: {\n                            lines: {\n                                show: !0\n                            }\n                        },\n                        row: {\n                            colors: void 0,\n                            opacity: .5\n                        },\n                        column: {\n                            colors: void 0,\n                            opacity: .5\n                        },\n                        padding: {\n                            top: 0,\n                            right: 10,\n                            bottom: 0,\n                            left: 12\n                        }\n                    },\n                    labels: [],\n                    legend: {\n                        show: !0,\n                        showForSingleSeries: !1,\n                        showForNullSeries: !0,\n                        showForZeroSeries: !0,\n                        floating: !1,\n                        position: \"bottom\",\n                        horizontalAlign: \"center\",\n                        inverseOrder: !1,\n                        fontSize: \"12px\",\n                        fontFamily: void 0,\n                        fontWeight: 400,\n                        width: void 0,\n                        height: void 0,\n                        formatter: void 0,\n                        tooltipHoverFormatter: void 0,\n                        offsetX: -20,\n                        offsetY: 4,\n                        customLegendItems: [],\n                        labels: {\n                            colors: void 0,\n                            useSeriesColors: !1\n                        },\n                        markers: {\n                            width: 12,\n                            height: 12,\n                            strokeWidth: 0,\n                            fillColors: void 0,\n                            strokeColor: \"#fff\",\n                            radius: 12,\n                            customHTML: void 0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            onClick: void 0\n                        },\n                        itemMargin: {\n                            horizontal: 5,\n                            vertical: 2\n                        },\n                        onItemClick: {\n                            toggleDataSeries: !0\n                        },\n                        onItemHover: {\n                            highlightDataSeries: !0\n                        }\n                    },\n                    markers: {\n                        discrete: [],\n                        size: 0,\n                        colors: void 0,\n                        strokeColors: \"#fff\",\n                        strokeWidth: 2,\n                        strokeOpacity: .9,\n                        strokeDashArray: 0,\n                        fillOpacity: 1,\n                        shape: \"circle\",\n                        width: 8,\n                        height: 8,\n                        radius: 2,\n                        offsetX: 0,\n                        offsetY: 0,\n                        onClick: void 0,\n                        onDblClick: void 0,\n                        showNullDataPoints: !0,\n                        hover: {\n                            size: void 0,\n                            sizeOffset: 3\n                        }\n                    },\n                    noData: {\n                        text: void 0,\n                        align: \"center\",\n                        verticalAlign: \"middle\",\n                        offsetX: 0,\n                        offsetY: 0,\n                        style: {\n                            color: void 0,\n                            fontSize: \"14px\",\n                            fontFamily: void 0\n                        }\n                    },\n                    responsive: [],\n                    series: void 0,\n                    states: {\n                        normal: {\n                            filter: {\n                                type: \"none\",\n                                value: 0\n                            }\n                        },\n                        hover: {\n                            filter: {\n                                type: \"lighten\",\n                                value: .1\n                            }\n                        },\n                        active: {\n                            allowMultipleDataPointsSelection: !1,\n                            filter: {\n                                type: \"darken\",\n                                value: .5\n                            }\n                        }\n                    },\n                    title: {\n                        text: void 0,\n                        align: \"left\",\n                        margin: 5,\n                        offsetX: 0,\n                        offsetY: 0,\n                        floating: !1,\n                        style: {\n                            fontSize: \"14px\",\n                            fontWeight: 900,\n                            fontFamily: void 0,\n                            color: void 0\n                        }\n                    },\n                    subtitle: {\n                        text: void 0,\n                        align: \"left\",\n                        margin: 5,\n                        offsetX: 0,\n                        offsetY: 30,\n                        floating: !1,\n                        style: {\n                            fontSize: \"12px\",\n                            fontWeight: 400,\n                            fontFamily: void 0,\n                            color: void 0\n                        }\n                    },\n                    stroke: {\n                        show: !0,\n                        curve: \"smooth\",\n                        lineCap: \"butt\",\n                        width: 2,\n                        colors: void 0,\n                        dashArray: 0,\n                        fill: {\n                            type: \"solid\",\n                            colors: void 0,\n                            opacity: .85,\n                            gradient: {\n                                shade: \"dark\",\n                                type: \"horizontal\",\n                                shadeIntensity: .5,\n                                gradientToColors: void 0,\n                                inverseColors: !0,\n                                opacityFrom: 1,\n                                opacityTo: 1,\n                                stops: [\n                                    0,\n                                    50,\n                                    100\n                                ],\n                                colorStops: []\n                            }\n                        }\n                    },\n                    tooltip: {\n                        enabled: !0,\n                        enabledOnSeries: void 0,\n                        shared: !0,\n                        hideEmptySeries: !1,\n                        followCursor: !1,\n                        intersect: !1,\n                        inverseOrder: !1,\n                        custom: void 0,\n                        fillSeriesColor: !1,\n                        theme: \"light\",\n                        cssClass: \"\",\n                        style: {\n                            fontSize: \"12px\",\n                            fontFamily: void 0\n                        },\n                        onDatasetHover: {\n                            highlightDataSeries: !1\n                        },\n                        x: {\n                            show: !0,\n                            format: \"dd MMM\",\n                            formatter: void 0\n                        },\n                        y: {\n                            formatter: void 0,\n                            title: {\n                                formatter: function(t) {\n                                    return t ? t + \": \" : \"\";\n                                }\n                            }\n                        },\n                        z: {\n                            formatter: void 0,\n                            title: \"Size: \"\n                        },\n                        marker: {\n                            show: !0,\n                            fillColors: void 0\n                        },\n                        items: {\n                            display: \"flex\"\n                        },\n                        fixed: {\n                            enabled: !1,\n                            position: \"topRight\",\n                            offsetX: 0,\n                            offsetY: 0\n                        }\n                    },\n                    xaxis: {\n                        type: \"category\",\n                        categories: [],\n                        convertedCatToNumeric: !1,\n                        offsetX: 0,\n                        offsetY: 0,\n                        overwriteCategories: void 0,\n                        labels: {\n                            show: !0,\n                            rotate: -45,\n                            rotateAlways: !1,\n                            hideOverlappingLabels: !0,\n                            trim: !1,\n                            minHeight: void 0,\n                            maxHeight: 120,\n                            showDuplicates: !0,\n                            style: {\n                                colors: [],\n                                fontSize: \"12px\",\n                                fontWeight: 400,\n                                fontFamily: void 0,\n                                cssClass: \"\"\n                            },\n                            offsetX: 0,\n                            offsetY: 0,\n                            format: void 0,\n                            formatter: void 0,\n                            datetimeUTC: !0,\n                            datetimeFormatter: {\n                                year: \"yyyy\",\n                                month: \"MMM 'yy\",\n                                day: \"dd MMM\",\n                                hour: \"HH:mm\",\n                                minute: \"HH:mm:ss\",\n                                second: \"HH:mm:ss\"\n                            }\n                        },\n                        group: {\n                            groups: [],\n                            style: {\n                                colors: [],\n                                fontSize: \"12px\",\n                                fontWeight: 400,\n                                fontFamily: void 0,\n                                cssClass: \"\"\n                            }\n                        },\n                        axisBorder: {\n                            show: !0,\n                            color: \"#e0e0e0\",\n                            width: \"100%\",\n                            height: 1,\n                            offsetX: 0,\n                            offsetY: 0\n                        },\n                        axisTicks: {\n                            show: !0,\n                            color: \"#e0e0e0\",\n                            height: 6,\n                            offsetX: 0,\n                            offsetY: 0\n                        },\n                        stepSize: void 0,\n                        tickAmount: void 0,\n                        tickPlacement: \"on\",\n                        min: void 0,\n                        max: void 0,\n                        range: void 0,\n                        floating: !1,\n                        decimalsInFloat: void 0,\n                        position: \"bottom\",\n                        title: {\n                            text: void 0,\n                            offsetX: 0,\n                            offsetY: 0,\n                            style: {\n                                color: void 0,\n                                fontSize: \"12px\",\n                                fontWeight: 900,\n                                fontFamily: void 0,\n                                cssClass: \"\"\n                            }\n                        },\n                        crosshairs: {\n                            show: !0,\n                            width: 1,\n                            position: \"back\",\n                            opacity: .9,\n                            stroke: {\n                                color: \"#b6b6b6\",\n                                width: 1,\n                                dashArray: 3\n                            },\n                            fill: {\n                                type: \"solid\",\n                                color: \"#B1B9C4\",\n                                gradient: {\n                                    colorFrom: \"#D8E3F0\",\n                                    colorTo: \"#BED1E6\",\n                                    stops: [\n                                        0,\n                                        100\n                                    ],\n                                    opacityFrom: .4,\n                                    opacityTo: .5\n                                }\n                            },\n                            dropShadow: {\n                                enabled: !1,\n                                left: 0,\n                                top: 0,\n                                blur: 1,\n                                opacity: .4\n                            }\n                        },\n                        tooltip: {\n                            enabled: !0,\n                            offsetY: 0,\n                            formatter: void 0,\n                            style: {\n                                fontSize: \"12px\",\n                                fontFamily: void 0\n                            }\n                        }\n                    },\n                    yaxis: this.yAxis,\n                    theme: {\n                        mode: \"light\",\n                        palette: \"palette1\",\n                        monochrome: {\n                            enabled: !1,\n                            color: \"#008FFB\",\n                            shadeTo: \"light\",\n                            shadeIntensity: .65\n                        }\n                    }\n                };\n            }\n        }\n    ]), t;\n}(), P = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.graphics = new m(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new w(this), this.xAxisAnnotations = new k(this), this.yAxisAnnotations = new A(this), this.pointsAnnotations = new S(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;\n    }\n    return r(t, [\n        {\n            key: \"drawAxesAnnotations\",\n            value: function() {\n                var t = this.w;\n                if (t.globals.axisCharts) {\n                    for(var e = this.yAxisAnnotations.drawYAxisAnnotations(), i = this.xAxisAnnotations.drawXAxisAnnotations(), a = this.pointsAnnotations.drawPointAnnotations(), s = t.config.chart.animations.enabled, r = [\n                        e,\n                        i,\n                        a\n                    ], o = [\n                        i.node,\n                        e.node,\n                        a.node\n                    ], n = 0; n < 3; n++)t.globals.dom.elGraphical.add(r[n]), !s || t.globals.resized || t.globals.dataChanged || \"scatter\" !== t.config.chart.type && \"bubble\" !== t.config.chart.type && t.globals.dataPoints > 1 && o[n].classList.add(\"apexcharts-element-hidden\"), t.globals.delayedElements.push({\n                        el: o[n],\n                        index: 0\n                    });\n                    this.helpers.annotationsBackground();\n                }\n            }\n        },\n        {\n            key: \"drawImageAnnos\",\n            value: function() {\n                var t = this;\n                this.w.config.annotations.images.map(function(e, i) {\n                    t.addImage(e, i);\n                });\n            }\n        },\n        {\n            key: \"drawTextAnnos\",\n            value: function() {\n                var t = this;\n                this.w.config.annotations.texts.map(function(e, i) {\n                    t.addText(e, i);\n                });\n            }\n        },\n        {\n            key: \"addXaxisAnnotation\",\n            value: function(t, e, i) {\n                this.xAxisAnnotations.addXaxisAnnotation(t, e, i);\n            }\n        },\n        {\n            key: \"addYaxisAnnotation\",\n            value: function(t, e, i) {\n                this.yAxisAnnotations.addYaxisAnnotation(t, e, i);\n            }\n        },\n        {\n            key: \"addPointAnnotation\",\n            value: function(t, e, i) {\n                this.pointsAnnotations.addPointAnnotation(t, e, i);\n            }\n        },\n        {\n            key: \"addText\",\n            value: function(t, e) {\n                var i = t.x, a = t.y, s = t.text, r = t.textAnchor, o = t.foreColor, n = t.fontSize, l = t.fontFamily, h = t.fontWeight, c = t.cssClass, d = t.backgroundColor, g = t.borderWidth, u = t.strokeDashArray, p = t.borderRadius, f = t.borderColor, x = t.appendTo, b = void 0 === x ? \".apexcharts-svg\" : x, v = t.paddingLeft, m = void 0 === v ? 4 : v, y = t.paddingRight, w = void 0 === y ? 4 : y, k = t.paddingBottom, A = void 0 === k ? 2 : k, S = t.paddingTop, C = void 0 === S ? 2 : S, L = this.w, P = this.graphics.drawText({\n                    x: i,\n                    y: a,\n                    text: s,\n                    textAnchor: r || \"start\",\n                    fontSize: n || \"12px\",\n                    fontWeight: h || \"regular\",\n                    fontFamily: l || L.config.chart.fontFamily,\n                    foreColor: o || L.config.chart.foreColor,\n                    cssClass: c\n                }), I = L.globals.dom.baseEl.querySelector(b);\n                I && I.appendChild(P.node);\n                var T = P.bbox();\n                if (s) {\n                    var M = this.graphics.drawRect(T.x - m, T.y - C, T.width + m + w, T.height + A + C, p, d || \"transparent\", 1, g, f, u);\n                    I.insertBefore(M.node, P.node);\n                }\n            }\n        },\n        {\n            key: \"addImage\",\n            value: function(t, e) {\n                var i = this.w, a = t.path, s = t.x, r = void 0 === s ? 0 : s, o = t.y, n = void 0 === o ? 0 : o, l = t.width, h = void 0 === l ? 20 : l, c = t.height, d = void 0 === c ? 20 : c, g = t.appendTo, u = void 0 === g ? \".apexcharts-svg\" : g, p = i.globals.dom.Paper.image(a);\n                p.size(h, d).move(r, n);\n                var f = i.globals.dom.baseEl.querySelector(u);\n                return f && f.appendChild(p.node), p;\n            }\n        },\n        {\n            key: \"addXaxisAnnotationExternal\",\n            value: function(t, e, i) {\n                return this.addAnnotationExternal({\n                    params: t,\n                    pushToMemory: e,\n                    context: i,\n                    type: \"xaxis\",\n                    contextMethod: i.addXaxisAnnotation\n                }), i;\n            }\n        },\n        {\n            key: \"addYaxisAnnotationExternal\",\n            value: function(t, e, i) {\n                return this.addAnnotationExternal({\n                    params: t,\n                    pushToMemory: e,\n                    context: i,\n                    type: \"yaxis\",\n                    contextMethod: i.addYaxisAnnotation\n                }), i;\n            }\n        },\n        {\n            key: \"addPointAnnotationExternal\",\n            value: function(t, e, i) {\n                return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({\n                    params: t,\n                    pushToMemory: e,\n                    context: i,\n                    type: \"point\",\n                    contextMethod: i.addPointAnnotation\n                }), i;\n            }\n        },\n        {\n            key: \"addAnnotationExternal\",\n            value: function(t) {\n                var e = t.params, i = t.pushToMemory, a = t.context, s = t.type, r = t.contextMethod, o = a, n = o.w, l = n.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations\")), h = l.childNodes.length + 1, c = new L, d = Object.assign({}, \"xaxis\" === s ? c.xAxisAnnotation : \"yaxis\" === s ? c.yAxisAnnotation : c.pointAnnotation), g = x.extend(d, e);\n                switch(s){\n                    case \"xaxis\":\n                        this.addXaxisAnnotation(g, l, h);\n                        break;\n                    case \"yaxis\":\n                        this.addYaxisAnnotation(g, l, h);\n                        break;\n                    case \"point\":\n                        this.addPointAnnotation(g, l, h);\n                }\n                var u = n.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(h, \"']\")), p = this.helpers.addBackgroundToAnno(u, g);\n                return p && l.insertBefore(p.node, u), i && n.globals.memory.methodsToExec.push({\n                    context: o,\n                    id: g.id ? g.id : x.randomId(),\n                    method: r,\n                    label: \"addAnnotation\",\n                    params: e\n                }), a;\n            }\n        },\n        {\n            key: \"clearAnnotations\",\n            value: function(t) {\n                var e = t.w, i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations\");\n                e.globals.memory.methodsToExec.map(function(t, i) {\n                    \"addText\" !== t.label && \"addAnnotation\" !== t.label || e.globals.memory.methodsToExec.splice(i, 1);\n                }), i = x.listToArray(i), Array.prototype.forEach.call(i, function(t) {\n                    for(; t.firstChild;)t.removeChild(t.firstChild);\n                });\n            }\n        },\n        {\n            key: \"removeAnnotation\",\n            value: function(t, e) {\n                var i = t.w, a = i.globals.dom.baseEl.querySelectorAll(\".\".concat(e));\n                a && (i.globals.memory.methodsToExec.map(function(t, a) {\n                    t.id === e && i.globals.memory.methodsToExec.splice(a, 1);\n                }), Array.prototype.forEach.call(a, function(t) {\n                    t.parentElement.removeChild(t);\n                }));\n            }\n        }\n    ]), t;\n}(), I = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.months31 = [\n            1,\n            3,\n            5,\n            7,\n            8,\n            10,\n            12\n        ], this.months30 = [\n            2,\n            4,\n            6,\n            9,\n            11\n        ], this.daysCntOfYear = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334\n        ];\n    }\n    return r(t, [\n        {\n            key: \"isValidDate\",\n            value: function(t) {\n                return \"number\" != typeof t && !isNaN(this.parseDate(t));\n            }\n        },\n        {\n            key: \"getTimeStamp\",\n            value: function(t) {\n                return Date.parse(t) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime() : t;\n            }\n        },\n        {\n            key: \"getDate\",\n            value: function(t) {\n                return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t);\n            }\n        },\n        {\n            key: \"parseDate\",\n            value: function(t) {\n                var e = Date.parse(t);\n                if (!isNaN(e)) return this.getTimeStamp(t);\n                var i = Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n                return i = this.getTimeStamp(i);\n            }\n        },\n        {\n            key: \"parseDateWithTimezone\",\n            value: function(t) {\n                return Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n            }\n        },\n        {\n            key: \"formatDate\",\n            value: function(t, e) {\n                var i = this.w.globals.locale, a = this.w.config.xaxis.labels.datetimeUTC, s = [\n                    \"\\x00\"\n                ].concat(u(i.months)), r = [\n                    \"\\x01\"\n                ].concat(u(i.shortMonths)), o = [\n                    \"\\x02\"\n                ].concat(u(i.days)), n = [\n                    \"\\x03\"\n                ].concat(u(i.shortDays));\n                function l(t, e) {\n                    var i = t + \"\";\n                    for(e = e || 2; i.length < e;)i = \"0\" + i;\n                    return i;\n                }\n                var h = a ? t.getUTCFullYear() : t.getFullYear();\n                e = (e = (e = e.replace(/(^|[^\\\\])yyyy+/g, \"$1\" + h)).replace(/(^|[^\\\\])yy/g, \"$1\" + h.toString().substr(2, 2))).replace(/(^|[^\\\\])y/g, \"$1\" + h);\n                var c = (a ? t.getUTCMonth() : t.getMonth()) + 1;\n                e = (e = (e = (e = e.replace(/(^|[^\\\\])MMMM+/g, \"$1\" + s[0])).replace(/(^|[^\\\\])MMM/g, \"$1\" + r[0])).replace(/(^|[^\\\\])MM/g, \"$1\" + l(c))).replace(/(^|[^\\\\])M/g, \"$1\" + c);\n                var d = a ? t.getUTCDate() : t.getDate();\n                e = (e = (e = (e = e.replace(/(^|[^\\\\])dddd+/g, \"$1\" + o[0])).replace(/(^|[^\\\\])ddd/g, \"$1\" + n[0])).replace(/(^|[^\\\\])dd/g, \"$1\" + l(d))).replace(/(^|[^\\\\])d/g, \"$1\" + d);\n                var g = a ? t.getUTCHours() : t.getHours(), p = g > 12 ? g - 12 : 0 === g ? 12 : g;\n                e = (e = (e = (e = e.replace(/(^|[^\\\\])HH+/g, \"$1\" + l(g))).replace(/(^|[^\\\\])H/g, \"$1\" + g)).replace(/(^|[^\\\\])hh+/g, \"$1\" + l(p))).replace(/(^|[^\\\\])h/g, \"$1\" + p);\n                var f = a ? t.getUTCMinutes() : t.getMinutes();\n                e = (e = e.replace(/(^|[^\\\\])mm+/g, \"$1\" + l(f))).replace(/(^|[^\\\\])m/g, \"$1\" + f);\n                var x = a ? t.getUTCSeconds() : t.getSeconds();\n                e = (e = e.replace(/(^|[^\\\\])ss+/g, \"$1\" + l(x))).replace(/(^|[^\\\\])s/g, \"$1\" + x);\n                var b = a ? t.getUTCMilliseconds() : t.getMilliseconds();\n                e = e.replace(/(^|[^\\\\])fff+/g, \"$1\" + l(b, 3)), b = Math.round(b / 10), e = e.replace(/(^|[^\\\\])ff/g, \"$1\" + l(b)), b = Math.round(b / 10);\n                var v = g < 12 ? \"AM\" : \"PM\";\n                e = (e = (e = e.replace(/(^|[^\\\\])f/g, \"$1\" + b)).replace(/(^|[^\\\\])TT+/g, \"$1\" + v)).replace(/(^|[^\\\\])T/g, \"$1\" + v.charAt(0));\n                var m = v.toLowerCase();\n                e = (e = e.replace(/(^|[^\\\\])tt+/g, \"$1\" + m)).replace(/(^|[^\\\\])t/g, \"$1\" + m.charAt(0));\n                var y = -t.getTimezoneOffset(), w = a || !y ? \"Z\" : y > 0 ? \"+\" : \"-\";\n                if (!a) {\n                    var k = (y = Math.abs(y)) % 60;\n                    w += l(Math.floor(y / 60)) + \":\" + l(k);\n                }\n                e = e.replace(/(^|[^\\\\])K/g, \"$1\" + w);\n                var A = (a ? t.getUTCDay() : t.getDay()) + 1;\n                return e = (e = (e = (e = (e = e.replace(new RegExp(o[0], \"g\"), o[A])).replace(new RegExp(n[0], \"g\"), n[A])).replace(new RegExp(s[0], \"g\"), s[c])).replace(new RegExp(r[0], \"g\"), r[c])).replace(/\\\\(.)/g, \"$1\");\n            }\n        },\n        {\n            key: \"getTimeUnitsfromTimestamp\",\n            value: function(t, e, i) {\n                var a = this.w;\n                void 0 !== a.config.xaxis.min && (t = a.config.xaxis.min), void 0 !== a.config.xaxis.max && (e = a.config.xaxis.max);\n                var s = this.getDate(t), r = this.getDate(e), o = this.formatDate(s, \"yyyy MM dd HH mm ss fff\").split(\" \"), n = this.formatDate(r, \"yyyy MM dd HH mm ss fff\").split(\" \");\n                return {\n                    minMillisecond: parseInt(o[6], 10),\n                    maxMillisecond: parseInt(n[6], 10),\n                    minSecond: parseInt(o[5], 10),\n                    maxSecond: parseInt(n[5], 10),\n                    minMinute: parseInt(o[4], 10),\n                    maxMinute: parseInt(n[4], 10),\n                    minHour: parseInt(o[3], 10),\n                    maxHour: parseInt(n[3], 10),\n                    minDate: parseInt(o[2], 10),\n                    maxDate: parseInt(n[2], 10),\n                    minMonth: parseInt(o[1], 10) - 1,\n                    maxMonth: parseInt(n[1], 10) - 1,\n                    minYear: parseInt(o[0], 10),\n                    maxYear: parseInt(n[0], 10)\n                };\n            }\n        },\n        {\n            key: \"isLeapYear\",\n            value: function(t) {\n                return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;\n            }\n        },\n        {\n            key: \"calculcateLastDaysOfMonth\",\n            value: function(t, e, i) {\n                return this.determineDaysOfMonths(t, e) - i;\n            }\n        },\n        {\n            key: \"determineDaysOfYear\",\n            value: function(t) {\n                var e = 365;\n                return this.isLeapYear(t) && (e = 366), e;\n            }\n        },\n        {\n            key: \"determineRemainingDaysOfYear\",\n            value: function(t, e, i) {\n                var a = this.daysCntOfYear[e] + i;\n                return e > 1 && this.isLeapYear() && a++, a;\n            }\n        },\n        {\n            key: \"determineDaysOfMonths\",\n            value: function(t, e) {\n                var i = 30;\n                switch(t = x.monthMod(t), !0){\n                    case this.months30.indexOf(t) > -1:\n                        2 === t && (i = this.isLeapYear(e) ? 29 : 28);\n                        break;\n                    case this.months31.indexOf(t) > -1:\n                    default:\n                        i = 31;\n                }\n                return i;\n            }\n        }\n    ]), t;\n}(), T = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.tooltipKeyFormat = \"dd MMM\";\n    }\n    return r(t, [\n        {\n            key: \"xLabelFormat\",\n            value: function(t, e, i, a) {\n                var s = this.w;\n                if (\"datetime\" === s.config.xaxis.type && void 0 === s.config.xaxis.labels.formatter && void 0 === s.config.tooltip.x.formatter) {\n                    var r = new I(this.ctx);\n                    return r.formatDate(r.getDate(e), s.config.tooltip.x.format);\n                }\n                return t(e, i, a);\n            }\n        },\n        {\n            key: \"defaultGeneralFormatter\",\n            value: function(t) {\n                return Array.isArray(t) ? t.map(function(t) {\n                    return t;\n                }) : t;\n            }\n        },\n        {\n            key: \"defaultYFormatter\",\n            value: function(t, e, i) {\n                var a = this.w;\n                return x.isNumber(t) && (t = 0 !== a.globals.yValueDecimal ? t.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : a.globals.yValueDecimal) : a.globals.maxYArr[i] - a.globals.minYArr[i] < 5 ? t.toFixed(1) : t.toFixed(0)), t;\n            }\n        },\n        {\n            key: \"setLabelFormatters\",\n            value: function() {\n                var t = this, e = this.w;\n                return e.globals.xaxisTooltipFormatter = function(e) {\n                    return t.defaultGeneralFormatter(e);\n                }, e.globals.ttKeyFormatter = function(e) {\n                    return t.defaultGeneralFormatter(e);\n                }, e.globals.ttZFormatter = function(t) {\n                    return t;\n                }, e.globals.legendFormatter = function(e) {\n                    return t.defaultGeneralFormatter(e);\n                }, void 0 !== e.config.xaxis.labels.formatter ? e.globals.xLabelFormatter = e.config.xaxis.labels.formatter : e.globals.xLabelFormatter = function(t) {\n                    if (x.isNumber(t)) {\n                        if (!e.config.xaxis.convertedCatToNumeric && \"numeric\" === e.config.xaxis.type) {\n                            if (x.isNumber(e.config.xaxis.decimalsInFloat)) return t.toFixed(e.config.xaxis.decimalsInFloat);\n                            var i = e.globals.maxX - e.globals.minX;\n                            return i > 0 && i < 100 ? t.toFixed(1) : t.toFixed(0);\n                        }\n                        if (e.globals.isBarHorizontal) {\n                            if (e.globals.maxY - e.globals.minYArr < 4) return t.toFixed(1);\n                        }\n                        return t.toFixed(0);\n                    }\n                    return t;\n                }, \"function\" == typeof e.config.tooltip.x.formatter ? e.globals.ttKeyFormatter = e.config.tooltip.x.formatter : e.globals.ttKeyFormatter = e.globals.xLabelFormatter, \"function\" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter), (Array.isArray(e.config.tooltip.y) || void 0 !== e.config.tooltip.y.formatter) && (e.globals.ttVal = e.config.tooltip.y), void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter), void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter), e.config.yaxis.forEach(function(i, a) {\n                    void 0 !== i.labels.formatter ? e.globals.yLabelFormatters[a] = i.labels.formatter : e.globals.yLabelFormatters[a] = function(s) {\n                        return e.globals.xyCharts ? Array.isArray(s) ? s.map(function(e) {\n                            return t.defaultYFormatter(e, i, a);\n                        }) : t.defaultYFormatter(s, i, a) : s;\n                    };\n                }), e.globals;\n            }\n        },\n        {\n            key: \"heatmapLabelFormatters\",\n            value: function() {\n                var t = this.w;\n                if (\"heatmap\" === t.config.chart.type) {\n                    t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();\n                    var e = t.globals.seriesNames.reduce(function(t, e) {\n                        return t.length > e.length ? t : e;\n                    }, 0);\n                    t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;\n                }\n            }\n        }\n    ]), t;\n}(), M = function(t) {\n    var e, i = t.isTimeline, a = t.ctx, s = t.seriesIndex, r = t.dataPointIndex, o = t.y1, n = t.y2, l = t.w, h = l.globals.seriesRangeStart[s][r], c = l.globals.seriesRangeEnd[s][r], d = l.globals.labels[r], g = l.config.series[s].name ? l.config.series[s].name : \"\", u = l.globals.ttKeyFormatter, p = l.config.tooltip.y.title.formatter, f = {\n        w: l,\n        seriesIndex: s,\n        dataPointIndex: r,\n        start: h,\n        end: c\n    };\n    (\"function\" == typeof p && (g = p(g, f)), null !== (e = l.config.series[s].data[r]) && void 0 !== e && e.x && (d = l.config.series[s].data[r].x), i) || \"datetime\" === l.config.xaxis.type && (d = new T(a).xLabelFormat(l.globals.ttKeyFormatter, d, d, {\n        i: void 0,\n        dateFormatter: new I(a).formatDate,\n        w: l\n    }));\n    \"function\" == typeof u && (d = u(d, f)), Number.isFinite(o) && Number.isFinite(n) && (h = o, c = n);\n    var x = \"\", b = \"\", v = l.globals.colors[s];\n    if (void 0 === l.config.tooltip.x.formatter) if (\"datetime\" === l.config.xaxis.type) {\n        var m = new I(a);\n        x = m.formatDate(m.getDate(h), l.config.tooltip.x.format), b = m.formatDate(m.getDate(c), l.config.tooltip.x.format);\n    } else x = h, b = c;\n    else x = l.config.tooltip.x.formatter(h), b = l.config.tooltip.x.formatter(c);\n    return {\n        start: h,\n        end: c,\n        startVal: x,\n        endVal: b,\n        ylabel: d,\n        color: v,\n        seriesName: g\n    };\n}, z = function(t) {\n    var e = t.color, i = t.seriesName, a = t.ylabel, s = t.start, r = t.end, o = t.seriesIndex, n = t.dataPointIndex, l = t.ctx.tooltip.tooltipLabels.getFormatters(o);\n    s = l.yLbFormatter(s), r = l.yLbFormatter(r);\n    var h = l.yLbFormatter(t.w.globals.series[o][n]), c = '<span class=\"value start-value\">\\n  '.concat(s, '\\n  </span> <span class=\"separator\">-</span> <span class=\"value end-value\">\\n  ').concat(r, \"\\n  </span>\");\n    return '<div class=\"apexcharts-tooltip-rangebar\"><div> <span class=\"series-name\" style=\"color: ' + e + '\">' + (i || \"\") + '</span></div><div> <span class=\"category\">' + a + \": </span> \" + (t.w.globals.comboCharts ? \"rangeArea\" === t.w.config.series[o].type || \"rangeBar\" === t.w.config.series[o].type ? c : \"<span>\".concat(h, \"</span>\") : c) + \" </div></div>\";\n}, X = function() {\n    function t(e) {\n        a(this, t), this.opts = e;\n    }\n    return r(t, [\n        {\n            key: \"hideYAxis\",\n            value: function() {\n                this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = \"\", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;\n            }\n        },\n        {\n            key: \"line\",\n            value: function() {\n                return {\n                    chart: {\n                        animations: {\n                            easing: \"swing\"\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    stroke: {\n                        width: 5,\n                        curve: \"straight\"\n                    },\n                    markers: {\n                        size: 0,\n                        hover: {\n                            sizeOffset: 6\n                        }\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"sparkline\",\n            value: function(t) {\n                this.hideYAxis();\n                return x.extend(t, {\n                    grid: {\n                        show: !1,\n                        padding: {\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            bottom: 0\n                        }\n                    },\n                    legend: {\n                        show: !1\n                    },\n                    xaxis: {\n                        labels: {\n                            show: !1\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        axisBorder: {\n                            show: !1\n                        },\n                        axisTicks: {\n                            show: !1\n                        }\n                    },\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        },\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    }\n                });\n            }\n        },\n        {\n            key: \"bar\",\n            value: function() {\n                return {\n                    chart: {\n                        stacked: !1,\n                        animations: {\n                            easing: \"swing\"\n                        }\n                    },\n                    plotOptions: {\n                        bar: {\n                            dataLabels: {\n                                position: \"center\"\n                            }\n                        }\n                    },\n                    dataLabels: {\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        },\n                        background: {\n                            enabled: !1\n                        }\n                    },\n                    stroke: {\n                        width: 0,\n                        lineCap: \"round\"\n                    },\n                    fill: {\n                        opacity: .85\n                    },\n                    legend: {\n                        markers: {\n                            shape: \"square\",\n                            radius: 2,\n                            size: 8\n                        }\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0\n                    },\n                    xaxis: {\n                        tooltip: {\n                            enabled: !1\n                        },\n                        tickPlacement: \"between\",\n                        crosshairs: {\n                            width: \"barWidth\",\n                            position: \"back\",\n                            fill: {\n                                type: \"gradient\"\n                            },\n                            dropShadow: {\n                                enabled: !1\n                            },\n                            stroke: {\n                                width: 0\n                            }\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"funnel\",\n            value: function() {\n                return this.hideYAxis(), e(e({}, this.bar()), {}, {\n                    chart: {\n                        animations: {\n                            easing: \"linear\",\n                            speed: 800,\n                            animateGradually: {\n                                enabled: !1\n                            }\n                        }\n                    },\n                    plotOptions: {\n                        bar: {\n                            horizontal: !0,\n                            borderRadiusApplication: \"around\",\n                            borderRadius: 0,\n                            dataLabels: {\n                                position: \"center\"\n                            }\n                        }\n                    },\n                    grid: {\n                        show: !1,\n                        padding: {\n                            left: 0,\n                            right: 0\n                        }\n                    },\n                    xaxis: {\n                        labels: {\n                            show: !1\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        axisBorder: {\n                            show: !1\n                        },\n                        axisTicks: {\n                            show: !1\n                        }\n                    }\n                });\n            }\n        },\n        {\n            key: \"candlestick\",\n            value: function() {\n                var t = this;\n                return {\n                    stroke: {\n                        width: 1,\n                        colors: [\n                            \"#333\"\n                        ]\n                    },\n                    fill: {\n                        opacity: 1\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    tooltip: {\n                        shared: !0,\n                        custom: function(e) {\n                            var i = e.seriesIndex, a = e.dataPointIndex, s = e.w;\n                            return t._getBoxTooltip(s, i, a, [\n                                \"Open\",\n                                \"High\",\n                                \"\",\n                                \"Low\",\n                                \"Close\"\n                            ], \"candlestick\");\n                        }\n                    },\n                    states: {\n                        active: {\n                            filter: {\n                                type: \"none\"\n                            }\n                        }\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"boxPlot\",\n            value: function() {\n                var t = this;\n                return {\n                    chart: {\n                        animations: {\n                            dynamicAnimation: {\n                                enabled: !1\n                            }\n                        }\n                    },\n                    stroke: {\n                        width: 1,\n                        colors: [\n                            \"#24292e\"\n                        ]\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    tooltip: {\n                        shared: !0,\n                        custom: function(e) {\n                            var i = e.seriesIndex, a = e.dataPointIndex, s = e.w;\n                            return t._getBoxTooltip(s, i, a, [\n                                \"Minimum\",\n                                \"Q1\",\n                                \"Median\",\n                                \"Q3\",\n                                \"Maximum\"\n                            ], \"boxPlot\");\n                        }\n                    },\n                    markers: {\n                        size: 5,\n                        strokeWidth: 1,\n                        strokeColors: \"#111\"\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"rangeBar\",\n            value: function() {\n                return {\n                    chart: {\n                        animations: {\n                            animateGradually: !1\n                        }\n                    },\n                    stroke: {\n                        width: 0,\n                        lineCap: \"square\"\n                    },\n                    plotOptions: {\n                        bar: {\n                            borderRadius: 0,\n                            dataLabels: {\n                                position: \"center\"\n                            }\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1,\n                        formatter: function(t, e) {\n                            e.ctx;\n                            var i = e.seriesIndex, a = e.dataPointIndex, s = e.w, r = function() {\n                                var t = s.globals.seriesRangeStart[i][a];\n                                return s.globals.seriesRangeEnd[i][a] - t;\n                            };\n                            return s.globals.comboCharts ? \"rangeBar\" === s.config.series[i].type || \"rangeArea\" === s.config.series[i].type ? r() : t : r();\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    markers: {\n                        size: 10\n                    },\n                    tooltip: {\n                        shared: !1,\n                        followCursor: !0,\n                        custom: function(t) {\n                            return t.w.config.plotOptions && t.w.config.plotOptions.bar && t.w.config.plotOptions.bar.horizontal ? function(t) {\n                                var i = M(e(e({}, t), {}, {\n                                    isTimeline: !0\n                                })), a = i.color, s = i.seriesName, r = i.ylabel, o = i.startVal, n = i.endVal;\n                                return z(e(e({}, t), {}, {\n                                    color: a,\n                                    seriesName: s,\n                                    ylabel: r,\n                                    start: o,\n                                    end: n\n                                }));\n                            }(t) : function(t) {\n                                var i = M(t), a = i.color, s = i.seriesName, r = i.ylabel, o = i.start, n = i.end;\n                                return z(e(e({}, t), {}, {\n                                    color: a,\n                                    seriesName: s,\n                                    ylabel: r,\n                                    start: o,\n                                    end: n\n                                }));\n                            }(t);\n                        }\n                    },\n                    xaxis: {\n                        tickPlacement: \"between\",\n                        tooltip: {\n                            enabled: !1\n                        },\n                        crosshairs: {\n                            stroke: {\n                                width: 0\n                            }\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"dumbbell\",\n            value: function(t) {\n                var e, i;\n                return null !== (e = t.plotOptions.bar) && void 0 !== e && e.barHeight || (t.plotOptions.bar.barHeight = 2), null !== (i = t.plotOptions.bar) && void 0 !== i && i.columnWidth || (t.plotOptions.bar.columnWidth = 2), t;\n            }\n        },\n        {\n            key: \"area\",\n            value: function() {\n                return {\n                    stroke: {\n                        width: 4,\n                        fill: {\n                            type: \"solid\",\n                            gradient: {\n                                inverseColors: !1,\n                                shade: \"light\",\n                                type: \"vertical\",\n                                opacityFrom: .65,\n                                opacityTo: .5,\n                                stops: [\n                                    0,\n                                    100,\n                                    100\n                                ]\n                            }\n                        }\n                    },\n                    fill: {\n                        type: \"gradient\",\n                        gradient: {\n                            inverseColors: !1,\n                            shade: \"light\",\n                            type: \"vertical\",\n                            opacityFrom: .65,\n                            opacityTo: .5,\n                            stops: [\n                                0,\n                                100,\n                                100\n                            ]\n                        }\n                    },\n                    markers: {\n                        size: 0,\n                        hover: {\n                            sizeOffset: 6\n                        }\n                    },\n                    tooltip: {\n                        followCursor: !1\n                    }\n                };\n            }\n        },\n        {\n            key: \"rangeArea\",\n            value: function() {\n                return {\n                    stroke: {\n                        curve: \"straight\",\n                        width: 0\n                    },\n                    fill: {\n                        type: \"solid\",\n                        opacity: .6\n                    },\n                    markers: {\n                        size: 0\n                    },\n                    states: {\n                        hover: {\n                            filter: {\n                                type: \"none\"\n                            }\n                        },\n                        active: {\n                            filter: {\n                                type: \"none\"\n                            }\n                        }\n                    },\n                    tooltip: {\n                        intersect: !1,\n                        shared: !0,\n                        followCursor: !0,\n                        custom: function(t) {\n                            return function(t) {\n                                var i = M(t), a = i.color, s = i.seriesName, r = i.ylabel, o = i.start, n = i.end;\n                                return z(e(e({}, t), {}, {\n                                    color: a,\n                                    seriesName: s,\n                                    ylabel: r,\n                                    start: o,\n                                    end: n\n                                }));\n                            }(t);\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"brush\",\n            value: function(t) {\n                return x.extend(t, {\n                    chart: {\n                        toolbar: {\n                            autoSelected: \"selection\",\n                            show: !1\n                        },\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    stroke: {\n                        width: 1\n                    },\n                    tooltip: {\n                        enabled: !1\n                    },\n                    xaxis: {\n                        tooltip: {\n                            enabled: !1\n                        }\n                    }\n                });\n            }\n        },\n        {\n            key: \"stacked100\",\n            value: function(t) {\n                t.dataLabels = t.dataLabels || {}, t.dataLabels.formatter = t.dataLabels.formatter || void 0;\n                var e = t.dataLabels.formatter;\n                return t.yaxis.forEach(function(e, i) {\n                    t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n                }), \"bar\" === t.chart.type && (t.dataLabels.formatter = e || function(t) {\n                    return \"number\" == typeof t && t ? t.toFixed(0) + \"%\" : t;\n                }), t;\n            }\n        },\n        {\n            key: \"stackedBars\",\n            value: function() {\n                var t = this.bar();\n                return e(e({}, t), {}, {\n                    plotOptions: e(e({}, t.plotOptions), {}, {\n                        bar: e(e({}, t.plotOptions.bar), {}, {\n                            borderRadiusApplication: \"end\",\n                            borderRadiusWhenStacked: \"last\"\n                        })\n                    })\n                });\n            }\n        },\n        {\n            key: \"convertCatToNumeric\",\n            value: function(t) {\n                return t.xaxis.convertedCatToNumeric = !0, t;\n            }\n        },\n        {\n            key: \"convertCatToNumericXaxis\",\n            value: function(t, e, i) {\n                t.xaxis.type = \"numeric\", t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function(t) {\n                    return x.isNumber(t) ? Math.floor(t) : t;\n                };\n                var a = t.xaxis.labels.formatter, s = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;\n                return i && i.length && (s = i.map(function(t) {\n                    return Array.isArray(t) ? t : String(t);\n                })), s && s.length && (t.xaxis.labels.formatter = function(t) {\n                    return x.isNumber(t) ? a(s[Math.floor(t) - 1]) : a(t);\n                }), t.xaxis.categories = [], t.labels = [], t.xaxis.tickAmount = t.xaxis.tickAmount || \"dataPoints\", t;\n            }\n        },\n        {\n            key: \"bubble\",\n            value: function() {\n                return {\n                    dataLabels: {\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            width: 0\n                        }\n                    },\n                    fill: {\n                        type: \"solid\",\n                        gradient: {\n                            shade: \"light\",\n                            inverse: !0,\n                            shadeIntensity: .55,\n                            opacityFrom: .4,\n                            opacityTo: .8\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"scatter\",\n            value: function() {\n                return {\n                    dataLabels: {\n                        enabled: !1\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0\n                    },\n                    markers: {\n                        size: 6,\n                        strokeWidth: 1,\n                        hover: {\n                            sizeOffset: 2\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"heatmap\",\n            value: function() {\n                return {\n                    chart: {\n                        stacked: !1\n                    },\n                    fill: {\n                        opacity: 1\n                    },\n                    dataLabels: {\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    stroke: {\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    tooltip: {\n                        followCursor: !0,\n                        marker: {\n                            show: !1\n                        },\n                        x: {\n                            show: !1\n                        }\n                    },\n                    legend: {\n                        position: \"top\",\n                        markers: {\n                            shape: \"square\",\n                            size: 10,\n                            offsetY: 2\n                        }\n                    },\n                    grid: {\n                        padding: {\n                            right: 20\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"treemap\",\n            value: function() {\n                return {\n                    chart: {\n                        zoom: {\n                            enabled: !1\n                        }\n                    },\n                    dataLabels: {\n                        style: {\n                            fontSize: 14,\n                            fontWeight: 600,\n                            colors: [\n                                \"#fff\"\n                            ]\n                        }\n                    },\n                    stroke: {\n                        show: !0,\n                        width: 2,\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    legend: {\n                        show: !1\n                    },\n                    fill: {\n                        gradient: {\n                            stops: [\n                                0,\n                                100\n                            ]\n                        }\n                    },\n                    tooltip: {\n                        followCursor: !0,\n                        x: {\n                            show: !1\n                        }\n                    },\n                    grid: {\n                        padding: {\n                            left: 0,\n                            right: 0\n                        }\n                    },\n                    xaxis: {\n                        crosshairs: {\n                            show: !1\n                        },\n                        tooltip: {\n                            enabled: !1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"pie\",\n            value: function() {\n                return {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    plotOptions: {\n                        pie: {\n                            donut: {\n                                labels: {\n                                    show: !1\n                                }\n                            }\n                        }\n                    },\n                    dataLabels: {\n                        formatter: function(t) {\n                            return t.toFixed(1) + \"%\";\n                        },\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        dropShadow: {\n                            enabled: !0\n                        }\n                    },\n                    stroke: {\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    fill: {\n                        opacity: 1,\n                        gradient: {\n                            shade: \"light\",\n                            stops: [\n                                0,\n                                100\n                            ]\n                        }\n                    },\n                    tooltip: {\n                        theme: \"dark\",\n                        fillSeriesColor: !0\n                    },\n                    legend: {\n                        position: \"right\"\n                    }\n                };\n            }\n        },\n        {\n            key: \"donut\",\n            value: function() {\n                return {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    dataLabels: {\n                        formatter: function(t) {\n                            return t.toFixed(1) + \"%\";\n                        },\n                        style: {\n                            colors: [\n                                \"#fff\"\n                            ]\n                        },\n                        background: {\n                            enabled: !1\n                        },\n                        dropShadow: {\n                            enabled: !0\n                        }\n                    },\n                    stroke: {\n                        colors: [\n                            \"#fff\"\n                        ]\n                    },\n                    fill: {\n                        opacity: 1,\n                        gradient: {\n                            shade: \"light\",\n                            shadeIntensity: .35,\n                            stops: [\n                                80,\n                                100\n                            ],\n                            opacityFrom: 1,\n                            opacityTo: 1\n                        }\n                    },\n                    tooltip: {\n                        theme: \"dark\",\n                        fillSeriesColor: !0\n                    },\n                    legend: {\n                        position: \"right\"\n                    }\n                };\n            }\n        },\n        {\n            key: \"polarArea\",\n            value: function() {\n                return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, {\n                    chart: {\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    dataLabels: {\n                        formatter: function(t) {\n                            return t.toFixed(1) + \"%\";\n                        },\n                        enabled: !1\n                    },\n                    stroke: {\n                        show: !0,\n                        width: 2\n                    },\n                    fill: {\n                        opacity: .7\n                    },\n                    tooltip: {\n                        theme: \"dark\",\n                        fillSeriesColor: !0\n                    },\n                    legend: {\n                        position: \"right\"\n                    }\n                };\n            }\n        },\n        {\n            key: \"radar\",\n            value: function() {\n                return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {\n                    dataLabels: {\n                        enabled: !1,\n                        style: {\n                            fontSize: \"11px\"\n                        }\n                    },\n                    stroke: {\n                        width: 2\n                    },\n                    markers: {\n                        size: 3,\n                        strokeWidth: 1,\n                        strokeOpacity: 1\n                    },\n                    fill: {\n                        opacity: .2\n                    },\n                    tooltip: {\n                        shared: !1,\n                        intersect: !0,\n                        followCursor: !0\n                    },\n                    grid: {\n                        show: !1\n                    },\n                    xaxis: {\n                        labels: {\n                            formatter: function(t) {\n                                return t;\n                            },\n                            style: {\n                                colors: [\n                                    \"#a8a8a8\"\n                                ],\n                                fontSize: \"11px\"\n                            }\n                        },\n                        tooltip: {\n                            enabled: !1\n                        },\n                        crosshairs: {\n                            show: !1\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"radialBar\",\n            value: function() {\n                return {\n                    chart: {\n                        animations: {\n                            dynamicAnimation: {\n                                enabled: !0,\n                                speed: 800\n                            }\n                        },\n                        toolbar: {\n                            show: !1\n                        }\n                    },\n                    fill: {\n                        gradient: {\n                            shade: \"dark\",\n                            shadeIntensity: .4,\n                            inverseColors: !1,\n                            type: \"diagonal2\",\n                            opacityFrom: 1,\n                            opacityTo: 1,\n                            stops: [\n                                70,\n                                98,\n                                100\n                            ]\n                        }\n                    },\n                    legend: {\n                        show: !1,\n                        position: \"right\"\n                    },\n                    tooltip: {\n                        enabled: !1,\n                        fillSeriesColor: !0\n                    }\n                };\n            }\n        },\n        {\n            key: \"_getBoxTooltip\",\n            value: function(t, e, i, a, s) {\n                var r = t.globals.seriesCandleO[e][i], o = t.globals.seriesCandleH[e][i], n = t.globals.seriesCandleM[e][i], l = t.globals.seriesCandleL[e][i], h = t.globals.seriesCandleC[e][i];\n                return t.config.series[e].type && t.config.series[e].type !== s ? '<div class=\"apexcharts-custom-tooltip\">\\n          '.concat(t.config.series[e].name ? t.config.series[e].name : \"series-\" + (e + 1), \": <strong>\").concat(t.globals.series[e][i], \"</strong>\\n        </div>\") : '<div class=\"apexcharts-tooltip-box apexcharts-tooltip-'.concat(t.config.chart.type, '\">') + \"<div>\".concat(a[0], ': <span class=\"value\">') + r + \"</span></div>\" + \"<div>\".concat(a[1], ': <span class=\"value\">') + o + \"</span></div>\" + (n ? \"<div>\".concat(a[2], ': <span class=\"value\">') + n + \"</span></div>\" : \"\") + \"<div>\".concat(a[3], ': <span class=\"value\">') + l + \"</span></div>\" + \"<div>\".concat(a[4], ': <span class=\"value\">') + h + \"</span></div></div>\";\n            }\n        }\n    ]), t;\n}(), E = function() {\n    function t(e) {\n        a(this, t), this.opts = e;\n    }\n    return r(t, [\n        {\n            key: \"init\",\n            value: function(t) {\n                var e = t.responsiveOverride, a = this.opts, s = new L, r = new X(a);\n                this.chartType = a.chart.type, a = this.extendYAxis(a), a = this.extendAnnotations(a);\n                var o = s.init(), n = {};\n                if (a && \"object\" === i(a)) {\n                    var l, h, c, d, g, u, p, f, b = {};\n                    b = -1 !== [\n                        \"line\",\n                        \"area\",\n                        \"bar\",\n                        \"candlestick\",\n                        \"boxPlot\",\n                        \"rangeBar\",\n                        \"rangeArea\",\n                        \"bubble\",\n                        \"scatter\",\n                        \"heatmap\",\n                        \"treemap\",\n                        \"pie\",\n                        \"polarArea\",\n                        \"donut\",\n                        \"radar\",\n                        \"radialBar\"\n                    ].indexOf(a.chart.type) ? r[a.chart.type]() : r.line(), null !== (l = a.plotOptions) && void 0 !== l && null !== (h = l.bar) && void 0 !== h && h.isFunnel && (b = r.funnel()), a.chart.stacked && \"bar\" === a.chart.type && (b = r.stackedBars()), null !== (c = a.chart.brush) && void 0 !== c && c.enabled && (b = r.brush(b)), a.chart.stacked && \"100%\" === a.chart.stackType && (a = r.stacked100(a)), null !== (d = a.plotOptions) && void 0 !== d && null !== (g = d.bar) && void 0 !== g && g.isDumbbell && (a = r.dumbbell(a)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a), a.xaxis = a.xaxis || window.Apex.xaxis || {}, e || (a.xaxis.convertedCatToNumeric = !1), (null !== (u = (a = this.checkForCatToNumericXAxis(this.chartType, b, a)).chart.sparkline) && void 0 !== u && u.enabled || null !== (p = window.Apex.chart) && void 0 !== p && null !== (f = p.sparkline) && void 0 !== f && f.enabled) && (b = r.sparkline(b)), n = x.extend(o, b);\n                }\n                var v = x.extend(n, window.Apex);\n                return o = x.extend(v, a), o = this.handleUserInputErrors(o);\n            }\n        },\n        {\n            key: \"checkForCatToNumericXAxis\",\n            value: function(t, e, i) {\n                var a, s, r = new X(i), o = (\"bar\" === t || \"boxPlot\" === t) && (null === (a = i.plotOptions) || void 0 === a || null === (s = a.bar) || void 0 === s ? void 0 : s.horizontal), n = \"pie\" === t || \"polarArea\" === t || \"donut\" === t || \"radar\" === t || \"radialBar\" === t || \"heatmap\" === t, l = \"datetime\" !== i.xaxis.type && \"numeric\" !== i.xaxis.type, h = i.xaxis.tickPlacement ? i.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement;\n                return o || n || !l || \"between\" === h || (i = r.convertCatToNumeric(i)), i;\n            }\n        },\n        {\n            key: \"extendYAxis\",\n            value: function(t, e) {\n                var i = new L;\n                (void 0 === t.yaxis || !t.yaxis || Array.isArray(t.yaxis) && 0 === t.yaxis.length) && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = x.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [\n                    x.extend(i.yAxis, t.yaxis)\n                ] : t.yaxis = x.extendArray(t.yaxis, i.yAxis);\n                var a = !1;\n                t.yaxis.forEach(function(t) {\n                    t.logarithmic && (a = !0);\n                });\n                var s = t.series;\n                return e && !s && (s = e.config.series), a && s.length !== t.yaxis.length && s.length && (t.yaxis = s.map(function(e, a) {\n                    if (e.name || (s[a].name = \"series-\".concat(a + 1)), t.yaxis[a]) return t.yaxis[a].seriesName = s[a].name, t.yaxis[a];\n                    var r = x.extend(i.yAxis, t.yaxis[0]);\n                    return r.show = !1, r;\n                })), a && s.length > 1 && s.length !== t.yaxis.length && console.warn(\"A multi-series logarithmic chart should have equal number of series and y-axes\"), t;\n            }\n        },\n        {\n            key: \"extendAnnotations\",\n            value: function(t) {\n                return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);\n            }\n        },\n        {\n            key: \"extendYAxisAnnotations\",\n            value: function(t) {\n                var e = new L;\n                return t.annotations.yaxis = x.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;\n            }\n        },\n        {\n            key: \"extendXAxisAnnotations\",\n            value: function(t) {\n                var e = new L;\n                return t.annotations.xaxis = x.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;\n            }\n        },\n        {\n            key: \"extendPointAnnotations\",\n            value: function(t) {\n                var e = new L;\n                return t.annotations.points = x.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;\n            }\n        },\n        {\n            key: \"checkForDarkTheme\",\n            value: function(t) {\n                t.theme && \"dark\" === t.theme.mode && (t.tooltip || (t.tooltip = {}), \"light\" !== t.tooltip.theme && (t.tooltip.theme = \"dark\"), t.chart.foreColor || (t.chart.foreColor = \"#f6f7f8\"), t.chart.background || (t.chart.background = \"#424242\"), t.theme.palette || (t.theme.palette = \"palette4\"));\n            }\n        },\n        {\n            key: \"handleUserInputErrors\",\n            value: function(t) {\n                var e = t;\n                if (e.tooltip.shared && e.tooltip.intersect) throw new Error(\"tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.\");\n                if (\"bar\" === e.chart.type && e.plotOptions.bar.horizontal) {\n                    if (e.yaxis.length > 1) throw new Error(\"Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false\");\n                    e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;\n                }\n                return \"bar\" !== e.chart.type && \"rangeBar\" !== e.chart.type || e.tooltip.shared && \"barWidth\" === e.xaxis.crosshairs.width && e.series.length > 1 && (e.xaxis.crosshairs.width = \"tickWidth\"), \"candlestick\" !== e.chart.type && \"boxPlot\" !== e.chart.type || e.yaxis[0].reversed && (console.warn(\"Reversed y-axis in \".concat(e.chart.type, \" chart is not supported.\")), e.yaxis[0].reversed = !1), e;\n            }\n        }\n    ]), t;\n}(), Y = function() {\n    function t() {\n        a(this, t);\n    }\n    return r(t, [\n        {\n            key: \"initGlobalVars\",\n            value: function(t) {\n                t.series = [], t.seriesCandleO = [], t.seriesCandleH = [], t.seriesCandleM = [], t.seriesCandleL = [], t.seriesCandleC = [], t.seriesRangeStart = [], t.seriesRangeEnd = [], t.seriesRange = [], t.seriesPercent = [], t.seriesGoals = [], t.seriesX = [], t.seriesZ = [], t.seriesNames = [], t.seriesTotals = [], t.seriesLog = [], t.seriesColors = [], t.stackedSeriesTotals = [], t.seriesXvalues = [], t.seriesYvalues = [], t.labels = [], t.hasXaxisGroups = !1, t.groups = [], t.hasSeriesGroups = !1, t.seriesGroups = [], t.categoryLabels = [], t.timescaleLabels = [], t.noLabelsProvided = !1, t.resizeTimer = null, t.selectionResizeTimer = null, t.delayedElements = [], t.pointsArray = [], t.dataLabelsRects = [], t.isXNumeric = !1, t.skipLastTimelinelabel = !1, t.skipFirstTimelinelabel = !1, t.isDataXYZ = !1, t.isMultiLineX = !1, t.isMultipleYAxis = !1, t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE, t.minYArr = [], t.maxYArr = [], t.maxX = -Number.MAX_VALUE, t.minX = Number.MAX_VALUE, t.initialMaxX = -Number.MAX_VALUE, t.initialMinX = Number.MAX_VALUE, t.maxDate = 0, t.minDate = Number.MAX_VALUE, t.minZ = Number.MAX_VALUE, t.maxZ = -Number.MAX_VALUE, t.minXDiff = Number.MAX_VALUE, t.yAxisScale = [], t.xAxisScale = null, t.xAxisTicksPositions = [], t.yLabelsCoords = [], t.yTitleCoords = [], t.barPadForNumericAxis = 0, t.padHorizontal = 0, t.xRange = 0, t.yRange = [], t.zRange = 0, t.dataPoints = 0, t.xTickAmount = 0;\n            }\n        },\n        {\n            key: \"globalVars\",\n            value: function(t) {\n                return {\n                    chartID: null,\n                    cuid: null,\n                    events: {\n                        beforeMount: [],\n                        mounted: [],\n                        updated: [],\n                        clicked: [],\n                        selection: [],\n                        dataPointSelection: [],\n                        zoomed: [],\n                        scrolled: []\n                    },\n                    colors: [],\n                    clientX: null,\n                    clientY: null,\n                    fill: {\n                        colors: []\n                    },\n                    stroke: {\n                        colors: []\n                    },\n                    dataLabels: {\n                        style: {\n                            colors: []\n                        }\n                    },\n                    radarPolygons: {\n                        fill: {\n                            colors: []\n                        }\n                    },\n                    markers: {\n                        colors: [],\n                        size: t.markers.size,\n                        largestSize: 0\n                    },\n                    animationEnded: !1,\n                    isTouchDevice: \"ontouchstart\" in window || navigator.msMaxTouchPoints,\n                    isDirty: !1,\n                    isExecCalled: !1,\n                    initialConfig: null,\n                    initialSeries: [],\n                    lastXAxis: [],\n                    lastYAxis: [],\n                    columnSeries: null,\n                    labels: [],\n                    timescaleLabels: [],\n                    noLabelsProvided: !1,\n                    allSeriesCollapsed: !1,\n                    collapsedSeries: [],\n                    collapsedSeriesIndices: [],\n                    ancillaryCollapsedSeries: [],\n                    ancillaryCollapsedSeriesIndices: [],\n                    risingSeries: [],\n                    dataFormatXNumeric: !1,\n                    capturedSeriesIndex: -1,\n                    capturedDataPointIndex: -1,\n                    selectedDataPoints: [],\n                    goldenPadding: 35,\n                    invalidLogScale: !1,\n                    ignoreYAxisIndexes: [],\n                    yAxisSameScaleIndices: [],\n                    maxValsInArrayIndex: 0,\n                    radialSize: 0,\n                    selection: void 0,\n                    zoomEnabled: \"zoom\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,\n                    panEnabled: \"pan\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,\n                    selectionEnabled: \"selection\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,\n                    yaxis: null,\n                    mousedown: !1,\n                    lastClientPosition: {},\n                    visibleXRange: void 0,\n                    yValueDecimal: 0,\n                    total: 0,\n                    SVGNS: \"http://www.w3.org/2000/svg\",\n                    svgWidth: 0,\n                    svgHeight: 0,\n                    noData: !1,\n                    locale: {},\n                    dom: {},\n                    memory: {\n                        methodsToExec: []\n                    },\n                    shouldAnimate: !0,\n                    skipLastTimelinelabel: !1,\n                    skipFirstTimelinelabel: !1,\n                    delayedElements: [],\n                    axisCharts: !0,\n                    isDataXYZ: !1,\n                    resized: !1,\n                    resizeTimer: null,\n                    comboCharts: !1,\n                    dataChanged: !1,\n                    previousPaths: [],\n                    allSeriesHasEqualX: !0,\n                    pointsArray: [],\n                    dataLabelsRects: [],\n                    lastDrawnDataLabelsIndexes: [],\n                    hasNullValues: !1,\n                    easing: null,\n                    zoomed: !1,\n                    gridWidth: 0,\n                    gridHeight: 0,\n                    rotateXLabels: !1,\n                    defaultLabels: !1,\n                    xLabelFormatter: void 0,\n                    yLabelFormatters: [],\n                    xaxisTooltipFormatter: void 0,\n                    ttKeyFormatter: void 0,\n                    ttVal: void 0,\n                    ttZFormatter: void 0,\n                    LINE_HEIGHT_RATIO: 1.618,\n                    xAxisLabelsHeight: 0,\n                    xAxisGroupLabelsHeight: 0,\n                    xAxisLabelsWidth: 0,\n                    yAxisLabelsWidth: 0,\n                    scaleX: 1,\n                    scaleY: 1,\n                    translateX: 0,\n                    translateY: 0,\n                    translateYAxisX: [],\n                    yAxisWidths: [],\n                    translateXAxisY: 0,\n                    translateXAxisX: 0,\n                    tooltip: null\n                };\n            }\n        },\n        {\n            key: \"init\",\n            value: function(t) {\n                var e = this.globalVars(t);\n                return this.initGlobalVars(e), e.initialConfig = x.extend({}, t), e.initialSeries = x.clone(t.series), e.lastXAxis = x.clone(e.initialConfig.xaxis), e.lastYAxis = x.clone(e.initialConfig.yaxis), e;\n            }\n        }\n    ]), t;\n}(), F = function() {\n    function t(e) {\n        a(this, t), this.opts = e;\n    }\n    return r(t, [\n        {\n            key: \"init\",\n            value: function() {\n                var t = new E(this.opts).init({\n                    responsiveOverride: !1\n                });\n                return {\n                    config: t,\n                    globals: (new Y).init(t)\n                };\n            }\n        }\n    ]), t;\n}(), R = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.opts = null, this.seriesIndex = 0;\n    }\n    return r(t, [\n        {\n            key: \"clippedImgArea\",\n            value: function(t) {\n                var e = this.w, i = e.config, a = parseInt(e.globals.gridWidth, 10), s = parseInt(e.globals.gridHeight, 10), r = a > s ? a : s, o = t.image, n = 0, l = 0;\n                void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (n = i.fill.image.width + 1, l = i.fill.image.height) : (n = r + 1, l = r) : (n = t.width, l = t.height);\n                var h = document.createElementNS(e.globals.SVGNS, \"pattern\");\n                m.setAttrs(h, {\n                    id: t.patternID,\n                    patternUnits: t.patternUnits ? t.patternUnits : \"userSpaceOnUse\",\n                    width: n + \"px\",\n                    height: l + \"px\"\n                });\n                var c = document.createElementNS(e.globals.SVGNS, \"image\");\n                h.appendChild(c), c.setAttributeNS(window.SVG.xlink, \"href\", o), m.setAttrs(c, {\n                    x: 0,\n                    y: 0,\n                    preserveAspectRatio: \"none\",\n                    width: n + \"px\",\n                    height: l + \"px\"\n                }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);\n            }\n        },\n        {\n            key: \"getSeriesIndex\",\n            value: function(t) {\n                var e = this.w, i = e.config.chart.type;\n                return (\"bar\" === i || \"rangeBar\" === i) && e.config.plotOptions.bar.distributed || \"heatmap\" === i || \"treemap\" === i ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;\n            }\n        },\n        {\n            key: \"fillPath\",\n            value: function(t) {\n                var e = this.w;\n                this.opts = t;\n                var i, a, s, r = this.w.config;\n                this.seriesIndex = this.getSeriesIndex(t);\n                var o = this.getFillColors()[this.seriesIndex];\n                void 0 !== e.globals.seriesColors[this.seriesIndex] && (o = e.globals.seriesColors[this.seriesIndex]), \"function\" == typeof o && (o = o({\n                    seriesIndex: this.seriesIndex,\n                    dataPointIndex: t.dataPointIndex,\n                    value: t.value,\n                    w: e\n                }));\n                var n = t.fillType ? t.fillType : this.getFillType(this.seriesIndex), l = Array.isArray(r.fill.opacity) ? r.fill.opacity[this.seriesIndex] : r.fill.opacity;\n                t.color && (o = t.color), o || (o = \"#fff\", console.warn(\"undefined color - ApexCharts\"));\n                var h = o;\n                if (-1 === o.indexOf(\"rgb\") ? o.length < 9 && (h = x.hexToRgba(o, l)) : o.indexOf(\"rgba\") > -1 && (l = x.getOpacityFromRGBA(o)), t.opacity && (l = t.opacity), \"pattern\" === n && (a = this.handlePatternFill({\n                    fillConfig: t.fillConfig,\n                    patternFill: a,\n                    fillColor: o,\n                    fillOpacity: l,\n                    defaultColor: h\n                })), \"gradient\" === n && (s = this.handleGradientFill({\n                    fillConfig: t.fillConfig,\n                    fillColor: o,\n                    fillOpacity: l,\n                    i: this.seriesIndex\n                })), \"image\" === n) {\n                    var c = r.fill.image.src, d = t.patternID ? t.patternID : \"\";\n                    this.clippedImgArea({\n                        opacity: l,\n                        image: Array.isArray(c) ? t.seriesNumber < c.length ? c[t.seriesNumber] : c[0] : c,\n                        width: t.width ? t.width : void 0,\n                        height: t.height ? t.height : void 0,\n                        patternUnits: t.patternUnits,\n                        patternID: \"pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d)\n                    }), i = \"url(#pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d, \")\");\n                } else i = \"gradient\" === n ? s : \"pattern\" === n ? a : h;\n                return t.solid && (i = h), i;\n            }\n        },\n        {\n            key: \"getFillType\",\n            value: function(t) {\n                var e = this.w;\n                return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;\n            }\n        },\n        {\n            key: \"getFillColors\",\n            value: function() {\n                var t = this.w, e = t.config, i = this.opts, a = [];\n                return t.globals.comboCharts ? \"line\" === t.config.series[this.seriesIndex].type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors) : \"line\" === e.chart.type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors), void 0 !== i.fillColors && (a = [], Array.isArray(i.fillColors) ? a = i.fillColors.slice() : a.push(i.fillColors)), a;\n            }\n        },\n        {\n            key: \"handlePatternFill\",\n            value: function(t) {\n                var e = t.fillConfig, i = t.patternFill, a = t.fillColor, s = t.fillOpacity, r = t.defaultColor, o = this.w.config.fill;\n                e && (o = e);\n                var n = this.opts, l = new m(this.ctx), h = Array.isArray(o.pattern.strokeWidth) ? o.pattern.strokeWidth[this.seriesIndex] : o.pattern.strokeWidth, c = a;\n                Array.isArray(o.pattern.style) ? i = void 0 !== o.pattern.style[n.seriesNumber] ? l.drawPattern(o.pattern.style[n.seriesNumber], o.pattern.width, o.pattern.height, c, h, s) : r : i = l.drawPattern(o.pattern.style, o.pattern.width, o.pattern.height, c, h, s);\n                return i;\n            }\n        },\n        {\n            key: \"handleGradientFill\",\n            value: function(t) {\n                var i = t.fillColor, a = t.fillOpacity, s = t.fillConfig, r = t.i, o = this.w.config.fill;\n                s && (o = e(e({}, o), s));\n                var n, l = this.opts, h = new m(this.ctx), c = new x, d = o.gradient.type, g = i, u = void 0 === o.gradient.opacityFrom ? a : Array.isArray(o.gradient.opacityFrom) ? o.gradient.opacityFrom[r] : o.gradient.opacityFrom;\n                g.indexOf(\"rgba\") > -1 && (u = x.getOpacityFromRGBA(g));\n                var p = void 0 === o.gradient.opacityTo ? a : Array.isArray(o.gradient.opacityTo) ? o.gradient.opacityTo[r] : o.gradient.opacityTo;\n                if (void 0 === o.gradient.gradientToColors || 0 === o.gradient.gradientToColors.length) n = \"dark\" === o.gradient.shade ? c.shadeColor(-1 * parseFloat(o.gradient.shadeIntensity), i.indexOf(\"rgb\") > -1 ? x.rgb2hex(i) : i) : c.shadeColor(parseFloat(o.gradient.shadeIntensity), i.indexOf(\"rgb\") > -1 ? x.rgb2hex(i) : i);\n                else if (o.gradient.gradientToColors[l.seriesNumber]) {\n                    var f = o.gradient.gradientToColors[l.seriesNumber];\n                    n = f, f.indexOf(\"rgba\") > -1 && (p = x.getOpacityFromRGBA(f));\n                } else n = i;\n                if (o.gradient.gradientFrom && (g = o.gradient.gradientFrom), o.gradient.gradientTo && (n = o.gradient.gradientTo), o.gradient.inverseColors) {\n                    var b = g;\n                    g = n, n = b;\n                }\n                return g.indexOf(\"rgb\") > -1 && (g = x.rgb2hex(g)), n.indexOf(\"rgb\") > -1 && (n = x.rgb2hex(n)), h.drawGradient(d, g, n, u, p, l.size, o.gradient.stops, o.gradient.colorStops, r);\n            }\n        }\n    ]), t;\n}(), H = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"setGlobalMarkerSize\",\n            value: function() {\n                var t = this.w;\n                if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [\n                    t.config.markers.size\n                ], t.globals.markers.size.length > 0) {\n                    if (t.globals.markers.size.length < t.globals.series.length + 1) for(var e = 0; e <= t.globals.series.length; e++)void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);\n                } else t.globals.markers.size = t.config.series.map(function(e) {\n                    return t.config.markers.size;\n                });\n            }\n        },\n        {\n            key: \"plotChartMarkers\",\n            value: function(t, e, i, a) {\n                var s, r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o = this.w, n = e, l = t, h = null, c = new m(this.ctx), d = o.config.markers.discrete && o.config.markers.discrete.length;\n                if ((o.globals.markers.size[e] > 0 || r || d) && (h = c.group({\n                    class: r || d ? \"\" : \"apexcharts-series-markers\"\n                })).attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(o.globals.cuid, \")\")), Array.isArray(l.x)) for(var g = 0; g < l.x.length; g++){\n                    var u = i;\n                    1 === i && 0 === g && (u = 0), 1 === i && 1 === g && (u = 1);\n                    var p = \"apexcharts-marker\";\n                    if (\"line\" !== o.config.chart.type && \"area\" !== o.config.chart.type || o.globals.comboCharts || o.config.tooltip.intersect || (p += \" no-pointer-events\"), (Array.isArray(o.config.markers.size) ? o.globals.markers.size[e] > 0 : o.config.markers.size > 0) || r || d) {\n                        x.isNumber(l.y[g]) ? p += \" w\".concat(x.randomId()) : p = \"apexcharts-nullpoint\";\n                        var f = this.getMarkerConfig({\n                            cssClass: p,\n                            seriesIndex: e,\n                            dataPointIndex: u\n                        });\n                        o.config.series[n].data[u] && (o.config.series[n].data[u].fillColor && (f.pointFillColor = o.config.series[n].data[u].fillColor), o.config.series[n].data[u].strokeColor && (f.pointStrokeColor = o.config.series[n].data[u].strokeColor)), a && (f.pSize = a), (l.x[g] < 0 || l.x[g] > o.globals.gridWidth || l.y[g] < -o.globals.markers.largestSize || l.y[g] > o.globals.gridHeight + o.globals.markers.largestSize) && (f.pSize = 0), (s = c.drawMarker(l.x[g], l.y[g], f)).attr(\"rel\", u), s.attr(\"j\", u), s.attr(\"index\", e), s.node.setAttribute(\"default-marker-size\", f.pSize), new v(this.ctx).setSelectionFilter(s, e, u), this.addEvents(s), h && h.add(s);\n                    } else void 0 === o.globals.pointsArray[e] && (o.globals.pointsArray[e] = []), o.globals.pointsArray[e].push([\n                        l.x[g],\n                        l.y[g]\n                    ]);\n                }\n                return h;\n            }\n        },\n        {\n            key: \"getMarkerConfig\",\n            value: function(t) {\n                var e = t.cssClass, i = t.seriesIndex, a = t.dataPointIndex, s = void 0 === a ? null : a, r = t.finishRadius, o = void 0 === r ? null : r, n = this.w, l = this.getMarkerStyle(i), h = n.globals.markers.size[i], c = n.config.markers;\n                return null !== s && c.discrete.length && c.discrete.map(function(t) {\n                    t.seriesIndex === i && t.dataPointIndex === s && (l.pointStrokeColor = t.strokeColor, l.pointFillColor = t.fillColor, h = t.size, l.pointShape = t.shape);\n                }), {\n                    pSize: null === o ? h : o,\n                    pRadius: c.radius,\n                    width: Array.isArray(c.width) ? c.width[i] : c.width,\n                    height: Array.isArray(c.height) ? c.height[i] : c.height,\n                    pointStrokeWidth: Array.isArray(c.strokeWidth) ? c.strokeWidth[i] : c.strokeWidth,\n                    pointStrokeColor: l.pointStrokeColor,\n                    pointFillColor: l.pointFillColor,\n                    shape: l.pointShape || (Array.isArray(c.shape) ? c.shape[i] : c.shape),\n                    class: e,\n                    pointStrokeOpacity: Array.isArray(c.strokeOpacity) ? c.strokeOpacity[i] : c.strokeOpacity,\n                    pointStrokeDashArray: Array.isArray(c.strokeDashArray) ? c.strokeDashArray[i] : c.strokeDashArray,\n                    pointFillOpacity: Array.isArray(c.fillOpacity) ? c.fillOpacity[i] : c.fillOpacity,\n                    seriesIndex: i\n                };\n            }\n        },\n        {\n            key: \"addEvents\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx);\n                t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener(\"click\", e.config.markers.onClick), t.node.addEventListener(\"dblclick\", e.config.markers.onDblClick), t.node.addEventListener(\"touchstart\", i.pathMouseDown.bind(this.ctx, t), {\n                    passive: !0\n                });\n            }\n        },\n        {\n            key: \"getMarkerStyle\",\n            value: function(t) {\n                var e = this.w, i = e.globals.markers.colors, a = e.config.markers.strokeColor || e.config.markers.strokeColors;\n                return {\n                    pointStrokeColor: Array.isArray(a) ? a[t] : a,\n                    pointFillColor: Array.isArray(i) ? i[t] : i\n                };\n            }\n        }\n    ]), t;\n}(), D = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t, e, i) {\n                var a = this.w, s = new m(this.ctx), r = i.realIndex, o = i.pointsPos, n = i.zRatio, l = i.elParent, h = s.group({\n                    class: \"apexcharts-series-markers apexcharts-series-\".concat(a.config.chart.type)\n                });\n                if (h.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(a.globals.cuid, \")\")), Array.isArray(o.x)) for(var c = 0; c < o.x.length; c++){\n                    var d = e + 1, g = !0;\n                    0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);\n                    var u = 0, p = a.globals.markers.size[r];\n                    if (n !== 1 / 0) {\n                        var f = a.config.plotOptions.bubble;\n                        p = a.globals.seriesZ[r][d], f.zScaling && (p /= n), f.minBubbleRadius && p < f.minBubbleRadius && (p = f.minBubbleRadius), f.maxBubbleRadius && p > f.maxBubbleRadius && (p = f.maxBubbleRadius);\n                    }\n                    a.config.chart.animations.enabled || (u = p);\n                    var x = o.x[c], b = o.y[c];\n                    if (u = u || 0, null !== b && void 0 !== a.globals.series[r][d] || (g = !1), g) {\n                        var v = this.drawPoint(x, b, u, p, r, d, e);\n                        h.add(v);\n                    }\n                    l.add(h);\n                }\n            }\n        },\n        {\n            key: \"drawPoint\",\n            value: function(t, e, i, a, s, r, o) {\n                var n = this.w, l = s, h = new b(this.ctx), c = new v(this.ctx), d = new R(this.ctx), g = new H(this.ctx), u = new m(this.ctx), p = g.getMarkerConfig({\n                    cssClass: \"apexcharts-marker\",\n                    seriesIndex: l,\n                    dataPointIndex: r,\n                    finishRadius: \"bubble\" === n.config.chart.type || n.globals.comboCharts && n.config.series[s] && \"bubble\" === n.config.series[s].type ? a : null\n                });\n                a = p.pSize;\n                var f, x = d.fillPath({\n                    seriesNumber: s,\n                    dataPointIndex: r,\n                    color: p.pointFillColor,\n                    patternUnits: \"objectBoundingBox\",\n                    value: n.globals.series[s][o]\n                });\n                if (\"circle\" === p.shape ? f = u.drawCircle(i) : \"square\" !== p.shape && \"rect\" !== p.shape || (f = u.drawRect(0, 0, p.width - p.pointStrokeWidth / 2, p.height - p.pointStrokeWidth / 2, p.pRadius)), n.config.series[l].data[r] && n.config.series[l].data[r].fillColor && (x = n.config.series[l].data[r].fillColor), f.attr({\n                    x: t - p.width / 2 - p.pointStrokeWidth / 2,\n                    y: e - p.height / 2 - p.pointStrokeWidth / 2,\n                    cx: t,\n                    cy: e,\n                    fill: x,\n                    \"fill-opacity\": p.pointFillOpacity,\n                    stroke: p.pointStrokeColor,\n                    r: a,\n                    \"stroke-width\": p.pointStrokeWidth,\n                    \"stroke-dasharray\": p.pointStrokeDashArray,\n                    \"stroke-opacity\": p.pointStrokeOpacity\n                }), n.config.chart.dropShadow.enabled) {\n                    var y = n.config.chart.dropShadow;\n                    c.dropShadow(f, y, s);\n                }\n                if (!this.initialAnim || n.globals.dataChanged || n.globals.resized) n.globals.animationEnded = !0;\n                else {\n                    var w = n.config.chart.animations.speed;\n                    h.animateMarker(f, 0, \"circle\" === p.shape ? a : {\n                        width: p.width,\n                        height: p.height\n                    }, w, n.globals.easing, function() {\n                        window.setTimeout(function() {\n                            h.animationCompleted(f);\n                        }, 100);\n                    });\n                }\n                if (n.globals.dataChanged && \"circle\" === p.shape) if (this.dynamicAnim) {\n                    var k, A, S, C, L = n.config.chart.animations.dynamicAnimation.speed;\n                    null != (C = n.globals.previousPaths[s] && n.globals.previousPaths[s][o]) && (k = C.x, A = C.y, S = void 0 !== C.r ? C.r : a);\n                    for(var P = 0; P < n.globals.collapsedSeries.length; P++)n.globals.collapsedSeries[P].index === s && (L = 1, a = 0);\n                    0 === t && 0 === e && (a = 0), h.animateCircle(f, {\n                        cx: k,\n                        cy: A,\n                        r: S\n                    }, {\n                        cx: t,\n                        cy: e,\n                        r: a\n                    }, L, n.globals.easing);\n                } else f.attr({\n                    r: a\n                });\n                return f.attr({\n                    rel: r,\n                    j: r,\n                    index: s,\n                    \"default-marker-size\": a\n                }), c.setSelectionFilter(f, s, r), g.addEvents(f), f.node.classList.add(\"apexcharts-marker\"), f;\n            }\n        },\n        {\n            key: \"centerTextInBubble\",\n            value: function(t) {\n                var e = this.w;\n                return {\n                    y: t += parseInt(e.config.dataLabels.style.fontSize, 10) / 4\n                };\n            }\n        }\n    ]), t;\n}(), O = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"dataLabelsCorrection\",\n            value: function(t, e, i, a, s, r, o) {\n                var n = this.w, l = !1, h = new m(this.ctx).getTextRects(i, o), c = h.width, d = h.height;\n                e < 0 && (e = 0), e > n.globals.gridHeight + d && (e = n.globals.gridHeight + d / 2), void 0 === n.globals.dataLabelsRects[a] && (n.globals.dataLabelsRects[a] = []), n.globals.dataLabelsRects[a].push({\n                    x: t,\n                    y: e,\n                    width: c,\n                    height: d\n                });\n                var g = n.globals.dataLabelsRects[a].length - 2, u = void 0 !== n.globals.lastDrawnDataLabelsIndexes[a] ? n.globals.lastDrawnDataLabelsIndexes[a][n.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0;\n                if (void 0 !== n.globals.dataLabelsRects[a][g]) {\n                    var p = n.globals.dataLabelsRects[a][u];\n                    (t > p.x + p.width || e > p.y + p.height || e + d < p.y || t + c < p.x) && (l = !0);\n                }\n                return (0 === s || r) && (l = !0), {\n                    x: t,\n                    y: e,\n                    textRects: h,\n                    drawnextLabel: l\n                };\n            }\n        },\n        {\n            key: \"drawDataLabel\",\n            value: function(t) {\n                var e = this, i = t.type, a = t.pos, s = t.i, r = t.j, o = t.isRangeStart, n = t.strokeWidth, l = void 0 === n ? 2 : n, h = this.w, c = new m(this.ctx), d = h.config.dataLabels, g = 0, u = 0, p = r, f = null;\n                if (!d.enabled || !Array.isArray(a.x)) return f;\n                f = c.group({\n                    class: \"apexcharts-data-labels\"\n                });\n                for(var x = 0; x < a.x.length; x++)if (g = a.x[x] + d.offsetX, u = a.y[x] + d.offsetY + l, !isNaN(g)) {\n                    1 === r && 0 === x && (p = 0), 1 === r && 1 === x && (p = 1);\n                    var b = h.globals.series[s][p];\n                    \"rangeArea\" === i && (b = o ? h.globals.seriesRangeStart[s][p] : h.globals.seriesRangeEnd[s][p]);\n                    var v = \"\", y = function(t) {\n                        return h.config.dataLabels.formatter(t, {\n                            ctx: e.ctx,\n                            seriesIndex: s,\n                            dataPointIndex: p,\n                            w: h\n                        });\n                    };\n                    if (\"bubble\" === h.config.chart.type) v = y(b = h.globals.seriesZ[s][p]), u = a.y[x], u = new D(this.ctx).centerTextInBubble(u, s, p).y;\n                    else void 0 !== b && (v = y(b));\n                    this.plotDataLabelsText({\n                        x: g,\n                        y: u,\n                        text: v,\n                        i: s,\n                        j: p,\n                        parent: f,\n                        offsetCorrection: !0,\n                        dataLabelsConfig: h.config.dataLabels\n                    });\n                }\n                return f;\n            }\n        },\n        {\n            key: \"plotDataLabelsText\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = t.x, s = t.y, r = t.i, o = t.j, n = t.text, l = t.textAnchor, h = t.fontSize, c = t.parent, d = t.dataLabelsConfig, g = t.color, u = t.alwaysDrawDataLabel, p = t.offsetCorrection;\n                if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(r) < 0)) {\n                    var f = {\n                        x: a,\n                        y: s,\n                        drawnextLabel: !0,\n                        textRects: null\n                    };\n                    p && (f = this.dataLabelsCorrection(a, s, n, r, o, u, parseInt(d.style.fontSize, 10))), e.globals.zoomed || (a = f.x, s = f.y), f.textRects && (a < -20 - f.textRects.width || a > e.globals.gridWidth + f.textRects.width + 30) && (n = \"\");\n                    var x = e.globals.dataLabels.style.colors[r];\n                    ((\"bar\" === e.config.chart.type || \"rangeBar\" === e.config.chart.type) && e.config.plotOptions.bar.distributed || e.config.dataLabels.distributed) && (x = e.globals.dataLabels.style.colors[o]), \"function\" == typeof x && (x = x({\n                        series: e.globals.series,\n                        seriesIndex: r,\n                        dataPointIndex: o,\n                        w: e\n                    })), g && (x = g);\n                    var b = d.offsetX, y = d.offsetY;\n                    if (\"bar\" !== e.config.chart.type && \"rangeBar\" !== e.config.chart.type || (b = 0, y = 0), f.drawnextLabel) {\n                        var w = i.drawText({\n                            width: 100,\n                            height: parseInt(d.style.fontSize, 10),\n                            x: a + b,\n                            y: s + y,\n                            foreColor: x,\n                            textAnchor: l || d.textAnchor,\n                            text: n,\n                            fontSize: h || d.style.fontSize,\n                            fontFamily: d.style.fontFamily,\n                            fontWeight: d.style.fontWeight || \"normal\"\n                        });\n                        if (w.attr({\n                            class: \"apexcharts-datalabel\",\n                            cx: a,\n                            cy: s\n                        }), d.dropShadow.enabled) {\n                            var k = d.dropShadow;\n                            new v(this.ctx).dropShadow(w, k);\n                        }\n                        c.add(w), void 0 === e.globals.lastDrawnDataLabelsIndexes[r] && (e.globals.lastDrawnDataLabelsIndexes[r] = []), e.globals.lastDrawnDataLabelsIndexes[r].push(o);\n                    }\n                }\n            }\n        },\n        {\n            key: \"addBackgroundToDataLabel\",\n            value: function(t, e) {\n                var i = this.w, a = i.config.dataLabels.background, s = a.padding, r = a.padding / 2, o = e.width, n = e.height, l = new m(this.ctx).drawRect(e.x - s, e.y - r / 2, o + 2 * s, n + r, a.borderRadius, \"transparent\" === i.config.chart.background ? \"#fff\" : i.config.chart.background, a.opacity, a.borderWidth, a.borderColor);\n                a.dropShadow.enabled && new v(this.ctx).dropShadow(l, a.dropShadow);\n                return l;\n            }\n        },\n        {\n            key: \"dataLabelsBackground\",\n            value: function() {\n                var t = this.w;\n                if (\"bubble\" !== t.config.chart.type) for(var e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels text\"), i = 0; i < e.length; i++){\n                    var a = e[i], s = a.getBBox(), r = null;\n                    if (s.width && s.height && (r = this.addBackgroundToDataLabel(a, s)), r) {\n                        a.parentNode.insertBefore(r.node, a);\n                        var o = a.getAttribute(\"fill\");\n                        t.config.chart.animations.enabled && !t.globals.resized && !t.globals.dataChanged ? r.animate().attr({\n                            fill: o\n                        }) : r.attr({\n                            fill: o\n                        }), a.setAttribute(\"fill\", t.config.dataLabels.background.foreColor);\n                    }\n                }\n            }\n        },\n        {\n            key: \"bringForward\",\n            value: function() {\n                for(var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels\"), i = t.globals.dom.baseEl.querySelector(\".apexcharts-plot-series:last-child\"), a = 0; a < e.length; a++)i && i.insertBefore(e[a], i.nextSibling);\n            }\n        }\n    ]), t;\n}(), N = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.legendInactiveClass = \"legend-mouseover-inactive\";\n    }\n    return r(t, [\n        {\n            key: \"getAllSeriesEls\",\n            value: function() {\n                return this.w.globals.dom.baseEl.getElementsByClassName(\"apexcharts-series\");\n            }\n        },\n        {\n            key: \"getSeriesByName\",\n            value: function(t) {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner .apexcharts-series[seriesName='\".concat(x.escapeString(t), \"']\"));\n            }\n        },\n        {\n            key: \"isSeriesHidden\",\n            value: function(t) {\n                var e = this.getSeriesByName(t), i = parseInt(e.getAttribute(\"data:realIndex\"), 10);\n                return {\n                    isHidden: e.classList.contains(\"apexcharts-series-collapsed\"),\n                    realIndex: i\n                };\n            }\n        },\n        {\n            key: \"addCollapsedClassToSeries\",\n            value: function(t, e) {\n                var i = this.w;\n                function a(i) {\n                    for(var a = 0; a < i.length; a++)i[a].index === e && t.node.classList.add(\"apexcharts-series-collapsed\");\n                }\n                a(i.globals.collapsedSeries), a(i.globals.ancillaryCollapsedSeries);\n            }\n        },\n        {\n            key: \"toggleSeries\",\n            value: function(t) {\n                var e = this.isSeriesHidden(t);\n                return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden;\n            }\n        },\n        {\n            key: \"showSeries\",\n            value: function(t) {\n                var e = this.isSeriesHidden(t);\n                e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0);\n            }\n        },\n        {\n            key: \"hideSeries\",\n            value: function(t) {\n                var e = this.isSeriesHidden(t);\n                e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1);\n            }\n        },\n        {\n            key: \"resetSeries\",\n            value: function() {\n                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a = this.w, s = x.clone(a.globals.initialSeries);\n                a.globals.previousPaths = [], i ? (a.globals.collapsedSeries = [], a.globals.ancillaryCollapsedSeries = [], a.globals.collapsedSeriesIndices = [], a.globals.ancillaryCollapsedSeriesIndices = []) : s = this.emptyCollapsedSeries(s), a.config.series = s, t && (e && (a.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled));\n            }\n        },\n        {\n            key: \"emptyCollapsedSeries\",\n            value: function(t) {\n                for(var e = this.w, i = 0; i < t.length; i++)e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i].data = []);\n                return t;\n            }\n        },\n        {\n            key: \"toggleSeriesOnHover\",\n            value: function(t, e) {\n                var i = this.w;\n                e || (e = t.target);\n                var a = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels\");\n                if (\"mousemove\" === t.type) {\n                    var s = parseInt(e.getAttribute(\"rel\"), 10) - 1, r = null, o = null;\n                    i.globals.axisCharts || \"radialBar\" === i.config.chart.type ? i.globals.axisCharts ? (r = i.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(s, \"']\")), o = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels[data\\\\:realIndex='\".concat(s, \"']\"))) : r = i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(s + 1, \"']\")) : r = i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(s + 1, \"'] path\"));\n                    for(var n = 0; n < a.length; n++)a[n].classList.add(this.legendInactiveClass);\n                    null !== r && (i.globals.axisCharts || r.parentNode.classList.remove(this.legendInactiveClass), r.classList.remove(this.legendInactiveClass), null !== o && o.classList.remove(this.legendInactiveClass));\n                } else if (\"mouseout\" === t.type) for(var l = 0; l < a.length; l++)a[l].classList.remove(this.legendInactiveClass);\n            }\n        },\n        {\n            key: \"highlightRangeInSeries\",\n            value: function(t, e) {\n                var i = this, a = this.w, s = a.globals.dom.baseEl.getElementsByClassName(\"apexcharts-heatmap-rect\"), r = function(t) {\n                    for(var e = 0; e < s.length; e++)s[e].classList[t](i.legendInactiveClass);\n                };\n                if (\"mousemove\" === t.type) {\n                    var o = parseInt(e.getAttribute(\"rel\"), 10) - 1;\n                    r(\"add\"), function(t) {\n                        for(var e = 0; e < s.length; e++){\n                            var a = parseInt(s[e].getAttribute(\"val\"), 10);\n                            a >= t.from && a <= t.to && s[e].classList.remove(i.legendInactiveClass);\n                        }\n                    }(a.config.plotOptions.heatmap.colorScale.ranges[o]);\n                } else \"mouseout\" === t.type && r(\"remove\");\n            }\n        },\n        {\n            key: \"getActiveConfigSeriesIndex\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"asc\", e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i = this.w, a = 0;\n                if (i.config.series.length > 1) {\n                    for(var s = i.config.series.map(function(t, a) {\n                        return t.data && t.data.length > 0 && -1 === i.globals.collapsedSeriesIndices.indexOf(a) && (!i.globals.comboCharts || 0 === e.length || e.length && e.indexOf(i.config.series[a].type) > -1) ? a : -1;\n                    }), r = \"asc\" === t ? 0 : s.length - 1; \"asc\" === t ? r < s.length : r >= 0; \"asc\" === t ? r++ : r--)if (-1 !== s[r]) {\n                        a = s[r];\n                        break;\n                    }\n                }\n                return a;\n            }\n        },\n        {\n            key: \"getBarSeriesIndices\",\n            value: function() {\n                return this.w.globals.comboCharts ? this.w.config.series.map(function(t, e) {\n                    return \"bar\" === t.type || \"column\" === t.type ? e : -1;\n                }).filter(function(t) {\n                    return -1 !== t;\n                }) : this.w.config.series.map(function(t, e) {\n                    return e;\n                });\n            }\n        },\n        {\n            key: \"getPreviousPaths\",\n            value: function() {\n                var t = this.w;\n                function e(e, i, a) {\n                    for(var s = e[i].childNodes, r = {\n                        type: a,\n                        paths: [],\n                        realIndex: e[i].getAttribute(\"data:realIndex\")\n                    }, o = 0; o < s.length; o++)if (s[o].hasAttribute(\"pathTo\")) {\n                        var n = s[o].getAttribute(\"pathTo\");\n                        r.paths.push({\n                            d: n\n                        });\n                    }\n                    t.globals.previousPaths.push(r);\n                }\n                t.globals.previousPaths = [];\n                [\n                    \"line\",\n                    \"area\",\n                    \"bar\",\n                    \"rangebar\",\n                    \"rangeArea\",\n                    \"candlestick\",\n                    \"radar\"\n                ].forEach(function(i) {\n                    for(var a, s = (a = i, t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(a, \"-series .apexcharts-series\"))), r = 0; r < s.length; r++)e(s, r, i);\n                }), this.handlePrevBubbleScatterPaths(\"bubble\"), this.handlePrevBubbleScatterPaths(\"scatter\");\n                var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series\"));\n                if (i.length > 0) for(var a = function(e) {\n                    for(var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] rect\")), a = [], s = function(t) {\n                        var e = function(e) {\n                            return i[t].getAttribute(e);\n                        }, s = {\n                            x: parseFloat(e(\"x\")),\n                            y: parseFloat(e(\"y\")),\n                            width: parseFloat(e(\"width\")),\n                            height: parseFloat(e(\"height\"))\n                        };\n                        a.push({\n                            rect: s,\n                            color: i[t].getAttribute(\"color\")\n                        });\n                    }, r = 0; r < i.length; r++)s(r);\n                    t.globals.previousPaths.push(a);\n                }, s = 0; s < i.length; s++)a(s);\n                t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);\n            }\n        },\n        {\n            key: \"handlePrevBubbleScatterPaths\",\n            value: function(t) {\n                var e = this.w, i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t, \"-series .apexcharts-series\"));\n                if (i.length > 0) for(var a = 0; a < i.length; a++){\n                    for(var s = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t, \"-series .apexcharts-series[data\\\\:realIndex='\").concat(a, \"'] circle\")), r = [], o = 0; o < s.length; o++)r.push({\n                        x: s[o].getAttribute(\"cx\"),\n                        y: s[o].getAttribute(\"cy\"),\n                        r: s[o].getAttribute(\"r\")\n                    });\n                    e.globals.previousPaths.push(r);\n                }\n            }\n        },\n        {\n            key: \"clearPreviousPaths\",\n            value: function() {\n                var t = this.w;\n                t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1;\n            }\n        },\n        {\n            key: \"handleNoData\",\n            value: function() {\n                var t = this.w, e = t.config.noData, i = new m(this.ctx), a = t.globals.svgWidth / 2, s = t.globals.svgHeight / 2, r = \"middle\";\n                if (t.globals.noData = !0, t.globals.animationEnded = !0, \"left\" === e.align ? (a = 10, r = \"start\") : \"right\" === e.align && (a = t.globals.svgWidth - 10, r = \"end\"), \"top\" === e.verticalAlign ? s = 50 : \"bottom\" === e.verticalAlign && (s = t.globals.svgHeight - 50), a += e.offsetX, s = s + parseInt(e.style.fontSize, 10) + 2 + e.offsetY, void 0 !== e.text && \"\" !== e.text) {\n                    var o = i.drawText({\n                        x: a,\n                        y: s,\n                        text: e.text,\n                        textAnchor: r,\n                        fontSize: e.style.fontSize,\n                        fontFamily: e.style.fontFamily,\n                        foreColor: e.style.color,\n                        opacity: 1,\n                        class: \"apexcharts-text-nodata\"\n                    });\n                    t.globals.dom.Paper.add(o);\n                }\n            }\n        },\n        {\n            key: \"setNullSeriesToZeroValues\",\n            value: function(t) {\n                for(var e = this.w, i = 0; i < t.length; i++)if (0 === t[i].length) for(var a = 0; a < t[e.globals.maxValsInArrayIndex].length; a++)t[i].push(0);\n                return t;\n            }\n        },\n        {\n            key: \"hasAllSeriesEqualX\",\n            value: function() {\n                for(var t = !0, e = this.w, i = this.filteredSeriesX(), a = 0; a < i.length - 1; a++)if (i[a][0] !== i[a + 1][0]) {\n                    t = !1;\n                    break;\n                }\n                return e.globals.allSeriesHasEqualX = t, t;\n            }\n        },\n        {\n            key: \"filteredSeriesX\",\n            value: function() {\n                var t = this.w.globals.seriesX.map(function(t) {\n                    return t.length > 0 ? t : [];\n                });\n                return t;\n            }\n        }\n    ]), t;\n}(), W = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);\n    }\n    return r(t, [\n        {\n            key: \"isMultiFormat\",\n            value: function() {\n                return this.isFormatXY() || this.isFormat2DArray();\n            }\n        },\n        {\n            key: \"isFormatXY\",\n            value: function() {\n                var t = this.w.config.series.slice(), e = new N(this.ctx);\n                if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;\n            }\n        },\n        {\n            key: \"isFormat2DArray\",\n            value: function() {\n                var t = this.w.config.series.slice(), e = new N(this.ctx);\n                if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;\n            }\n        },\n        {\n            key: \"handleFormat2DArray\",\n            value: function(t, e) {\n                for(var i = this.w.config, a = this.w.globals, s = \"boxPlot\" === i.chart.type || \"boxPlot\" === i.series[e].type, r = 0; r < t[e].data.length; r++)if (void 0 !== t[e].data[r][1] && (Array.isArray(t[e].data[r][1]) && 4 === t[e].data[r][1].length && !s ? this.twoDSeries.push(x.parseNumber(t[e].data[r][1][3])) : t[e].data[r].length >= 5 ? this.twoDSeries.push(x.parseNumber(t[e].data[r][4])) : this.twoDSeries.push(x.parseNumber(t[e].data[r][1])), a.dataFormatXNumeric = !0), \"datetime\" === i.xaxis.type) {\n                    var o = new Date(t[e].data[r][0]);\n                    o = new Date(o).getTime(), this.twoDSeriesX.push(o);\n                } else this.twoDSeriesX.push(t[e].data[r][0]);\n                for(var n = 0; n < t[e].data.length; n++)void 0 !== t[e].data[n][2] && (this.threeDSeries.push(t[e].data[n][2]), a.isDataXYZ = !0);\n            }\n        },\n        {\n            key: \"handleFormatXY\",\n            value: function(t, e) {\n                var i = this.w.config, a = this.w.globals, s = new I(this.ctx), r = e;\n                a.collapsedSeriesIndices.indexOf(e) > -1 && (r = this.activeSeriesIndex);\n                for(var o = 0; o < t[e].data.length; o++)void 0 !== t[e].data[o].y && (Array.isArray(t[e].data[o].y) ? this.twoDSeries.push(x.parseNumber(t[e].data[o].y[t[e].data[o].y.length - 1])) : this.twoDSeries.push(x.parseNumber(t[e].data[o].y))), void 0 !== t[e].data[o].goals && Array.isArray(t[e].data[o].goals) ? (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(t[e].data[o].goals)) : (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(null));\n                for(var n = 0; n < t[r].data.length; n++){\n                    var l = \"string\" == typeof t[r].data[n].x, h = Array.isArray(t[r].data[n].x), c = !h && !!s.isValidDate(t[r].data[n].x);\n                    if (l || c) if (l || i.xaxis.convertedCatToNumeric) {\n                        var d = a.isBarHorizontal && a.isRangeData;\n                        \"datetime\" !== i.xaxis.type || d ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[n].x), isNaN(t[r].data[n].x) || \"category\" === this.w.config.xaxis.type || \"string\" == typeof t[r].data[n].x || (a.isXNumeric = !0)) : this.twoDSeriesX.push(s.parseDate(t[r].data[n].x));\n                    } else \"datetime\" === i.xaxis.type ? this.twoDSeriesX.push(s.parseDate(t[r].data[n].x.toString())) : (a.dataFormatXNumeric = !0, a.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[r].data[n].x)));\n                    else h ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[n].x)) : (a.isXNumeric = !0, a.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[r].data[n].x));\n                }\n                if (t[e].data[0] && void 0 !== t[e].data[0].z) {\n                    for(var g = 0; g < t[e].data.length; g++)this.threeDSeries.push(t[e].data[g].z);\n                    a.isDataXYZ = !0;\n                }\n            }\n        },\n        {\n            key: \"handleRangeData\",\n            value: function(t, e) {\n                var i = this.w.globals, a = {};\n                return this.isFormat2DArray() ? a = this.handleRangeDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleRangeDataFormat(\"xy\", t, e)), i.seriesRangeStart.push(a.start), i.seriesRangeEnd.push(a.end), i.seriesRange.push(a.rangeUniques), i.seriesRange.forEach(function(t, e) {\n                    t && t.forEach(function(t, e) {\n                        t.y.forEach(function(e, i) {\n                            for(var a = 0; a < t.y.length; a++)if (i !== a) {\n                                var s = e.y1, r = e.y2, o = t.y[a].y1;\n                                s <= t.y[a].y2 && o <= r && (t.overlaps.indexOf(e.rangeName) < 0 && t.overlaps.push(e.rangeName), t.overlaps.indexOf(t.y[a].rangeName) < 0 && t.overlaps.push(t.y[a].rangeName));\n                            }\n                        });\n                    });\n                }), a;\n            }\n        },\n        {\n            key: \"handleCandleStickBoxData\",\n            value: function(t, e) {\n                var i = this.w.globals, a = {};\n                return this.isFormat2DArray() ? a = this.handleCandleStickBoxDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleCandleStickBoxDataFormat(\"xy\", t, e)), i.seriesCandleO[e] = a.o, i.seriesCandleH[e] = a.h, i.seriesCandleM[e] = a.m, i.seriesCandleL[e] = a.l, i.seriesCandleC[e] = a.c, a;\n            }\n        },\n        {\n            key: \"handleRangeDataFormat\",\n            value: function(t, e, i) {\n                var a = [], s = [], r = e[i].data.filter(function(t, e, i) {\n                    return e === i.findIndex(function(e) {\n                        return e.x === t.x;\n                    });\n                }).map(function(t, e) {\n                    return {\n                        x: t.x,\n                        overlaps: [],\n                        y: []\n                    };\n                });\n                if (\"array\" === t) for(var o = 0; o < e[i].data.length; o++)Array.isArray(e[i].data[o]) ? (a.push(e[i].data[o][1][0]), s.push(e[i].data[o][1][1])) : (a.push(e[i].data[o]), s.push(e[i].data[o]));\n                else if (\"xy\" === t) for(var n = function(t) {\n                    var o = Array.isArray(e[i].data[t].y), n = x.randomId(), l = e[i].data[t].x, h = {\n                        y1: o ? e[i].data[t].y[0] : e[i].data[t].y,\n                        y2: o ? e[i].data[t].y[1] : e[i].data[t].y,\n                        rangeName: n\n                    };\n                    e[i].data[t].rangeName = n;\n                    var c = r.findIndex(function(t) {\n                        return t.x === l;\n                    });\n                    r[c].y.push(h), a.push(h.y1), s.push(h.y2);\n                }, l = 0; l < e[i].data.length; l++)n(l);\n                return {\n                    start: a,\n                    end: s,\n                    rangeUniques: r\n                };\n            }\n        },\n        {\n            key: \"handleCandleStickBoxDataFormat\",\n            value: function(t, e, i) {\n                var a = this.w, s = \"boxPlot\" === a.config.chart.type || \"boxPlot\" === a.config.series[i].type, r = [], o = [], n = [], l = [], h = [];\n                if (\"array\" === t) if (s && 6 === e[i].data[0].length || !s && 5 === e[i].data[0].length) for(var c = 0; c < e[i].data.length; c++)r.push(e[i].data[c][1]), o.push(e[i].data[c][2]), s ? (n.push(e[i].data[c][3]), l.push(e[i].data[c][4]), h.push(e[i].data[c][5])) : (l.push(e[i].data[c][3]), h.push(e[i].data[c][4]));\n                else for(var d = 0; d < e[i].data.length; d++)Array.isArray(e[i].data[d][1]) && (r.push(e[i].data[d][1][0]), o.push(e[i].data[d][1][1]), s ? (n.push(e[i].data[d][1][2]), l.push(e[i].data[d][1][3]), h.push(e[i].data[d][1][4])) : (l.push(e[i].data[d][1][2]), h.push(e[i].data[d][1][3])));\n                else if (\"xy\" === t) for(var g = 0; g < e[i].data.length; g++)Array.isArray(e[i].data[g].y) && (r.push(e[i].data[g].y[0]), o.push(e[i].data[g].y[1]), s ? (n.push(e[i].data[g].y[2]), l.push(e[i].data[g].y[3]), h.push(e[i].data[g].y[4])) : (l.push(e[i].data[g].y[2]), h.push(e[i].data[g].y[3])));\n                return {\n                    o: r,\n                    h: o,\n                    m: n,\n                    l: l,\n                    c: h\n                };\n            }\n        },\n        {\n            key: \"parseDataAxisCharts\",\n            value: function(t) {\n                var e, i = this, a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, s = this.w.config, r = this.w.globals, o = new I(a), n = s.labels.length > 0 ? s.labels.slice() : s.xaxis.categories.slice();\n                if (r.isRangeBar = \"rangeBar\" === s.chart.type && r.isBarHorizontal, r.hasXaxisGroups = \"category\" === s.xaxis.type && s.xaxis.group.groups.length > 0, r.hasXaxisGroups && (r.groups = s.xaxis.group.groups), r.hasSeriesGroups = null === (e = t[0]) || void 0 === e ? void 0 : e.group, r.hasSeriesGroups) {\n                    var l = [], h = u(new Set(t.map(function(t) {\n                        return t.group;\n                    })));\n                    t.forEach(function(t, e) {\n                        var i = h.indexOf(t.group);\n                        l[i] || (l[i] = []), l[i].push(t.name);\n                    }), r.seriesGroups = l;\n                }\n                for(var c = function() {\n                    for(var t = 0; t < n.length; t++)if (\"string\" == typeof n[t]) {\n                        if (!o.isValidDate(n[t])) throw new Error(\"You have provided invalid Date format. Please provide a valid JavaScript Date\");\n                        i.twoDSeriesX.push(o.parseDate(n[t]));\n                    } else i.twoDSeriesX.push(n[t]);\n                }, d = 0; d < t.length; d++){\n                    if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[d].data) return void console.error(\"It is a possibility that you may have not included 'data' property in series.\");\n                    if (\"rangeBar\" !== s.chart.type && \"rangeArea\" !== s.chart.type && \"rangeBar\" !== t[d].type && \"rangeArea\" !== t[d].type || (r.isRangeData = !0, \"rangeBar\" !== s.chart.type && \"rangeArea\" !== s.chart.type || this.handleRangeData(t, d)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, d) : this.isFormatXY() && this.handleFormatXY(t, d), \"candlestick\" !== s.chart.type && \"candlestick\" !== t[d].type && \"boxPlot\" !== s.chart.type && \"boxPlot\" !== t[d].type || this.handleCandleStickBoxData(t, d), r.series.push(this.twoDSeries), r.labels.push(this.twoDSeriesX), r.seriesX.push(this.twoDSeriesX), r.seriesGoals = this.seriesGoals, d !== this.activeSeriesIndex || this.fallbackToCategory || (r.isXNumeric = !0);\n                    else {\n                        \"datetime\" === s.xaxis.type ? (r.isXNumeric = !0, c(), r.seriesX.push(this.twoDSeriesX)) : \"numeric\" === s.xaxis.type && (r.isXNumeric = !0, n.length > 0 && (this.twoDSeriesX = n, r.seriesX.push(this.twoDSeriesX))), r.labels.push(this.twoDSeriesX);\n                        var g = t[d].data.map(function(t) {\n                            return x.parseNumber(t);\n                        });\n                        r.series.push(g);\n                    }\n                    r.seriesZ.push(this.threeDSeries), void 0 !== t[d].name ? r.seriesNames.push(t[d].name) : r.seriesNames.push(\"series-\" + parseInt(d + 1, 10)), void 0 !== t[d].color ? r.seriesColors.push(t[d].color) : r.seriesColors.push(void 0);\n                }\n                return this.w;\n            }\n        },\n        {\n            key: \"parseDataNonAxisCharts\",\n            value: function(t) {\n                var e = this.w.globals, i = this.w.config;\n                e.series = t.slice(), e.seriesNames = i.labels.slice();\n                for(var a = 0; a < e.series.length; a++)void 0 === e.seriesNames[a] && e.seriesNames.push(\"series-\" + (a + 1));\n                return this.w;\n            }\n        },\n        {\n            key: \"handleExternalLabelsData\",\n            value: function(t) {\n                var e = this.w.config, i = this.w.globals;\n                if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;\n                else if (e.labels.length > 0) i.labels = e.labels.slice();\n                else if (this.fallbackToCategory) {\n                    if (i.labels = i.labels[0], i.seriesRange.length && (i.seriesRange.map(function(t) {\n                        t.forEach(function(t) {\n                            i.labels.indexOf(t.x) < 0 && t.x && i.labels.push(t.x);\n                        });\n                    }), i.labels = Array.from(new Set(i.labels.map(JSON.stringify)), JSON.parse)), e.xaxis.convertedCatToNumeric) new X(e).convertCatToNumericXaxis(e, this.ctx, i.seriesX[0]), this._generateExternalLabels(t);\n                } else this._generateExternalLabels(t);\n            }\n        },\n        {\n            key: \"_generateExternalLabels\",\n            value: function(t) {\n                var e = this.w.globals, i = this.w.config, a = [];\n                if (e.axisCharts) {\n                    if (e.series.length > 0) if (this.isFormatXY()) for(var s = i.series.map(function(t, e) {\n                        return t.data.filter(function(t, e, i) {\n                            return i.findIndex(function(e) {\n                                return e.x === t.x;\n                            }) === e;\n                        });\n                    }), r = s.reduce(function(t, e, i, a) {\n                        return a[t].length > e.length ? t : i;\n                    }, 0), o = 0; o < s[r].length; o++)a.push(o + 1);\n                    else for(var n = 0; n < e.series[e.maxValsInArrayIndex].length; n++)a.push(n + 1);\n                    e.seriesX = [];\n                    for(var l = 0; l < t.length; l++)e.seriesX.push(a);\n                    this.w.globals.isBarHorizontal || (e.isXNumeric = !0);\n                }\n                if (0 === a.length) {\n                    a = e.axisCharts ? [] : e.series.map(function(t, e) {\n                        return e + 1;\n                    });\n                    for(var h = 0; h < t.length; h++)e.seriesX.push(a);\n                }\n                e.labels = a, i.xaxis.convertedCatToNumeric && (e.categoryLabels = a.map(function(t) {\n                    return i.xaxis.labels.formatter(t);\n                })), e.noLabelsProvided = !0;\n            }\n        },\n        {\n            key: \"parseData\",\n            value: function(t) {\n                var e = this.w, i = e.config, a = e.globals;\n                if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a.axisCharts ? (this.parseDataAxisCharts(t), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t), i.chart.stacked) {\n                    var s = new N(this.ctx);\n                    a.series = s.setNullSeriesToZeroValues(a.series);\n                }\n                this.coreUtils.getSeriesTotals(), a.axisCharts && (a.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals(), a.stackedSeriesTotalsByGroups = this.coreUtils.getStackedSeriesTotalsByGroups()), this.coreUtils.getPercentSeries(), a.dataFormatXNumeric || a.isXNumeric && (\"numeric\" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);\n                for(var r = this.coreUtils.getCategoryLabels(a.labels), o = 0; o < r.length; o++)if (Array.isArray(r[o])) {\n                    a.isMultiLineX = !0;\n                    break;\n                }\n            }\n        },\n        {\n            key: \"excludeCollapsedSeriesInYAxis\",\n            value: function() {\n                var t = this, e = this.w;\n                e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(function(i, a) {\n                    if (t.w.globals.isMultipleYAxis && !e.config.chart.stacked) return i.index;\n                });\n            }\n        }\n    ]), t;\n}(), B = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"getLabel\",\n            value: function(t, e, i, a) {\n                var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"12px\", o = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n = this.w, l = void 0 === t[a] ? \"\" : t[a], h = l, c = n.globals.xLabelFormatter, d = n.config.xaxis.labels.formatter, g = !1, u = new T(this.ctx), p = l;\n                o && (h = u.xLabelFormat(c, l, p, {\n                    i: a,\n                    dateFormatter: new I(this.ctx).formatDate,\n                    w: n\n                }), void 0 !== d && (h = d(l, t[a], {\n                    i: a,\n                    dateFormatter: new I(this.ctx).formatDate,\n                    w: n\n                })));\n                var f, x;\n                e.length > 0 ? (f = e[a].unit, x = null, e.forEach(function(t) {\n                    \"month\" === t.unit ? x = \"year\" : \"day\" === t.unit ? x = \"month\" : \"hour\" === t.unit ? x = \"day\" : \"minute\" === t.unit && (x = \"hour\");\n                }), g = x === f, i = e[a].position, h = e[a].value) : \"datetime\" === n.config.xaxis.type && void 0 === d && (h = \"\"), void 0 === h && (h = \"\"), h = Array.isArray(h) ? h : h.toString();\n                var b = new m(this.ctx), v = {};\n                v = n.globals.rotateXLabels && o ? b.getTextRects(h, parseInt(r, 10), null, \"rotate(\".concat(n.config.xaxis.labels.rotate, \" 0 0)\"), !1) : b.getTextRects(h, parseInt(r, 10));\n                var y = !n.config.xaxis.labels.showDuplicates && this.ctx.timeScale;\n                return !Array.isArray(h) && (0 === h.indexOf(\"NaN\") || 0 === h.toLowerCase().indexOf(\"invalid\") || h.toLowerCase().indexOf(\"infinity\") >= 0 || s.indexOf(h) >= 0 && y) && (h = \"\"), {\n                    x: i,\n                    text: h,\n                    textRect: v,\n                    isBold: g\n                };\n            }\n        },\n        {\n            key: \"checkLabelBasedOnTickamount\",\n            value: function(t, e, i) {\n                var a = this.w, s = a.config.xaxis.tickAmount;\n                return \"dataPoints\" === s && (s = Math.round(a.globals.gridWidth / 120)), s > i || t % Math.round(i / (s + 1)) == 0 || (e.text = \"\"), e;\n            }\n        },\n        {\n            key: \"checkForOverflowingLabels\",\n            value: function(t, e, i, a, s) {\n                var r = this.w;\n                if (0 === t && r.globals.skipFirstTimelinelabel && (e.text = \"\"), t === i - 1 && r.globals.skipLastTimelinelabel && (e.text = \"\"), r.config.xaxis.labels.hideOverlappingLabels && a.length > 0) {\n                    var o = s[s.length - 1];\n                    e.x < o.textRect.width / (r.globals.rotateXLabels ? Math.abs(r.config.xaxis.labels.rotate) / 12 : 1.01) + o.x && (e.text = \"\");\n                }\n                return e;\n            }\n        },\n        {\n            key: \"checkForReversedLabels\",\n            value: function(t, e) {\n                var i = this.w;\n                return i.config.yaxis[t] && i.config.yaxis[t].reversed && e.reverse(), e;\n            }\n        },\n        {\n            key: \"isYAxisHidden\",\n            value: function(t) {\n                var e = this.w, i = new y(this.ctx);\n                return !e.config.yaxis[t].show || !e.config.yaxis[t].showForNullSeries && i.isSeriesNull(t) && -1 === e.globals.collapsedSeriesIndices.indexOf(t);\n            }\n        },\n        {\n            key: \"getYAxisForeColor\",\n            value: function(t, e) {\n                var i = this.w;\n                return Array.isArray(t) && i.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t, i.globals.yAxisScale[e].result.length, !1), t;\n            }\n        },\n        {\n            key: \"drawYAxisTicks\",\n            value: function(t, e, i, a, s, r, o) {\n                var n = this.w, l = new m(this.ctx), h = n.globals.translateY;\n                if (a.show && e > 0) {\n                    !0 === n.config.yaxis[s].opposite && (t += a.width);\n                    for(var c = e; c >= 0; c--){\n                        var d = h + e / 10 + n.config.yaxis[s].labels.offsetY - 1;\n                        n.globals.isBarHorizontal && (d = r * c), \"heatmap\" === n.config.chart.type && (d += r / 2);\n                        var g = l.drawLine(t + i.offsetX - a.width + a.offsetX, d + a.offsetY, t + i.offsetX + a.offsetX, d + a.offsetY, a.color);\n                        o.add(g), h += r;\n                    }\n                }\n            }\n        }\n    ]), t;\n}(), G = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"scaleSvgNode\",\n            value: function(t, e) {\n                var i = parseFloat(t.getAttributeNS(null, \"width\")), a = parseFloat(t.getAttributeNS(null, \"height\"));\n                t.setAttributeNS(null, \"width\", i * e), t.setAttributeNS(null, \"height\", a * e), t.setAttributeNS(null, \"viewBox\", \"0 0 \" + i + \" \" + a);\n            }\n        },\n        {\n            key: \"fixSvgStringForIe11\",\n            value: function(t) {\n                if (!x.isIE11()) return t.replace(/&nbsp;/g, \"&#160;\");\n                var e = 0, i = t.replace(/xmlns=\"http:\\/\\/www.w3.org\\/2000\\/svg\"/g, function(t) {\n                    return 2 === ++e ? 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:svgjs=\"http://svgjs.dev\"' : t;\n                });\n                return i = (i = i.replace(/xmlns:NS\\d+=\"\"/g, \"\")).replace(/NS\\d+:(\\w+:\\w+=\")/g, \"$1\");\n            }\n        },\n        {\n            key: \"getSvgString\",\n            value: function(t) {\n                null == t && (t = 1);\n                var e = this.w.globals.dom.Paper.svg();\n                if (1 !== t) {\n                    var i = this.w.globals.dom.Paper.node.cloneNode(!0);\n                    this.scaleSvgNode(i, t), e = (new XMLSerializer).serializeToString(i);\n                }\n                return this.fixSvgStringForIe11(e);\n            }\n        },\n        {\n            key: \"cleanup\",\n            value: function() {\n                var t = this.w, e = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-xcrosshairs\"), i = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-ycrosshairs\"), a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-zoom-rect, .apexcharts-selection-rect\");\n                Array.prototype.forEach.call(a, function(t) {\n                    t.setAttribute(\"width\", 0);\n                }), e && e[0] && (e[0].setAttribute(\"x\", -500), e[0].setAttribute(\"x1\", -500), e[0].setAttribute(\"x2\", -500)), i && i[0] && (i[0].setAttribute(\"y\", -100), i[0].setAttribute(\"y1\", -100), i[0].setAttribute(\"y2\", -100));\n            }\n        },\n        {\n            key: \"svgUrl\",\n            value: function() {\n                this.cleanup();\n                var t = this.getSvgString(), e = new Blob([\n                    t\n                ], {\n                    type: \"image/svg+xml;charset=utf-8\"\n                });\n                return URL.createObjectURL(e);\n            }\n        },\n        {\n            key: \"dataURI\",\n            value: function(t) {\n                var e = this;\n                return new Promise(function(i) {\n                    var a = e.w, s = t ? t.scale || t.width / a.globals.svgWidth : 1;\n                    e.cleanup();\n                    var r = document.createElement(\"canvas\");\n                    r.width = a.globals.svgWidth * s, r.height = parseInt(a.globals.dom.elWrap.style.height, 10) * s;\n                    var o = \"transparent\" === a.config.chart.background ? \"#fff\" : a.config.chart.background, n = r.getContext(\"2d\");\n                    n.fillStyle = o, n.fillRect(0, 0, r.width * s, r.height * s);\n                    var l = e.getSvgString(s);\n                    if (window.canvg && x.isIE11()) {\n                        var h = window.canvg.Canvg.fromString(n, l, {\n                            ignoreClear: !0,\n                            ignoreDimensions: !0\n                        });\n                        h.start();\n                        var c = r.msToBlob();\n                        h.stop(), i({\n                            blob: c\n                        });\n                    } else {\n                        var d = \"data:image/svg+xml,\" + encodeURIComponent(l), g = new Image;\n                        g.crossOrigin = \"anonymous\", g.onload = function() {\n                            if (n.drawImage(g, 0, 0), r.msToBlob) {\n                                var t = r.msToBlob();\n                                i({\n                                    blob: t\n                                });\n                            } else {\n                                var e = r.toDataURL(\"image/png\");\n                                i({\n                                    imgURI: e\n                                });\n                            }\n                        }, g.src = d;\n                    }\n                });\n            }\n        },\n        {\n            key: \"exportToSVG\",\n            value: function() {\n                this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, \".svg\");\n            }\n        },\n        {\n            key: \"exportToPng\",\n            value: function() {\n                var t = this;\n                this.dataURI().then(function(e) {\n                    var i = e.imgURI, a = e.blob;\n                    a ? navigator.msSaveOrOpenBlob(a, t.w.globals.chartID + \".png\") : t.triggerDownload(i, t.w.config.chart.toolbar.export.png.filename, \".png\");\n                });\n            }\n        },\n        {\n            key: \"exportToCSV\",\n            value: function(t) {\n                var e = this, i = t.series, a = t.fileName, s = t.columnDelimiter, r = void 0 === s ? \",\" : s, o = t.lineDelimiter, n = void 0 === o ? \"\\n\" : o, l = this.w;\n                i || (i = l.config.series);\n                var h, c, d = [], g = [], p = \"\", f = l.globals.series.map(function(t, e) {\n                    return -1 === l.globals.collapsedSeriesIndices.indexOf(e) ? t : [];\n                }), b = function(t) {\n                    return \"datetime\" === l.config.xaxis.type && String(t).length >= 10;\n                }, v = Math.max.apply(Math, u(i.map(function(t) {\n                    return t.data ? t.data.length : 0;\n                }))), m = new W(this.ctx), y = new B(this.ctx), w = function(t) {\n                    var i = \"\";\n                    if (l.globals.axisCharts) {\n                        if (\"category\" === l.config.xaxis.type || l.config.xaxis.convertedCatToNumeric) if (l.globals.isBarHorizontal) {\n                            var a = l.globals.yLabelFormatters[0], s = new N(e.ctx).getActiveConfigSeriesIndex();\n                            i = a(l.globals.labels[t], {\n                                seriesIndex: s,\n                                dataPointIndex: t,\n                                w: l\n                            });\n                        } else i = y.getLabel(l.globals.labels, l.globals.timescaleLabels, 0, t).text;\n                        \"datetime\" === l.config.xaxis.type && (l.config.xaxis.categories.length ? i = l.config.xaxis.categories[t] : l.config.labels.length && (i = l.config.labels[t]));\n                    } else i = l.config.labels[t];\n                    return Array.isArray(i) && (i = i.join(\" \")), x.isNumber(i) ? i : i.split(r).join(\"\");\n                }, k = function(t, e) {\n                    if (d.length && 0 === e && g.push(d.join(r)), t.data) {\n                        t.data = t.data.length && t.data || u(Array(v)).map(function() {\n                            return \"\";\n                        });\n                        for(var a = 0; a < t.data.length; a++){\n                            d = [];\n                            var s = w(a);\n                            if (s || (m.isFormatXY() ? s = i[e].data[a].x : m.isFormat2DArray() && (s = i[e].data[a] ? i[e].data[a][0] : \"\")), 0 === e) {\n                                d.push(b(s) ? l.config.chart.toolbar.export.csv.dateFormatter(s) : x.isNumber(s) ? s : s.split(r).join(\"\"));\n                                for(var o = 0; o < l.globals.series.length; o++){\n                                    var n;\n                                    if (m.isFormatXY()) d.push(null === (n = i[o].data[a]) || void 0 === n ? void 0 : n.y);\n                                    else d.push(f[o][a]);\n                                }\n                            }\n                            (\"candlestick\" === l.config.chart.type || t.type && \"candlestick\" === t.type) && (d.pop(), d.push(l.globals.seriesCandleO[e][a]), d.push(l.globals.seriesCandleH[e][a]), d.push(l.globals.seriesCandleL[e][a]), d.push(l.globals.seriesCandleC[e][a])), (\"boxPlot\" === l.config.chart.type || t.type && \"boxPlot\" === t.type) && (d.pop(), d.push(l.globals.seriesCandleO[e][a]), d.push(l.globals.seriesCandleH[e][a]), d.push(l.globals.seriesCandleM[e][a]), d.push(l.globals.seriesCandleL[e][a]), d.push(l.globals.seriesCandleC[e][a])), \"rangeBar\" === l.config.chart.type && (d.pop(), d.push(l.globals.seriesRangeStart[e][a]), d.push(l.globals.seriesRangeEnd[e][a])), d.length && g.push(d.join(r));\n                        }\n                    }\n                };\n                d.push(l.config.chart.toolbar.export.csv.headerCategory), \"boxPlot\" === l.config.chart.type ? (d.push(\"minimum\"), d.push(\"q1\"), d.push(\"median\"), d.push(\"q3\"), d.push(\"maximum\")) : \"candlestick\" === l.config.chart.type ? (d.push(\"open\"), d.push(\"high\"), d.push(\"low\"), d.push(\"close\")) : \"rangeBar\" === l.config.chart.type ? (d.push(\"minimum\"), d.push(\"maximum\")) : i.map(function(t, e) {\n                    var i = (t.name ? t.name : \"series-\".concat(e)) + \"\";\n                    l.globals.axisCharts && d.push(i.split(r).join(\"\") ? i.split(r).join(\"\") : \"series-\".concat(e));\n                }), l.globals.axisCharts || (d.push(l.config.chart.toolbar.export.csv.headerValue), g.push(d.join(r))), l.globals.allSeriesHasEqualX || !l.globals.axisCharts || l.config.xaxis.categories.length || l.config.labels.length ? i.map(function(t, e) {\n                    l.globals.axisCharts ? k(t, e) : ((d = []).push(l.globals.labels[e].split(r).join(\"\")), d.push(f[e]), g.push(d.join(r)));\n                }) : (h = new Set, c = {}, i.forEach(function(t, e) {\n                    null == t || t.data.forEach(function(t) {\n                        var a, s;\n                        if (m.isFormatXY()) a = t.x, s = t.y;\n                        else {\n                            if (!m.isFormat2DArray()) return;\n                            a = t[0], s = t[1];\n                        }\n                        c[a] || (c[a] = Array(i.length).fill(\"\")), c[a][e] = s, h.add(a);\n                    });\n                }), d.length && g.push(d.join(r)), Array.from(h).sort().forEach(function(t) {\n                    g.push([\n                        b(t) && \"datetime\" === l.config.xaxis.type ? l.config.chart.toolbar.export.csv.dateFormatter(t) : x.isNumber(t) ? t : t.split(r).join(\"\"),\n                        c[t].join(r)\n                    ]);\n                })), p += g.join(n), this.triggerDownload(\"data:text/csv; charset=utf-8,\" + encodeURIComponent(\"\\uFEFF\" + p), a || l.config.chart.toolbar.export.csv.filename, \".csv\");\n            }\n        },\n        {\n            key: \"triggerDownload\",\n            value: function(t, e, i) {\n                var a = document.createElement(\"a\");\n                a.href = t, a.download = (e || this.w.globals.chartID) + i, document.body.appendChild(a), a.click(), document.body.removeChild(a);\n            }\n        }\n    ]), t;\n}(), V = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = e, this.elgrid = i, this.w = e.w;\n        var s = this.w;\n        this.axesUtils = new B(e), this.xaxisLabels = s.globals.labels.slice(), s.globals.timescaleLabels.length > 0 && !s.globals.isBarHorizontal && (this.xaxisLabels = s.globals.timescaleLabels.slice()), s.config.xaxis.overwriteCategories && (this.xaxisLabels = s.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], \"top\" === s.config.xaxis.position ? this.offY = 0 : this.offY = s.globals.gridHeight + 1, this.offY = this.offY + s.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.horizontal, this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = s.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf(\"%\") > -1 ? this.xaxisBorderWidth = s.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = s.config.xaxis.axisBorder.height, this.yaxis = s.config.yaxis[0];\n    }\n    return r(t, [\n        {\n            key: \"drawXaxis\",\n            value: function() {\n                var t = this.w, e = new m(this.ctx), i = e.group({\n                    class: \"apexcharts-xaxis\",\n                    transform: \"translate(\".concat(t.config.xaxis.offsetX, \", \").concat(t.config.xaxis.offsetY, \")\")\n                }), a = e.group({\n                    class: \"apexcharts-xaxis-texts-g\",\n                    transform: \"translate(\".concat(t.globals.translateXAxisX, \", \").concat(t.globals.translateXAxisY, \")\")\n                });\n                i.add(a);\n                for(var s = [], r = 0; r < this.xaxisLabels.length; r++)s.push(this.xaxisLabels[r]);\n                if (this.drawXAxisLabelAndGroup(!0, e, a, s, t.globals.isXNumeric, function(t, e) {\n                    return e;\n                }), t.globals.hasXaxisGroups) {\n                    var o = t.globals.groups;\n                    s = [];\n                    for(var n = 0; n < o.length; n++)s.push(o[n].title);\n                    var l = {};\n                    t.config.xaxis.group.style && (l.xaxisFontSize = t.config.xaxis.group.style.fontSize, l.xaxisFontFamily = t.config.xaxis.group.style.fontFamily, l.xaxisForeColors = t.config.xaxis.group.style.colors, l.fontWeight = t.config.xaxis.group.style.fontWeight, l.cssClass = t.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(!1, e, a, s, !1, function(t, e) {\n                        return o[t].cols * e;\n                    }, l);\n                }\n                if (void 0 !== t.config.xaxis.title.text) {\n                    var h = e.group({\n                        class: \"apexcharts-xaxis-title\"\n                    }), c = e.drawText({\n                        x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,\n                        y: this.offY + parseFloat(this.xaxisFontSize) + (\"bottom\" === t.config.xaxis.position ? t.globals.xAxisLabelsHeight : -t.globals.xAxisLabelsHeight - 10) + t.config.xaxis.title.offsetY,\n                        text: t.config.xaxis.title.text,\n                        textAnchor: \"middle\",\n                        fontSize: t.config.xaxis.title.style.fontSize,\n                        fontFamily: t.config.xaxis.title.style.fontFamily,\n                        fontWeight: t.config.xaxis.title.style.fontWeight,\n                        foreColor: t.config.xaxis.title.style.color,\n                        cssClass: \"apexcharts-xaxis-title-text \" + t.config.xaxis.title.style.cssClass\n                    });\n                    h.add(c), i.add(h);\n                }\n                if (t.config.xaxis.axisBorder.show) {\n                    var d = t.globals.barPadForNumericAxis, g = e.drawLine(t.globals.padHorizontal + t.config.xaxis.axisBorder.offsetX - d, this.offY, this.xaxisBorderWidth + d, this.offY, t.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n                    this.elgrid && this.elgrid.elGridBorders && t.config.grid.show ? this.elgrid.elGridBorders.add(g) : i.add(g);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"drawXAxisLabelAndGroup\",\n            value: function(t, e, i, a, s, r) {\n                var o, n = this, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h = [], c = [], d = this.w, g = l.xaxisFontSize || this.xaxisFontSize, u = l.xaxisFontFamily || this.xaxisFontFamily, p = l.xaxisForeColors || this.xaxisForeColors, f = l.fontWeight || d.config.xaxis.labels.style.fontWeight, x = l.cssClass || d.config.xaxis.labels.style.cssClass, b = d.globals.padHorizontal, v = a.length, m = \"category\" === d.config.xaxis.type ? d.globals.dataPoints : v;\n                if (0 === m && v > m && (m = v), s) {\n                    var y = m > 1 ? m - 1 : m;\n                    o = d.globals.gridWidth / Math.min(y, v - 1), b = b + r(0, o) / 2 + d.config.xaxis.labels.offsetX;\n                } else o = d.globals.gridWidth / m, b = b + r(0, o) + d.config.xaxis.labels.offsetX;\n                for(var w = function(s) {\n                    var l = b - r(s, o) / 2 + d.config.xaxis.labels.offsetX;\n                    0 === s && 1 === v && o / 2 === b && 1 === m && (l = d.globals.gridWidth / 2);\n                    var y = n.axesUtils.getLabel(a, d.globals.timescaleLabels, l, s, h, g, t), w = 28;\n                    d.globals.rotateXLabels && t && (w = 22), d.config.xaxis.title.text && \"top\" === d.config.xaxis.position && (w += parseFloat(d.config.xaxis.title.style.fontSize) + 2), t || (w = w + parseFloat(g) + (d.globals.xAxisLabelsHeight - d.globals.xAxisGroupLabelsHeight) + (d.globals.rotateXLabels ? 10 : 0)), y = void 0 !== d.config.xaxis.tickAmount && \"dataPoints\" !== d.config.xaxis.tickAmount && \"datetime\" !== d.config.xaxis.type ? n.axesUtils.checkLabelBasedOnTickamount(s, y, v) : n.axesUtils.checkForOverflowingLabels(s, y, v, h, c);\n                    if (d.config.xaxis.labels.show) {\n                        var k = e.drawText({\n                            x: y.x,\n                            y: n.offY + d.config.xaxis.labels.offsetY + w - (\"top\" === d.config.xaxis.position ? d.globals.xAxisHeight + d.config.xaxis.axisTicks.height - 2 : 0),\n                            text: y.text,\n                            textAnchor: \"middle\",\n                            fontWeight: y.isBold ? 600 : f,\n                            fontSize: g,\n                            fontFamily: u,\n                            foreColor: Array.isArray(p) ? t && d.config.xaxis.convertedCatToNumeric ? p[d.globals.minX + s - 1] : p[s] : p,\n                            isPlainText: !1,\n                            cssClass: (t ? \"apexcharts-xaxis-label \" : \"apexcharts-xaxis-group-label \") + x\n                        });\n                        if (i.add(k), k.on(\"click\", function(t) {\n                            if (\"function\" == typeof d.config.chart.events.xAxisLabelClick) {\n                                var e = Object.assign({}, d, {\n                                    labelIndex: s\n                                });\n                                d.config.chart.events.xAxisLabelClick(t, n.ctx, e);\n                            }\n                        }), t) {\n                            var A = document.createElementNS(d.globals.SVGNS, \"title\");\n                            A.textContent = Array.isArray(y.text) ? y.text.join(\" \") : y.text, k.node.appendChild(A), \"\" !== y.text && (h.push(y.text), c.push(y));\n                        }\n                    }\n                    s < v - 1 && (b += r(s + 1, o));\n                }, k = 0; k <= v - 1; k++)w(k);\n            }\n        },\n        {\n            key: \"drawXaxisInversed\",\n            value: function(t) {\n                var e, i, a = this, s = this.w, r = new m(this.ctx), o = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0, n = r.group({\n                    class: \"apexcharts-yaxis apexcharts-xaxis-inversed\",\n                    rel: t\n                }), l = r.group({\n                    class: \"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g\",\n                    transform: \"translate(\" + o + \", 0)\"\n                });\n                n.add(l);\n                var h = [];\n                if (s.config.yaxis[t].show) for(var c = 0; c < this.xaxisLabels.length; c++)h.push(this.xaxisLabels[c]);\n                e = s.globals.gridHeight / h.length, i = -e / 2.2;\n                var d = s.globals.yLabelFormatters[0], g = s.config.yaxis[0].labels;\n                if (g.show) for(var u = function(o) {\n                    var n = void 0 === h[o] ? \"\" : h[o];\n                    n = d(n, {\n                        seriesIndex: t,\n                        dataPointIndex: o,\n                        w: s\n                    });\n                    var c = a.axesUtils.getYAxisForeColor(g.style.colors, t), u = 0;\n                    Array.isArray(n) && (u = n.length / 2 * parseInt(g.style.fontSize, 10));\n                    var p = g.offsetX - 15, f = \"end\";\n                    a.yaxis.opposite && (f = \"start\"), \"left\" === s.config.yaxis[0].labels.align ? (p = g.offsetX, f = \"start\") : \"center\" === s.config.yaxis[0].labels.align ? (p = g.offsetX, f = \"middle\") : \"right\" === s.config.yaxis[0].labels.align && (f = \"end\");\n                    var x = r.drawText({\n                        x: p,\n                        y: i + e + g.offsetY - u,\n                        text: n,\n                        textAnchor: f,\n                        foreColor: Array.isArray(c) ? c[o] : c,\n                        fontSize: g.style.fontSize,\n                        fontFamily: g.style.fontFamily,\n                        fontWeight: g.style.fontWeight,\n                        isPlainText: !1,\n                        cssClass: \"apexcharts-yaxis-label \" + g.style.cssClass,\n                        maxWidth: g.maxWidth\n                    });\n                    l.add(x), x.on(\"click\", function(t) {\n                        if (\"function\" == typeof s.config.chart.events.xAxisLabelClick) {\n                            var e = Object.assign({}, s, {\n                                labelIndex: o\n                            });\n                            s.config.chart.events.xAxisLabelClick(t, a.ctx, e);\n                        }\n                    });\n                    var b = document.createElementNS(s.globals.SVGNS, \"title\");\n                    if (b.textContent = Array.isArray(n) ? n.join(\" \") : n, x.node.appendChild(b), 0 !== s.config.yaxis[t].labels.rotate) {\n                        var v = r.rotateAroundCenter(x.node);\n                        x.node.setAttribute(\"transform\", \"rotate(\".concat(s.config.yaxis[t].labels.rotate, \" 0 \").concat(v.y, \")\"));\n                    }\n                    i += e;\n                }, p = 0; p <= h.length - 1; p++)u(p);\n                if (void 0 !== s.config.yaxis[0].title.text) {\n                    var f = r.group({\n                        class: \"apexcharts-yaxis-title apexcharts-xaxis-title-inversed\",\n                        transform: \"translate(\" + o + \", 0)\"\n                    }), x = r.drawText({\n                        x: s.config.yaxis[0].title.offsetX,\n                        y: s.globals.gridHeight / 2 + s.config.yaxis[0].title.offsetY,\n                        text: s.config.yaxis[0].title.text,\n                        textAnchor: \"middle\",\n                        foreColor: s.config.yaxis[0].title.style.color,\n                        fontSize: s.config.yaxis[0].title.style.fontSize,\n                        fontWeight: s.config.yaxis[0].title.style.fontWeight,\n                        fontFamily: s.config.yaxis[0].title.style.fontFamily,\n                        cssClass: \"apexcharts-yaxis-title-text \" + s.config.yaxis[0].title.style.cssClass\n                    });\n                    f.add(x), n.add(f);\n                }\n                var b = 0;\n                this.isCategoryBarHorizontal && s.config.yaxis[0].opposite && (b = s.globals.gridWidth);\n                var v = s.config.xaxis.axisBorder;\n                if (v.show) {\n                    var y = r.drawLine(s.globals.padHorizontal + v.offsetX + b, 1 + v.offsetY, s.globals.padHorizontal + v.offsetX + b, s.globals.gridHeight + v.offsetY, v.color, 0);\n                    this.elgrid && this.elgrid.elGridBorders && s.config.grid.show ? this.elgrid.elGridBorders.add(y) : n.add(y);\n                }\n                return s.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b, h.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, n), n;\n            }\n        },\n        {\n            key: \"drawXaxisTicks\",\n            value: function(t, e, i) {\n                var a = this.w, s = t;\n                if (!(t < 0 || t - 2 > a.globals.gridWidth)) {\n                    var r = this.offY + a.config.xaxis.axisTicks.offsetY;\n                    if (e = e + r + a.config.xaxis.axisTicks.height, \"top\" === a.config.xaxis.position && (e = r - a.config.xaxis.axisTicks.height), a.config.xaxis.axisTicks.show) {\n                        var o = new m(this.ctx).drawLine(t + a.config.xaxis.axisTicks.offsetX, r + a.config.xaxis.offsetY, s + a.config.xaxis.axisTicks.offsetX, e + a.config.xaxis.offsetY, a.config.xaxis.axisTicks.color);\n                        i.add(o), o.node.classList.add(\"apexcharts-xaxis-tick\");\n                    }\n                }\n            }\n        },\n        {\n            key: \"getXAxisTicksPositions\",\n            value: function() {\n                var t = this.w, e = [], i = this.xaxisLabels.length, a = t.globals.padHorizontal;\n                if (t.globals.timescaleLabels.length > 0) for(var s = 0; s < i; s++)a = this.xaxisLabels[s].position, e.push(a);\n                else for(var r = i, o = 0; o < r; o++){\n                    var n = r;\n                    t.globals.isXNumeric && \"bar\" !== t.config.chart.type && (n -= 1), a += t.globals.gridWidth / n, e.push(a);\n                }\n                return e;\n            }\n        },\n        {\n            key: \"xAxisLabelCorrections\",\n            value: function() {\n                var t = this.w, e = new m(this.ctx), i = t.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g\"), a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)\"), s = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-inversed text\"), r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-inversed-texts-g text tspan\");\n                if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for(var o = 0; o < a.length; o++){\n                    var n = e.rotateAroundCenter(a[o]);\n                    n.y = n.y - 1, n.x = n.x + 1, a[o].setAttribute(\"transform\", \"rotate(\".concat(t.config.xaxis.labels.rotate, \" \").concat(n.x, \" \").concat(n.y, \")\")), a[o].setAttribute(\"text-anchor\", \"end\");\n                    i.setAttribute(\"transform\", \"translate(0, \".concat(-10, \")\"));\n                    var l = a[o].childNodes;\n                    t.config.xaxis.labels.trim && Array.prototype.forEach.call(l, function(i) {\n                        e.placeTextWithEllipsis(i, i.textContent, t.globals.xAxisLabelsHeight - (\"bottom\" === t.config.legend.position ? 20 : 10));\n                    });\n                }\n                else !function() {\n                    for(var i = t.globals.gridWidth / (t.globals.labels.length + 1), s = 0; s < a.length; s++){\n                        var r = a[s].childNodes;\n                        t.config.xaxis.labels.trim && \"datetime\" !== t.config.xaxis.type && Array.prototype.forEach.call(r, function(t) {\n                            e.placeTextWithEllipsis(t, t.textContent, i);\n                        });\n                    }\n                }();\n                if (s.length > 0) {\n                    var h = s[s.length - 1].getBBox(), c = s[0].getBBox();\n                    h.x < -20 && s[s.length - 1].parentNode.removeChild(s[s.length - 1]), c.x + c.width > t.globals.gridWidth && !t.globals.isBarHorizontal && s[0].parentNode.removeChild(s[0]);\n                    for(var d = 0; d < r.length; d++)e.placeTextWithEllipsis(r[d], r[d].textContent, t.config.yaxis[0].labels.maxWidth - (t.config.yaxis[0].title.text ? 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) : 0) - 15);\n                }\n            }\n        }\n    ]), t;\n}(), j = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n        var i = this.w;\n        this.xaxisLabels = i.globals.labels.slice(), this.axesUtils = new B(e), this.isRangeBar = i.globals.seriesRange.length && i.globals.isBarHorizontal, i.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i.globals.timescaleLabels.slice());\n    }\n    return r(t, [\n        {\n            key: \"drawGridArea\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = this.w, i = new m(this.ctx);\n                null === t && (t = i.group({\n                    class: \"apexcharts-grid\"\n                }));\n                var a = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, \"transparent\"), s = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, \"transparent\");\n                return t.add(s), t.add(a), t;\n            }\n        },\n        {\n            key: \"drawGrid\",\n            value: function() {\n                var t = null;\n                return this.w.globals.axisCharts && (t = this.renderGrid(), this.drawGridArea(t.el)), t;\n            }\n        },\n        {\n            key: \"createGridMask\",\n            value: function() {\n                var t = this.w, e = t.globals, i = new m(this.ctx), a = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;\n                if (Array.isArray(t.config.stroke.width)) {\n                    var s = 0;\n                    t.config.stroke.width.forEach(function(t) {\n                        s = Math.max(s, t);\n                    }), a = s;\n                }\n                e.dom.elGridRectMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elGridRectMask.setAttribute(\"id\", \"gridRectMask\".concat(e.cuid)), e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elGridRectMarkerMask.setAttribute(\"id\", \"gridRectMarkerMask\".concat(e.cuid)), e.dom.elForecastMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elForecastMask.setAttribute(\"id\", \"forecastMask\".concat(e.cuid)), e.dom.elNonForecastMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elNonForecastMask.setAttribute(\"id\", \"nonForecastMask\".concat(e.cuid));\n                var r = t.config.chart.type, o = 0, n = 0;\n                (\"bar\" === r || \"rangeBar\" === r || \"candlestick\" === r || \"boxPlot\" === r || t.globals.comboBarCount > 0) && t.globals.isXNumeric && !t.globals.isBarHorizontal && (o = t.config.grid.padding.left, n = t.config.grid.padding.right, e.barPadForNumericAxis > o && (o = e.barPadForNumericAxis, n = e.barPadForNumericAxis)), e.dom.elGridRect = i.drawRect(-a - o - 2, 2 * -a - 2, e.gridWidth + a + n + o + 4, e.gridHeight + 4 * a + 4, 0, \"#fff\");\n                var l = t.globals.markers.largestSize + 1;\n                e.dom.elGridRectMarker = i.drawRect(2 * -l, 2 * -l, e.gridWidth + 4 * l, e.gridHeight + 4 * l, 0, \"#fff\"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);\n                var h = e.dom.baseEl.querySelector(\"defs\");\n                h.appendChild(e.dom.elGridRectMask), h.appendChild(e.dom.elForecastMask), h.appendChild(e.dom.elNonForecastMask), h.appendChild(e.dom.elGridRectMarkerMask);\n            }\n        },\n        {\n            key: \"_drawGridLines\",\n            value: function(t) {\n                var e = t.i, i = t.x1, a = t.y1, s = t.x2, r = t.y2, o = t.xCount, n = t.parent, l = this.w;\n                if (!(0 === e && l.globals.skipFirstTimelinelabel || e === o - 1 && l.globals.skipLastTimelinelabel && !l.config.xaxis.labels.formatter || \"radar\" === l.config.chart.type)) {\n                    l.config.grid.xaxis.lines.show && this._drawGridLine({\n                        i: e,\n                        x1: i,\n                        y1: a,\n                        x2: s,\n                        y2: r,\n                        xCount: o,\n                        parent: n\n                    });\n                    var h = 0;\n                    if (l.globals.hasXaxisGroups && \"between\" === l.config.xaxis.tickPlacement) {\n                        var c = l.globals.groups;\n                        if (c) {\n                            for(var d = 0, g = 0; d < e && g < c.length; g++)d += c[g].cols;\n                            d === e && (h = .6 * l.globals.xAxisLabelsHeight);\n                        }\n                    }\n                    new V(this.ctx).drawXaxisTicks(i, h, l.globals.dom.elGraphical);\n                }\n            }\n        },\n        {\n            key: \"_drawGridLine\",\n            value: function(t) {\n                var e = t.i, i = t.x1, a = t.y1, s = t.x2, r = t.y2, o = t.xCount, n = t.parent, l = this.w, h = !1, c = n.node.classList.contains(\"apexcharts-gridlines-horizontal\"), d = l.config.grid.strokeDashArray, g = l.globals.barPadForNumericAxis;\n                (0 === a && 0 === r || 0 === i && 0 === s) && (h = !0), a === l.globals.gridHeight && r === l.globals.gridHeight && (h = !0), !l.globals.isBarHorizontal || 0 !== e && e !== o - 1 || (h = !0);\n                var u = new m(this).drawLine(i - (c ? g : 0), a, s + (c ? g : 0), r, l.config.grid.borderColor, d);\n                u.node.classList.add(\"apexcharts-gridline\"), h && l.config.grid.show ? this.elGridBorders.add(u) : n.add(u);\n            }\n        },\n        {\n            key: \"_drawGridBandRect\",\n            value: function(t) {\n                var e = t.c, i = t.x1, a = t.y1, s = t.x2, r = t.y2, o = t.type, n = this.w, l = new m(this.ctx), h = n.globals.barPadForNumericAxis;\n                if (\"column\" !== o || \"datetime\" !== n.config.xaxis.type) {\n                    var c = n.config.grid[o].colors[e], d = l.drawRect(i - (\"row\" === o ? h : 0), a, s + (\"row\" === o ? 2 * h : 0), r, 0, c, n.config.grid[o].opacity);\n                    this.elg.add(d), d.attr(\"clip-path\", \"url(#gridRectMask\".concat(n.globals.cuid, \")\")), d.node.classList.add(\"apexcharts-grid-\".concat(o));\n                }\n            }\n        },\n        {\n            key: \"_drawXYLines\",\n            value: function(t) {\n                var e = this, i = t.xCount, a = t.tickAmount, s = this.w;\n                if (s.config.grid.xaxis.lines.show || s.config.xaxis.axisTicks.show) {\n                    var r, o = s.globals.padHorizontal, n = s.globals.gridHeight;\n                    s.globals.timescaleLabels.length ? function(t) {\n                        for(var a = t.xC, s = t.x1, r = t.y1, o = t.x2, n = t.y2, l = 0; l < a; l++)s = e.xaxisLabels[l].position, o = e.xaxisLabels[l].position, e._drawGridLines({\n                            i: l,\n                            x1: s,\n                            y1: r,\n                            x2: o,\n                            y2: n,\n                            xCount: i,\n                            parent: e.elgridLinesV\n                        });\n                    }({\n                        xC: i,\n                        x1: o,\n                        y1: 0,\n                        x2: r,\n                        y2: n\n                    }) : (s.globals.isXNumeric && (i = s.globals.xAxisScale.result.length), function(t) {\n                        for(var a = t.xC, r = t.x1, o = t.y1, n = t.x2, l = t.y2, h = 0; h < a + (s.globals.isXNumeric ? 0 : 1); h++)0 === h && 1 === a && 1 === s.globals.dataPoints && (n = r = s.globals.gridWidth / 2), e._drawGridLines({\n                            i: h,\n                            x1: r,\n                            y1: o,\n                            x2: n,\n                            y2: l,\n                            xCount: i,\n                            parent: e.elgridLinesV\n                        }), n = r += s.globals.gridWidth / (s.globals.isXNumeric ? a - 1 : a);\n                    }({\n                        xC: i,\n                        x1: o,\n                        y1: 0,\n                        x2: r,\n                        y2: n\n                    }));\n                }\n                if (s.config.grid.yaxis.lines.show) {\n                    var l = 0, h = 0, c = s.globals.gridWidth, d = a + 1;\n                    this.isRangeBar && (d = s.globals.labels.length);\n                    for(var g = 0; g < d + (this.isRangeBar ? 1 : 0); g++)this._drawGridLine({\n                        i: g,\n                        xCount: d + (this.isRangeBar ? 1 : 0),\n                        x1: 0,\n                        y1: l,\n                        x2: c,\n                        y2: h,\n                        parent: this.elgridLinesH\n                    }), h = l += s.globals.gridHeight / (this.isRangeBar ? d : a);\n                }\n            }\n        },\n        {\n            key: \"_drawInvertedXYLines\",\n            value: function(t) {\n                var e = t.xCount, i = this.w;\n                if (i.config.grid.xaxis.lines.show || i.config.xaxis.axisTicks.show) for(var a, s = i.globals.padHorizontal, r = i.globals.gridHeight, o = 0; o < e + 1; o++){\n                    i.config.grid.xaxis.lines.show && this._drawGridLine({\n                        i: o,\n                        xCount: e + 1,\n                        x1: s,\n                        y1: 0,\n                        x2: a,\n                        y2: r,\n                        parent: this.elgridLinesV\n                    }), new V(this.ctx).drawXaxisTicks(s, 0, i.globals.dom.elGraphical), a = s = s + i.globals.gridWidth / e + .3;\n                }\n                if (i.config.grid.yaxis.lines.show) for(var n = 0, l = 0, h = i.globals.gridWidth, c = 0; c < i.globals.dataPoints + 1; c++)this._drawGridLine({\n                    i: c,\n                    xCount: i.globals.dataPoints + 1,\n                    x1: 0,\n                    y1: n,\n                    x2: h,\n                    y2: l,\n                    parent: this.elgridLinesH\n                }), l = n += i.globals.gridHeight / i.globals.dataPoints;\n            }\n        },\n        {\n            key: \"renderGrid\",\n            value: function() {\n                var t = this.w, e = new m(this.ctx);\n                this.elg = e.group({\n                    class: \"apexcharts-grid\"\n                }), this.elgridLinesH = e.group({\n                    class: \"apexcharts-gridlines-horizontal\"\n                }), this.elgridLinesV = e.group({\n                    class: \"apexcharts-gridlines-vertical\"\n                }), this.elGridBorders = e.group({\n                    class: \"apexcharts-grid-borders\"\n                }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide(), this.elGridBorders.hide());\n                for(var i, a = t.globals.yAxisScale.length ? t.globals.yAxisScale[0].result.length - 1 : 5, s = 0; s < t.globals.series.length && (void 0 !== t.globals.yAxisScale[s] && (a = t.globals.yAxisScale[s].result.length - 1), !(a > 2)); s++);\n                if (!t.globals.isBarHorizontal || this.isRangeBar) {\n                    var r, o, n;\n                    if (i = this.xaxisLabels.length, this.isRangeBar) i--, a = t.globals.labels.length, t.config.xaxis.tickAmount && t.config.xaxis.labels.formatter && (i = t.config.xaxis.tickAmount), (null === (r = t.globals.yAxisScale) || void 0 === r || null === (o = r[0]) || void 0 === o || null === (n = o.result) || void 0 === n ? void 0 : n.length) > 0 && \"datetime\" !== t.config.xaxis.type && (i = t.globals.yAxisScale[0].result.length - 1);\n                    this._drawXYLines({\n                        xCount: i,\n                        tickAmount: a\n                    });\n                } else i = a, a = t.globals.xTickAmount, this._drawInvertedXYLines({\n                    xCount: i,\n                    tickAmount: a\n                });\n                return this.drawGridBands(i, a), {\n                    el: this.elg,\n                    elGridBorders: this.elGridBorders,\n                    xAxisTickWidth: t.globals.gridWidth / i\n                };\n            }\n        },\n        {\n            key: \"drawGridBands\",\n            value: function(t, e) {\n                var i = this.w;\n                if (void 0 !== i.config.grid.row.colors && i.config.grid.row.colors.length > 0) for(var a = 0, s = i.globals.gridHeight / e, r = i.globals.gridWidth, o = 0, n = 0; o < e; o++, n++)n >= i.config.grid.row.colors.length && (n = 0), this._drawGridBandRect({\n                    c: n,\n                    x1: 0,\n                    y1: a,\n                    x2: r,\n                    y2: s,\n                    type: \"row\"\n                }), a += i.globals.gridHeight / e;\n                if (void 0 !== i.config.grid.column.colors && i.config.grid.column.colors.length > 0) for(var l = i.globals.isBarHorizontal || \"on\" !== i.config.xaxis.tickPlacement || \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric ? t : t - 1, h = i.globals.padHorizontal, c = i.globals.padHorizontal + i.globals.gridWidth / l, d = i.globals.gridHeight, g = 0, u = 0; g < t; g++, u++)u >= i.config.grid.column.colors.length && (u = 0), this._drawGridBandRect({\n                    c: u,\n                    x1: h,\n                    y1: 0,\n                    x2: c,\n                    y2: d,\n                    type: \"column\"\n                }), h += i.globals.gridWidth / l;\n            }\n        }\n    ]), t;\n}(), _ = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"niceScale\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s = arguments.length > 4 ? arguments[4] : void 0, r = this.w, o = Math.abs(e - t);\n                if (\"dataPoints\" === (i = this._adjustTicksForSmallRange(i, a, o)) && (i = r.globals.dataPoints - 1), t === Number.MIN_VALUE && 0 === e || !x.isNumber(t) && !x.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) return t = 0, e = i, this.linearScale(t, e, i, a, r.config.yaxis[a].stepSize);\n                t > e ? (console.warn(\"axis.min cannot be greater than axis.max\"), e = t + .1) : t === e && (t = 0 === t ? 0 : t - .5, e = 0 === e ? 2 : e + .5);\n                var n = [];\n                o < 1 && s && (\"candlestick\" === r.config.chart.type || \"candlestick\" === r.config.series[a].type || \"boxPlot\" === r.config.chart.type || \"boxPlot\" === r.config.series[a].type || r.globals.isRangeData) && (e *= 1.01);\n                var l = i + 1;\n                l < 2 ? l = 2 : l > 2 && (l -= 2);\n                var h = o / l, c = Math.floor(x.log10(h)), d = Math.pow(10, c), g = Math.round(h / d);\n                g < 1 && (g = 1);\n                var u = g * d;\n                r.config.yaxis[a].stepSize && (u = r.config.yaxis[a].stepSize), r.globals.isBarHorizontal && r.config.xaxis.stepSize && \"datetime\" !== r.config.xaxis.type && (u = r.config.xaxis.stepSize);\n                var p = u * Math.floor(t / u), f = u * Math.ceil(e / u), b = p;\n                if (s && o > 2) {\n                    for(; n.push(x.stripNumber(b, 7)), !((b += u) > f););\n                    return {\n                        result: n,\n                        niceMin: n[0],\n                        niceMax: n[n.length - 1]\n                    };\n                }\n                var v = t;\n                (n = []).push(x.stripNumber(v, 7));\n                for(var m = Math.abs(e - t) / i, y = 0; y <= i; y++)v += m, n.push(v);\n                return n[n.length - 2] >= e && n.pop(), {\n                    result: n,\n                    niceMin: n[0],\n                    niceMax: n[n.length - 1]\n                };\n            }\n        },\n        {\n            key: \"linearScale\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, r = Math.abs(e - t);\n                \"dataPoints\" === (i = this._adjustTicksForSmallRange(i, a, r)) && (i = this.w.globals.dataPoints - 1), s || (s = r / i), i === Number.MAX_VALUE && (i = 5, s = 1);\n                for(var o = [], n = t; i >= 0;)o.push(n), n += s, i -= 1;\n                return {\n                    result: o,\n                    niceMin: o[0],\n                    niceMax: o[o.length - 1]\n                };\n            }\n        },\n        {\n            key: \"logarithmicScaleNice\",\n            value: function(t, e, i) {\n                e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n                for(var a = [], s = Math.ceil(Math.log(e) / Math.log(i) + 1), r = Math.floor(Math.log(t) / Math.log(i)); r < s; r++)a.push(Math.pow(i, r));\n                return {\n                    result: a,\n                    niceMin: a[0],\n                    niceMax: a[a.length - 1]\n                };\n            }\n        },\n        {\n            key: \"logarithmicScale\",\n            value: function(t, e, i) {\n                e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n                for(var a = [], s = Math.log(e) / Math.log(i), r = Math.log(t) / Math.log(i), o = s - r, n = Math.round(o), l = o / n, h = 0, c = r; h < n; h++, c += l)a.push(Math.pow(i, c));\n                return a.push(Math.pow(i, s)), {\n                    result: a,\n                    niceMin: t,\n                    niceMax: e\n                };\n            }\n        },\n        {\n            key: \"_adjustTicksForSmallRange\",\n            value: function(t, e, i) {\n                var a = t;\n                if (void 0 !== e && this.w.config.yaxis[e].labels.formatter && void 0 === this.w.config.yaxis[e].tickAmount) {\n                    var s = Number(this.w.config.yaxis[e].labels.formatter(1));\n                    x.isNumber(s) && 0 === this.w.globals.yValueDecimal && (a = Math.ceil(i));\n                }\n                return a < t ? a : t;\n            }\n        },\n        {\n            key: \"setYScaleForIndex\",\n            value: function(t, e, i) {\n                var a = this.w.globals, s = this.w.config, r = a.isBarHorizontal ? s.xaxis : s.yaxis[t];\n                void 0 === a.yAxisScale[t] && (a.yAxisScale[t] = []);\n                var o = Math.abs(i - e);\n                if (r.logarithmic && o <= 5 && (a.invalidLogScale = !0), r.logarithmic && o > 5) a.allSeriesCollapsed = !1, a.yAxisScale[t] = this.logarithmicScale(e, i, r.logBase), a.yAxisScale[t] = r.forceNiceScale ? this.logarithmicScaleNice(e, i, r.logBase) : this.logarithmicScale(e, i, r.logBase);\n                else if (i !== -Number.MAX_VALUE && x.isNumber(i)) if (a.allSeriesCollapsed = !1, void 0 === r.min && void 0 === r.max || r.forceNiceScale) {\n                    var n = void 0 === s.yaxis[t].max && void 0 === s.yaxis[t].min || s.yaxis[t].forceNiceScale;\n                    a.yAxisScale[t] = this.niceScale(e, i, r.tickAmount ? r.tickAmount : o < 5 && o > 1 ? o + 1 : 5, t, n);\n                } else a.yAxisScale[t] = this.linearScale(e, i, r.tickAmount, t, s.yaxis[t].stepSize);\n                else a.yAxisScale[t] = this.linearScale(0, 5, 5, t, s.yaxis[t].stepSize);\n            }\n        },\n        {\n            key: \"setXScale\",\n            value: function(t, e) {\n                var i = this.w, a = i.globals, s = Math.abs(e - t);\n                return e !== -Number.MAX_VALUE && x.isNumber(e) ? a.xAxisScale = this.linearScale(t, e, i.config.xaxis.tickAmount ? i.config.xaxis.tickAmount : s < 5 && s > 1 ? s + 1 : 5, 0, i.config.xaxis.stepSize) : a.xAxisScale = this.linearScale(0, 5, 5), a.xAxisScale;\n            }\n        },\n        {\n            key: \"setMultipleYScales\",\n            value: function() {\n                var t = this, e = this.w.globals, i = this.w.config, a = e.minYArr.concat([]), s = e.maxYArr.concat([]), r = [];\n                i.yaxis.forEach(function(e, o) {\n                    var n = o;\n                    i.series.forEach(function(t, i) {\n                        t.name === e.seriesName && (n = i, o !== i ? r.push({\n                            index: i,\n                            similarIndex: o,\n                            alreadyExists: !0\n                        }) : r.push({\n                            index: i\n                        }));\n                    });\n                    var l = a[n], h = s[n];\n                    t.setYScaleForIndex(o, l, h);\n                }), this.sameScaleInMultipleAxes(a, s, r);\n            }\n        },\n        {\n            key: \"sameScaleInMultipleAxes\",\n            value: function(t, e, i) {\n                var a = this, s = this.w.config, r = this.w.globals, o = [];\n                i.forEach(function(t) {\n                    t.alreadyExists && (void 0 === o[t.index] && (o[t.index] = []), o[t.index].push(t.index), o[t.index].push(t.similarIndex));\n                }), r.yAxisSameScaleIndices = o, o.forEach(function(t, e) {\n                    o.forEach(function(i, a) {\n                        var s, r;\n                        e !== a && (s = t, r = i, s.filter(function(t) {\n                            return -1 !== r.indexOf(t);\n                        })).length > 0 && (o[e] = o[e].concat(o[a]));\n                    });\n                });\n                var n = o.map(function(t) {\n                    return t.filter(function(e, i) {\n                        return t.indexOf(e) === i;\n                    });\n                }).map(function(t) {\n                    return t.sort();\n                });\n                o = o.filter(function(t) {\n                    return !!t;\n                });\n                var l = n.slice(), h = l.map(function(t) {\n                    return JSON.stringify(t);\n                });\n                l = l.filter(function(t, e) {\n                    return h.indexOf(JSON.stringify(t)) === e;\n                });\n                var c = [], d = [];\n                t.forEach(function(t, i) {\n                    l.forEach(function(a, s) {\n                        a.indexOf(i) > -1 && (void 0 === c[s] && (c[s] = [], d[s] = []), c[s].push({\n                            key: i,\n                            value: t\n                        }), d[s].push({\n                            key: i,\n                            value: e[i]\n                        }));\n                    });\n                });\n                var g = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, Number.MIN_VALUE), u = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);\n                c.forEach(function(t, e) {\n                    t.forEach(function(t, i) {\n                        g[e] = Math.min(t.value, g[e]);\n                    });\n                }), d.forEach(function(t, e) {\n                    t.forEach(function(t, i) {\n                        u[e] = Math.max(t.value, u[e]);\n                    });\n                }), t.forEach(function(t, e) {\n                    d.forEach(function(t, i) {\n                        var o = g[i], n = u[i];\n                        s.chart.stacked && (n = 0, t.forEach(function(t, e) {\n                            t.value !== -Number.MAX_VALUE && (n += t.value), o !== Number.MIN_VALUE && (o += c[i][e].value);\n                        })), t.forEach(function(i, l) {\n                            t[l].key === e && (void 0 !== s.yaxis[e].min && (o = \"function\" == typeof s.yaxis[e].min ? s.yaxis[e].min(r.minY) : s.yaxis[e].min), void 0 !== s.yaxis[e].max && (n = \"function\" == typeof s.yaxis[e].max ? s.yaxis[e].max(r.maxY) : s.yaxis[e].max), a.setYScaleForIndex(e, o, n));\n                        });\n                    });\n                });\n            }\n        },\n        {\n            key: \"autoScaleY\",\n            value: function(t, e, i) {\n                t || (t = this);\n                var a = t.w;\n                if (a.globals.isMultipleYAxis || a.globals.collapsedSeries.length) return console.warn(\"autoScaleYaxis not supported in a multi-yaxis chart.\"), e;\n                var s = a.globals.seriesX[0], r = a.config.chart.stacked;\n                return e.forEach(function(t, o) {\n                    for(var n = 0, l = 0; l < s.length; l++)if (s[l] >= i.xaxis.min) {\n                        n = l;\n                        break;\n                    }\n                    var h, c, d = a.globals.minYArr[o], g = a.globals.maxYArr[o], u = a.globals.stackedSeriesTotals;\n                    a.globals.series.forEach(function(o, l) {\n                        var p = o[n];\n                        r ? (p = u[n], h = c = p, u.forEach(function(t, e) {\n                            s[e] <= i.xaxis.max && s[e] >= i.xaxis.min && (t > c && null !== t && (c = t), o[e] < h && null !== o[e] && (h = o[e]));\n                        })) : (h = c = p, o.forEach(function(t, e) {\n                            if (s[e] <= i.xaxis.max && s[e] >= i.xaxis.min) {\n                                var r = t, o = t;\n                                a.globals.series.forEach(function(i, a) {\n                                    null !== t && (r = Math.min(i[e], r), o = Math.max(i[e], o));\n                                }), o > c && null !== o && (c = o), r < h && null !== r && (h = r);\n                            }\n                        })), void 0 === h && void 0 === c && (h = d, c = g), c *= c < 0 ? .9 : 1.1, 0 === (h *= h < 0 ? 1.1 : .9) && 0 === c && (h = -1, c = 1), c < 0 && c < g && (c = g), h < 0 && h > d && (h = d), e.length > 1 ? (e[l].min = void 0 === t.min ? h : t.min, e[l].max = void 0 === t.max ? c : t.max) : (e[0].min = void 0 === t.min ? h : t.min, e[0].max = void 0 === t.max ? c : t.max);\n                    });\n                }), e;\n            }\n        }\n    ]), t;\n}(), U = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.scales = new _(e);\n    }\n    return r(t, [\n        {\n            key: \"init\",\n            value: function() {\n                this.setYRange(), this.setXRange(), this.setZRange();\n            }\n        },\n        {\n            key: \"getMinYMaxY\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s = this.w.config, r = this.w.globals, o = -Number.MAX_VALUE, n = Number.MIN_VALUE;\n                null === a && (a = t + 1);\n                var l = r.series, h = l, c = l;\n                \"candlestick\" === s.chart.type ? (h = r.seriesCandleL, c = r.seriesCandleH) : \"boxPlot\" === s.chart.type ? (h = r.seriesCandleO, c = r.seriesCandleC) : r.isRangeData && (h = r.seriesRangeStart, c = r.seriesRangeEnd);\n                for(var d = t; d < a; d++){\n                    r.dataPoints = Math.max(r.dataPoints, l[d].length), r.categoryLabels.length && (r.dataPoints = r.categoryLabels.filter(function(t) {\n                        return void 0 !== t;\n                    }).length), r.labels.length && \"datetime\" !== s.xaxis.type && 0 !== r.series.reduce(function(t, e) {\n                        return t + e.length;\n                    }, 0) && (r.dataPoints = Math.max(r.dataPoints, r.labels.length));\n                    for(var g = 0; g < r.series[d].length; g++){\n                        var u = l[d][g];\n                        null !== u && x.isNumber(u) ? (void 0 !== c[d][g] && (o = Math.max(o, c[d][g]), e = Math.min(e, c[d][g])), void 0 !== h[d][g] && (e = Math.min(e, h[d][g]), i = Math.max(i, h[d][g])), \"candlestick\" !== this.w.config.chart.type && \"boxPlot\" !== this.w.config.chart.type && \"rangeArea\" === this.w.config.chart.type && \"rangeBar\" === this.w.config.chart.type || (\"candlestick\" !== this.w.config.chart.type && \"boxPlot\" !== this.w.config.chart.type || void 0 !== r.seriesCandleC[d][g] && (o = Math.max(o, r.seriesCandleO[d][g]), o = Math.max(o, r.seriesCandleH[d][g]), o = Math.max(o, r.seriesCandleL[d][g]), o = Math.max(o, r.seriesCandleC[d][g]), \"boxPlot\" === this.w.config.chart.type && (o = Math.max(o, r.seriesCandleM[d][g]))), !s.series[d].type || \"candlestick\" === s.series[d].type && \"boxPlot\" === s.series[d].type && \"rangeArea\" === s.series[d].type && \"rangeBar\" === s.series[d].type || (o = Math.max(o, r.series[d][g]), e = Math.min(e, r.series[d][g])), i = o), r.seriesGoals[d] && r.seriesGoals[d][g] && Array.isArray(r.seriesGoals[d][g]) && r.seriesGoals[d][g].forEach(function(t) {\n                            n !== Number.MIN_VALUE && (n = Math.min(n, t.value), e = n), o = Math.max(o, t.value), i = o;\n                        }), x.isFloat(u) && (u = x.noExponents(u), r.yValueDecimal = Math.max(r.yValueDecimal, u.toString().split(\".\")[1].length)), n > h[d][g] && h[d][g] < 0 && (n = h[d][g])) : r.hasNullValues = !0;\n                    }\n                }\n                return \"rangeBar\" === s.chart.type && r.seriesRangeStart.length && r.isBarHorizontal && (n = e), \"bar\" === s.chart.type && (n < 0 && o < 0 && (o = 0), n === Number.MIN_VALUE && (n = 0)), {\n                    minY: n,\n                    maxY: o,\n                    lowestY: e,\n                    highestY: i\n                };\n            }\n        },\n        {\n            key: \"setYRange\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config;\n                t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;\n                var i = Number.MAX_VALUE;\n                if (t.isMultipleYAxis) for(var a = 0; a < t.series.length; a++){\n                    var s = this.getMinYMaxY(a, i, null, a + 1);\n                    t.minYArr.push(s.minY), t.maxYArr.push(s.maxY), i = s.lowestY;\n                }\n                var r = this.getMinYMaxY(0, i, null, t.series.length);\n                if (t.minY = r.minY, t.maxY = r.maxY, i = r.lowestY, e.chart.stacked && this._setStackedMinMax(), (\"line\" === e.chart.type || \"area\" === e.chart.type || \"candlestick\" === e.chart.type || \"boxPlot\" === e.chart.type || \"rangeBar\" === e.chart.type && !t.isBarHorizontal) && t.minY === Number.MIN_VALUE && i !== -Number.MAX_VALUE && i !== t.maxY) {\n                    var o = t.maxY - i;\n                    (i >= 0 && i <= 10 || void 0 !== e.yaxis[0].min || void 0 !== e.yaxis[0].max) && (o = 0), t.minY = i - 5 * o / 100, i > 0 && t.minY < 0 && (t.minY = 0), t.maxY = t.maxY + 5 * o / 100;\n                }\n                if (e.yaxis.forEach(function(e, i) {\n                    void 0 !== e.max && (\"number\" == typeof e.max ? t.maxYArr[i] = e.max : \"function\" == typeof e.max && (t.maxYArr[i] = e.max(t.isMultipleYAxis ? t.maxYArr[i] : t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && (\"number\" == typeof e.min ? t.minYArr[i] = e.min : \"function\" == typeof e.min && (t.minYArr[i] = e.min(t.isMultipleYAxis ? t.minYArr[i] === Number.MIN_VALUE ? 0 : t.minYArr[i] : t.minY)), t.minY = t.minYArr[i]);\n                }), t.isBarHorizontal) {\n                    [\n                        \"min\",\n                        \"max\"\n                    ].forEach(function(i) {\n                        void 0 !== e.xaxis[i] && \"number\" == typeof e.xaxis[i] && (\"min\" === i ? t.minY = e.xaxis[i] : t.maxY = e.xaxis[i]);\n                    });\n                }\n                return t.isMultipleYAxis ? (this.scales.setMultipleYScales(), t.minY = i, t.yAxisScale.forEach(function(e, i) {\n                    t.minYArr[i] = e.niceMin, t.maxYArr[i] = e.niceMax;\n                })) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.yAxisScale[0].niceMin, t.maxYArr[0] = t.yAxisScale[0].niceMax), {\n                    minY: t.minY,\n                    maxY: t.maxY,\n                    minYArr: t.minYArr,\n                    maxYArr: t.maxYArr,\n                    yAxisScale: t.yAxisScale\n                };\n            }\n        },\n        {\n            key: \"setXRange\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config, i = \"numeric\" === e.xaxis.type || \"datetime\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided || t.noLabelsProvided || t.isXNumeric;\n                if (t.isXNumeric && function() {\n                    for(var e = 0; e < t.series.length; e++)if (t.labels[e]) for(var i = 0; i < t.labels[e].length; i++)null !== t.labels[e][i] && x.isNumber(t.labels[e][i]) && (t.maxX = Math.max(t.maxX, t.labels[e][i]), t.initialMaxX = Math.max(t.maxX, t.labels[e][i]), t.minX = Math.min(t.minX, t.labels[e][i]), t.initialMinX = Math.min(t.minX, t.labels[e][i]));\n                }(), t.noLabelsProvided && 0 === e.xaxis.categories.length && (t.maxX = t.labels[t.labels.length - 1], t.initialMaxX = t.labels[t.labels.length - 1], t.minX = 1, t.initialMinX = 1), t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric) {\n                    var a;\n                    if (void 0 === e.xaxis.tickAmount ? (a = Math.round(t.svgWidth / 150), \"numeric\" === e.xaxis.type && t.dataPoints < 30 && (a = t.dataPoints - 1), a > t.dataPoints && 0 !== t.dataPoints && (a = t.dataPoints - 1)) : \"dataPoints\" === e.xaxis.tickAmount ? (t.series.length > 1 && (a = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric && (a = t.maxX - t.minX - 1)) : a = e.xaxis.tickAmount, t.xTickAmount = a, void 0 !== e.xaxis.max && \"number\" == typeof e.xaxis.max && (t.maxX = e.xaxis.max), void 0 !== e.xaxis.min && \"number\" == typeof e.xaxis.min && (t.minX = e.xaxis.min), void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range), t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE) if (e.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {\n                        for(var s = [], r = t.minX - 1; r < t.maxX; r++)s.push(r + 1);\n                        t.xAxisScale = {\n                            result: s,\n                            niceMin: s[0],\n                            niceMax: s[s.length - 1]\n                        };\n                    } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);\n                    else t.xAxisScale = this.scales.linearScale(0, a, a, 0, e.xaxis.stepSize), t.noLabelsProvided && t.labels.length > 0 && (t.xAxisScale = this.scales.linearScale(1, t.labels.length, a - 1, 0, e.xaxis.stepSize), t.seriesX = t.labels.slice());\n                    i && (t.labels = t.xAxisScale.result.slice());\n                }\n                return t.isBarHorizontal && t.labels.length && (t.xTickAmount = t.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {\n                    minX: t.minX,\n                    maxX: t.maxX\n                };\n            }\n        },\n        {\n            key: \"setZRange\",\n            value: function() {\n                var t = this.w.globals;\n                if (t.isDataXYZ) {\n                    for(var e = 0; e < t.series.length; e++)if (void 0 !== t.seriesZ[e]) for(var i = 0; i < t.seriesZ[e].length; i++)null !== t.seriesZ[e][i] && x.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));\n                }\n            }\n        },\n        {\n            key: \"_handleSingleDataPoint\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config;\n                if (t.minX === t.maxX) {\n                    var i = new I(this.ctx);\n                    if (\"datetime\" === e.xaxis.type) {\n                        var a = i.getDate(t.minX);\n                        e.xaxis.labels.datetimeUTC ? a.setUTCDate(a.getUTCDate() - 2) : a.setDate(a.getDate() - 2), t.minX = new Date(a).getTime();\n                        var s = i.getDate(t.maxX);\n                        e.xaxis.labels.datetimeUTC ? s.setUTCDate(s.getUTCDate() + 2) : s.setDate(s.getDate() + 2), t.maxX = new Date(s).getTime();\n                    } else (\"numeric\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided) && (t.minX = t.minX - 2, t.initialMinX = t.minX, t.maxX = t.maxX + 2, t.initialMaxX = t.maxX);\n                }\n            }\n        },\n        {\n            key: \"_getMinXDiff\",\n            value: function() {\n                var t = this.w.globals;\n                t.isXNumeric && t.seriesX.forEach(function(e, i) {\n                    1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);\n                    var a = e.slice();\n                    a.sort(function(t, e) {\n                        return t - e;\n                    }), a.forEach(function(e, i) {\n                        if (i > 0) {\n                            var s = e - a[i - 1];\n                            s > 0 && (t.minXDiff = Math.min(s, t.minXDiff));\n                        }\n                    }), 1 !== t.dataPoints && t.minXDiff !== Number.MAX_VALUE || (t.minXDiff = .5);\n                });\n            }\n        },\n        {\n            key: \"_setStackedMinMax\",\n            value: function() {\n                var t = this, e = this.w.globals;\n                if (e.series.length) {\n                    var i = e.seriesGroups;\n                    i.length || (i = [\n                        this.w.config.series.map(function(t) {\n                            return t.name;\n                        })\n                    ]);\n                    var a = {}, s = {};\n                    i.forEach(function(i) {\n                        a[i] = [], s[i] = [], t.w.config.series.map(function(t, e) {\n                            return i.indexOf(t.name) > -1 ? e : null;\n                        }).filter(function(t) {\n                            return null !== t;\n                        }).forEach(function(r) {\n                            for(var o = 0; o < e.series[e.maxValsInArrayIndex].length; o++){\n                                var n, l;\n                                void 0 === a[i][o] && (a[i][o] = 0, s[i][o] = 0), (t.w.config.chart.stacked && !e.comboCharts || t.w.config.chart.stacked && e.comboCharts && (!t.w.config.chart.stackOnlyBar || \"bar\" === (null === (n = t.w.config.series) || void 0 === n || null === (l = n[r]) || void 0 === l ? void 0 : l.type))) && null !== e.series[r][o] && x.isNumber(e.series[r][o]) && (e.series[r][o] > 0 ? a[i][o] += parseFloat(e.series[r][o]) + 1e-4 : s[i][o] += parseFloat(e.series[r][o]));\n                            }\n                        });\n                    }), Object.entries(a).forEach(function(t) {\n                        var i = g(t, 1)[0];\n                        a[i].forEach(function(t, r) {\n                            e.maxY = Math.max(e.maxY, a[i][r]), e.minY = Math.min(e.minY, s[i][r]);\n                        });\n                    });\n                }\n            }\n        }\n    ]), t;\n}(), q = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = e, this.elgrid = i, this.w = e.w;\n        var s = this.w;\n        this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.axisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = \"bar\" === s.config.chart.type && s.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, \"bottom\" === s.config.xaxis.position && (this.xAxisoffX = s.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new B(e);\n    }\n    return r(t, [\n        {\n            key: \"drawYaxis\",\n            value: function(t) {\n                var e = this, i = this.w, a = new m(this.ctx), s = i.config.yaxis[t].labels.style, r = s.fontSize, o = s.fontFamily, n = s.fontWeight, l = a.group({\n                    class: \"apexcharts-yaxis\",\n                    rel: t,\n                    transform: \"translate(\" + i.globals.translateYAxisX[t] + \", 0)\"\n                });\n                if (this.axesUtils.isYAxisHidden(t)) return l;\n                var h = a.group({\n                    class: \"apexcharts-yaxis-texts-g\"\n                });\n                l.add(h);\n                var c = i.globals.yAxisScale[t].result.length - 1, d = i.globals.gridHeight / c, g = i.globals.translateY, u = i.globals.yLabelFormatters[t], p = i.globals.yAxisScale[t].result.slice();\n                p = this.axesUtils.checkForReversedLabels(t, p);\n                var f = \"\";\n                if (i.config.yaxis[t].labels.show) for(var x = function(l) {\n                    var x = p[l];\n                    x = u(x, l, i);\n                    var b = i.config.yaxis[t].labels.padding;\n                    i.config.yaxis[t].opposite && 0 !== i.config.yaxis.length && (b *= -1);\n                    var v = \"end\";\n                    i.config.yaxis[t].opposite && (v = \"start\"), \"left\" === i.config.yaxis[t].labels.align ? v = \"start\" : \"center\" === i.config.yaxis[t].labels.align ? v = \"middle\" : \"right\" === i.config.yaxis[t].labels.align && (v = \"end\");\n                    var m = e.axesUtils.getYAxisForeColor(s.colors, t), y = i.config.yaxis[t].labels.offsetY;\n                    \"heatmap\" === i.config.chart.type && (y -= (i.globals.gridHeight / i.globals.series.length - 1) / 2);\n                    var w = a.drawText({\n                        x: b,\n                        y: g + c / 10 + y + 1,\n                        text: x,\n                        textAnchor: v,\n                        fontSize: r,\n                        fontFamily: o,\n                        fontWeight: n,\n                        maxWidth: i.config.yaxis[t].labels.maxWidth,\n                        foreColor: Array.isArray(m) ? m[l] : m,\n                        isPlainText: !1,\n                        cssClass: \"apexcharts-yaxis-label \" + s.cssClass\n                    });\n                    l === c && (f = w), h.add(w);\n                    var k = document.createElementNS(i.globals.SVGNS, \"title\");\n                    if (k.textContent = Array.isArray(x) ? x.join(\" \") : x, w.node.appendChild(k), 0 !== i.config.yaxis[t].labels.rotate) {\n                        var A = a.rotateAroundCenter(f.node), S = a.rotateAroundCenter(w.node);\n                        w.node.setAttribute(\"transform\", \"rotate(\".concat(i.config.yaxis[t].labels.rotate, \" \").concat(A.x, \" \").concat(S.y, \")\"));\n                    }\n                    g += d;\n                }, b = c; b >= 0; b--)x(b);\n                if (void 0 !== i.config.yaxis[t].title.text) {\n                    var v = a.group({\n                        class: \"apexcharts-yaxis-title\"\n                    }), y = 0;\n                    i.config.yaxis[t].opposite && (y = i.globals.translateYAxisX[t]);\n                    var w = a.drawText({\n                        x: y,\n                        y: i.globals.gridHeight / 2 + i.globals.translateY + i.config.yaxis[t].title.offsetY,\n                        text: i.config.yaxis[t].title.text,\n                        textAnchor: \"end\",\n                        foreColor: i.config.yaxis[t].title.style.color,\n                        fontSize: i.config.yaxis[t].title.style.fontSize,\n                        fontWeight: i.config.yaxis[t].title.style.fontWeight,\n                        fontFamily: i.config.yaxis[t].title.style.fontFamily,\n                        cssClass: \"apexcharts-yaxis-title-text \" + i.config.yaxis[t].title.style.cssClass\n                    });\n                    v.add(w), l.add(v);\n                }\n                var k = i.config.yaxis[t].axisBorder, A = 31 + k.offsetX;\n                if (i.config.yaxis[t].opposite && (A = -31 - k.offsetX), k.show) {\n                    var S = a.drawLine(A, i.globals.translateY + k.offsetY - 2, A, i.globals.gridHeight + i.globals.translateY + k.offsetY + 2, k.color, 0, k.width);\n                    l.add(S);\n                }\n                return i.config.yaxis[t].axisTicks.show && this.axesUtils.drawYAxisTicks(A, c, k, i.config.yaxis[t].axisTicks, t, d, l), l;\n            }\n        },\n        {\n            key: \"drawYaxisInversed\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = i.group({\n                    class: \"apexcharts-xaxis apexcharts-yaxis-inversed\"\n                }), s = i.group({\n                    class: \"apexcharts-xaxis-texts-g\",\n                    transform: \"translate(\".concat(e.globals.translateXAxisX, \", \").concat(e.globals.translateXAxisY, \")\")\n                });\n                a.add(s);\n                var r = e.globals.yAxisScale[t].result.length - 1, o = e.globals.gridWidth / r + .1, n = o + e.config.xaxis.labels.offsetX, l = e.globals.xLabelFormatter, h = e.globals.yAxisScale[t].result.slice(), c = e.globals.timescaleLabels;\n                c.length > 0 && (this.xaxisLabels = c.slice(), r = (h = c.slice()).length), h = this.axesUtils.checkForReversedLabels(t, h);\n                var d = c.length;\n                if (e.config.xaxis.labels.show) for(var g = d ? 0 : r; d ? g < d : g >= 0; d ? g++ : g--){\n                    var u = h[g];\n                    u = l(u, g, e);\n                    var p = e.globals.gridWidth + e.globals.padHorizontal - (n - o + e.config.xaxis.labels.offsetX);\n                    if (c.length) {\n                        var f = this.axesUtils.getLabel(h, c, p, g, this.drawnLabels, this.xaxisFontSize);\n                        p = f.x, u = f.text, this.drawnLabels.push(f.text), 0 === g && e.globals.skipFirstTimelinelabel && (u = \"\"), g === h.length - 1 && e.globals.skipLastTimelinelabel && (u = \"\");\n                    }\n                    var x = i.drawText({\n                        x: p,\n                        y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30 - (\"top\" === e.config.xaxis.position ? e.globals.xAxisHeight + e.config.xaxis.axisTicks.height - 2 : 0),\n                        text: u,\n                        textAnchor: \"middle\",\n                        foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,\n                        fontSize: this.xaxisFontSize,\n                        fontFamily: this.xaxisFontFamily,\n                        fontWeight: e.config.xaxis.labels.style.fontWeight,\n                        isPlainText: !1,\n                        cssClass: \"apexcharts-xaxis-label \" + e.config.xaxis.labels.style.cssClass\n                    });\n                    s.add(x), x.tspan(u);\n                    var b = document.createElementNS(e.globals.SVGNS, \"title\");\n                    b.textContent = u, x.node.appendChild(b), n += o;\n                }\n                return this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a;\n            }\n        },\n        {\n            key: \"inversedYAxisBorder\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = e.config.xaxis.axisBorder;\n                if (a.show) {\n                    var s = 0;\n                    \"bar\" === e.config.chart.type && e.globals.isXNumeric && (s -= 15);\n                    var r = i.drawLine(e.globals.padHorizontal + s + a.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, a.color, 0, a.height);\n                    this.elgrid && this.elgrid.elGridBorders && e.config.grid.show ? this.elgrid.elGridBorders.add(r) : t.add(r);\n                }\n            }\n        },\n        {\n            key: \"inversedYAxisTitleText\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx);\n                if (void 0 !== e.config.xaxis.title.text) {\n                    var a = i.group({\n                        class: \"apexcharts-xaxis-title apexcharts-yaxis-title-inversed\"\n                    }), s = i.drawText({\n                        x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,\n                        y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + e.config.xaxis.title.offsetY + 20,\n                        text: e.config.xaxis.title.text,\n                        textAnchor: \"middle\",\n                        fontSize: e.config.xaxis.title.style.fontSize,\n                        fontFamily: e.config.xaxis.title.style.fontFamily,\n                        fontWeight: e.config.xaxis.title.style.fontWeight,\n                        foreColor: e.config.xaxis.title.style.color,\n                        cssClass: \"apexcharts-xaxis-title-text \" + e.config.xaxis.title.style.cssClass\n                    });\n                    a.add(s), t.add(a);\n                }\n            }\n        },\n        {\n            key: \"yAxisTitleRotate\",\n            value: function(t, e) {\n                var i = this.w, a = new m(this.ctx), s = {\n                    width: 0,\n                    height: 0\n                }, r = {\n                    width: 0,\n                    height: 0\n                }, o = i.globals.dom.baseEl.querySelector(\" .apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-texts-g\"));\n                null !== o && (s = o.getBoundingClientRect());\n                var n = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-title text\"));\n                if (null !== n && (r = n.getBoundingClientRect()), null !== n) {\n                    var l = this.xPaddingForYAxisTitle(t, s, r, e);\n                    n.setAttribute(\"x\", l.xPos - (e ? 10 : 0));\n                }\n                if (null !== n) {\n                    var h = a.rotateAroundCenter(n);\n                    n.setAttribute(\"transform\", \"rotate(\".concat(e ? -1 * i.config.yaxis[t].title.rotate : i.config.yaxis[t].title.rotate, \" \").concat(h.x, \" \").concat(h.y, \")\"));\n                }\n            }\n        },\n        {\n            key: \"xPaddingForYAxisTitle\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = 0, o = 0, n = 10;\n                return void 0 === s.config.yaxis[t].title.text || t < 0 ? {\n                    xPos: o,\n                    padd: 0\n                } : (a ? (o = e.width + s.config.yaxis[t].title.offsetX + i.width / 2 + n / 2, 0 === (r += 1) && (o -= n / 2)) : (o = -1 * e.width + s.config.yaxis[t].title.offsetX + n / 2 + i.width / 2, s.globals.isBarHorizontal && (n = 25, o = -1 * e.width - s.config.yaxis[t].title.offsetX - n)), {\n                    xPos: o,\n                    padd: n\n                });\n            }\n        },\n        {\n            key: \"setYAxisXPosition\",\n            value: function(t, e) {\n                var i = this.w, a = 0, s = 0, r = 18, o = 1;\n                i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.map(function(n, l) {\n                    var h = i.globals.ignoreYAxisIndexes.indexOf(l) > -1 || !n.show || n.floating || 0 === t[l].width, c = t[l].width + e[l].width;\n                    n.opposite ? i.globals.isBarHorizontal ? (s = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = s - n.labels.offsetX) : (s = i.globals.gridWidth + i.globals.translateX + o, h || (o = o + c + 20), i.globals.translateYAxisX[l] = s - n.labels.offsetX + 20) : (a = i.globals.translateX - r, h || (r = r + c + 20), i.globals.translateYAxisX[l] = a + n.labels.offsetX);\n                });\n            }\n        },\n        {\n            key: \"setYAxisTextAlignments\",\n            value: function() {\n                var t = this.w, e = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-yaxis\");\n                (e = x.listToArray(e)).forEach(function(e, i) {\n                    var a = t.config.yaxis[i];\n                    if (a && !a.floating && void 0 !== a.labels.align) {\n                        var s = t.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-texts-g\")), r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-label\"));\n                        r = x.listToArray(r);\n                        var o = s.getBoundingClientRect();\n                        \"left\" === a.labels.align ? (r.forEach(function(t, e) {\n                            t.setAttribute(\"text-anchor\", \"start\");\n                        }), a.opposite || s.setAttribute(\"transform\", \"translate(-\".concat(o.width, \", 0)\"))) : \"center\" === a.labels.align ? (r.forEach(function(t, e) {\n                            t.setAttribute(\"text-anchor\", \"middle\");\n                        }), s.setAttribute(\"transform\", \"translate(\".concat(o.width / 2 * (a.opposite ? 1 : -1), \", 0)\"))) : \"right\" === a.labels.align && (r.forEach(function(t, e) {\n                            t.setAttribute(\"text-anchor\", \"end\");\n                        }), a.opposite && s.setAttribute(\"transform\", \"translate(\".concat(o.width, \", 0)\")));\n                    }\n                });\n            }\n        }\n    ]), t;\n}(), Z = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.documentEvent = x.bind(this.documentEvent, this);\n    }\n    return r(t, [\n        {\n            key: \"addEventListener\",\n            value: function(t, e) {\n                var i = this.w;\n                i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [\n                    e\n                ];\n            }\n        },\n        {\n            key: \"removeEventListener\",\n            value: function(t, e) {\n                var i = this.w;\n                if (i.globals.events.hasOwnProperty(t)) {\n                    var a = i.globals.events[t].indexOf(e);\n                    -1 !== a && i.globals.events[t].splice(a, 1);\n                }\n            }\n        },\n        {\n            key: \"fireEvent\",\n            value: function(t, e) {\n                var i = this.w;\n                if (i.globals.events.hasOwnProperty(t)) {\n                    e && e.length || (e = []);\n                    for(var a = i.globals.events[t], s = a.length, r = 0; r < s; r++)a[r].apply(null, e);\n                }\n            }\n        },\n        {\n            key: \"setupEventHandlers\",\n            value: function() {\n                var t = this, e = this.w, i = this.ctx, a = e.globals.dom.baseEl.querySelector(e.globals.chartClass);\n                this.ctx.eventList.forEach(function(t) {\n                    a.addEventListener(t, function(t) {\n                        var a = Object.assign({}, e, {\n                            seriesIndex: e.globals.capturedSeriesIndex,\n                            dataPointIndex: e.globals.capturedDataPointIndex\n                        });\n                        \"mousemove\" === t.type || \"touchmove\" === t.type ? \"function\" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(t, i, a) : \"mouseleave\" === t.type || \"touchleave\" === t.type ? \"function\" == typeof e.config.chart.events.mouseLeave && e.config.chart.events.mouseLeave(t, i, a) : (\"mouseup\" === t.type && 1 === t.which || \"touchend\" === t.type) && (\"function\" == typeof e.config.chart.events.click && e.config.chart.events.click(t, i, a), i.ctx.events.fireEvent(\"click\", [\n                            t,\n                            i,\n                            a\n                        ]));\n                    }, {\n                        capture: !1,\n                        passive: !0\n                    });\n                }), this.ctx.eventList.forEach(function(i) {\n                    e.globals.dom.baseEl.addEventListener(i, t.documentEvent, {\n                        passive: !0\n                    });\n                }), this.ctx.core.setupBrushHandler();\n            }\n        },\n        {\n            key: \"documentEvent\",\n            value: function(t) {\n                var e = this.w, i = t.target.className;\n                if (\"click\" === t.type) {\n                    var a = e.globals.dom.baseEl.querySelector(\".apexcharts-menu\");\n                    a && a.classList.contains(\"apexcharts-menu-open\") && \"apexcharts-menu-icon\" !== i && a.classList.remove(\"apexcharts-menu-open\");\n                }\n                e.globals.clientX = \"touchmove\" === t.type ? t.touches[0].clientX : t.clientX, e.globals.clientY = \"touchmove\" === t.type ? t.touches[0].clientY : t.clientY;\n            }\n        }\n    ]), t;\n}(), $ = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"setCurrentLocaleValues\",\n            value: function(t) {\n                var e = this.w.config.chart.locales;\n                window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));\n                var i = e.filter(function(e) {\n                    return e.name === t;\n                })[0];\n                if (!i) throw new Error(\"Wrong locale name provided. Please make sure you set the correct locale name in options\");\n                var a = x.extend(C, i);\n                this.w.globals.locale = a.options;\n            }\n        }\n    ]), t;\n}(), J = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"drawAxis\",\n            value: function(t, e) {\n                var i, a, s = this, r = this.w.globals, o = this.w.config, n = new V(this.ctx, e), l = new q(this.ctx, e);\n                r.axisCharts && \"radar\" !== t && (r.isBarHorizontal ? (a = l.drawYaxisInversed(0), i = n.drawXaxisInversed(0), r.dom.elGraphical.add(i), r.dom.elGraphical.add(a)) : (i = n.drawXaxis(), r.dom.elGraphical.add(i), o.yaxis.map(function(t, e) {\n                    if (-1 === r.ignoreYAxisIndexes.indexOf(e) && (a = l.drawYaxis(e), r.dom.Paper.add(a), \"back\" === s.w.config.grid.position)) {\n                        var i = r.dom.Paper.children()[1];\n                        i.remove(), r.dom.Paper.add(i);\n                    }\n                })));\n            }\n        }\n    ]), t;\n}(), Q = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"drawXCrosshairs\",\n            value: function() {\n                var t = this.w, e = new m(this.ctx), i = new v(this.ctx), a = t.config.xaxis.crosshairs.fill.gradient, s = t.config.xaxis.crosshairs.dropShadow, r = t.config.xaxis.crosshairs.fill.type, o = a.colorFrom, n = a.colorTo, l = a.opacityFrom, h = a.opacityTo, c = a.stops, d = s.enabled, g = s.left, u = s.top, p = s.blur, f = s.color, b = s.opacity, y = t.config.xaxis.crosshairs.fill.color;\n                if (t.config.xaxis.crosshairs.show) {\n                    \"gradient\" === r && (y = e.drawGradient(\"vertical\", o, n, l, h, null, c, null));\n                    var w = e.drawRect();\n                    1 === t.config.xaxis.crosshairs.width && (w = e.drawLine());\n                    var k = t.globals.gridHeight;\n                    (!x.isNumber(k) || k < 0) && (k = 0);\n                    var A = t.config.xaxis.crosshairs.width;\n                    (!x.isNumber(A) || A < 0) && (A = 0), w.attr({\n                        class: \"apexcharts-xcrosshairs\",\n                        x: 0,\n                        y: 0,\n                        y2: k,\n                        width: A,\n                        height: k,\n                        fill: y,\n                        filter: \"none\",\n                        \"fill-opacity\": t.config.xaxis.crosshairs.opacity,\n                        stroke: t.config.xaxis.crosshairs.stroke.color,\n                        \"stroke-width\": t.config.xaxis.crosshairs.stroke.width,\n                        \"stroke-dasharray\": t.config.xaxis.crosshairs.stroke.dashArray\n                    }), d && (w = i.dropShadow(w, {\n                        left: g,\n                        top: u,\n                        blur: p,\n                        color: f,\n                        opacity: b\n                    })), t.globals.dom.elGraphical.add(w);\n                }\n            }\n        },\n        {\n            key: \"drawYCrosshairs\",\n            value: function() {\n                var t = this.w, e = new m(this.ctx), i = t.config.yaxis[0].crosshairs, a = t.globals.barPadForNumericAxis;\n                if (t.config.yaxis[0].crosshairs.show) {\n                    var s = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);\n                    s.attr({\n                        class: \"apexcharts-ycrosshairs\"\n                    }), t.globals.dom.elGraphical.add(s);\n                }\n                var r = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, 0, 0);\n                r.attr({\n                    class: \"apexcharts-ycrosshairs-hidden\"\n                }), t.globals.dom.elGraphical.add(r);\n            }\n        }\n    ]), t;\n}(), K = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"checkResponsiveConfig\",\n            value: function(t) {\n                var e = this, i = this.w, a = i.config;\n                if (0 !== a.responsive.length) {\n                    var s = a.responsive.slice();\n                    s.sort(function(t, e) {\n                        return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;\n                    }).reverse();\n                    var r = new E({}), o = function() {\n                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a = s[0].breakpoint, o = window.innerWidth > 0 ? window.innerWidth : screen.width;\n                        if (o > a) {\n                            var n = y.extendArrayProps(r, i.globals.initialConfig, i);\n                            t = x.extend(n, t), t = x.extend(i.config, t), e.overrideResponsiveOptions(t);\n                        } else for(var l = 0; l < s.length; l++)o < s[l].breakpoint && (t = y.extendArrayProps(r, s[l].options, i), t = x.extend(i.config, t), e.overrideResponsiveOptions(t));\n                    };\n                    if (t) {\n                        var n = y.extendArrayProps(r, t, i);\n                        n = x.extend(i.config, n), o(n = x.extend(n, t));\n                    } else o({});\n                }\n            }\n        },\n        {\n            key: \"overrideResponsiveOptions\",\n            value: function(t) {\n                var e = new E(t).init({\n                    responsiveOverride: !0\n                });\n                this.w.config = e;\n            }\n        }\n    ]), t;\n}(), tt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.colors = [], this.w = e.w;\n        var i = this.w;\n        this.isColorFn = !1, this.isHeatmapDistributed = \"treemap\" === i.config.chart.type && i.config.plotOptions.treemap.distributed || \"heatmap\" === i.config.chart.type && i.config.plotOptions.heatmap.distributed, this.isBarDistributed = i.config.plotOptions.bar.distributed && (\"bar\" === i.config.chart.type || \"rangeBar\" === i.config.chart.type);\n    }\n    return r(t, [\n        {\n            key: \"init\",\n            value: function() {\n                this.setDefaultColors();\n            }\n        },\n        {\n            key: \"setDefaultColors\",\n            value: function() {\n                var t, e = this, i = this.w, a = new x;\n                if (i.globals.dom.elWrap.classList.add(\"apexcharts-theme-\".concat(i.config.theme.mode)), void 0 === i.config.colors || 0 === (null === (t = i.config.colors) || void 0 === t ? void 0 : t.length) ? i.globals.colors = this.predefined() : (i.globals.colors = i.config.colors, Array.isArray(i.config.colors) && i.config.colors.length > 0 && \"function\" == typeof i.config.colors[0] && (i.globals.colors = i.config.series.map(function(t, a) {\n                    var s = i.config.colors[a];\n                    return s || (s = i.config.colors[0]), \"function\" == typeof s ? (e.isColorFn = !0, s({\n                        value: i.globals.axisCharts ? i.globals.series[a][0] ? i.globals.series[a][0] : 0 : i.globals.series[a],\n                        seriesIndex: a,\n                        dataPointIndex: a,\n                        w: i\n                    })) : s;\n                }))), i.globals.seriesColors.map(function(t, e) {\n                    t && (i.globals.colors[e] = t);\n                }), i.config.theme.monochrome.enabled) {\n                    var s = [], r = i.globals.series.length;\n                    (this.isBarDistributed || this.isHeatmapDistributed) && (r = i.globals.series[0].length * i.globals.series.length);\n                    for(var o = i.config.theme.monochrome.color, n = 1 / (r / i.config.theme.monochrome.shadeIntensity), l = i.config.theme.monochrome.shadeTo, h = 0, c = 0; c < r; c++){\n                        var d = void 0;\n                        \"dark\" === l ? (d = a.shadeColor(-1 * h, o), h += n) : (d = a.shadeColor(h, o), h += n), s.push(d);\n                    }\n                    i.globals.colors = s.slice();\n                }\n                var g = i.globals.colors.slice();\n                this.pushExtraColors(i.globals.colors);\n                [\n                    \"fill\",\n                    \"stroke\"\n                ].forEach(function(t) {\n                    void 0 === i.config[t].colors ? i.globals[t].colors = e.isColorFn ? i.config.colors : g : i.globals[t].colors = i.config[t].colors.slice(), e.pushExtraColors(i.globals[t].colors);\n                }), void 0 === i.config.dataLabels.style.colors ? i.globals.dataLabels.style.colors = g : i.globals.dataLabels.style.colors = i.config.dataLabels.style.colors.slice(), this.pushExtraColors(i.globals.dataLabels.style.colors, 50), void 0 === i.config.plotOptions.radar.polygons.fill.colors ? i.globals.radarPolygons.fill.colors = [\n                    \"dark\" === i.config.theme.mode ? \"#424242\" : \"none\"\n                ] : i.globals.radarPolygons.fill.colors = i.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(i.globals.radarPolygons.fill.colors, 20), void 0 === i.config.markers.colors ? i.globals.markers.colors = g : i.globals.markers.colors = i.config.markers.colors.slice(), this.pushExtraColors(i.globals.markers.colors);\n            }\n        },\n        {\n            key: \"pushExtraColors\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = this.w, s = e || a.globals.series.length;\n                if (null === i && (i = this.isBarDistributed || this.isHeatmapDistributed || \"heatmap\" === a.config.chart.type && a.config.plotOptions.heatmap.colorScale.inverse), i && a.globals.series.length && (s = a.globals.series[a.globals.maxValsInArrayIndex].length * a.globals.series.length), t.length < s) for(var r = s - t.length, o = 0; o < r; o++)t.push(t[o]);\n            }\n        },\n        {\n            key: \"updateThemeOptions\",\n            value: function(t) {\n                t.chart = t.chart || {}, t.tooltip = t.tooltip || {};\n                var e = t.theme.mode || \"light\", i = t.theme.palette ? t.theme.palette : \"dark\" === e ? \"palette4\" : \"palette1\", a = t.chart.foreColor ? t.chart.foreColor : \"dark\" === e ? \"#f6f7f8\" : \"#373d3f\";\n                return t.tooltip.theme = e, t.chart.foreColor = a, t.theme.palette = i, t;\n            }\n        },\n        {\n            key: \"predefined\",\n            value: function() {\n                switch(this.w.config.theme.palette){\n                    case \"palette1\":\n                    default:\n                        this.colors = [\n                            \"#008FFB\",\n                            \"#00E396\",\n                            \"#FEB019\",\n                            \"#FF4560\",\n                            \"#775DD0\"\n                        ];\n                        break;\n                    case \"palette2\":\n                        this.colors = [\n                            \"#3f51b5\",\n                            \"#03a9f4\",\n                            \"#4caf50\",\n                            \"#f9ce1d\",\n                            \"#FF9800\"\n                        ];\n                        break;\n                    case \"palette3\":\n                        this.colors = [\n                            \"#33b2df\",\n                            \"#546E7A\",\n                            \"#d4526e\",\n                            \"#13d8aa\",\n                            \"#A5978B\"\n                        ];\n                        break;\n                    case \"palette4\":\n                        this.colors = [\n                            \"#4ecdc4\",\n                            \"#c7f464\",\n                            \"#81D4FA\",\n                            \"#fd6a6a\",\n                            \"#546E7A\"\n                        ];\n                        break;\n                    case \"palette5\":\n                        this.colors = [\n                            \"#2b908f\",\n                            \"#f9a3a4\",\n                            \"#90ee7e\",\n                            \"#fa4443\",\n                            \"#69d2e7\"\n                        ];\n                        break;\n                    case \"palette6\":\n                        this.colors = [\n                            \"#449DD1\",\n                            \"#F86624\",\n                            \"#EA3546\",\n                            \"#662E9B\",\n                            \"#C5D86D\"\n                        ];\n                        break;\n                    case \"palette7\":\n                        this.colors = [\n                            \"#D7263D\",\n                            \"#1B998B\",\n                            \"#2E294E\",\n                            \"#F46036\",\n                            \"#E2C044\"\n                        ];\n                        break;\n                    case \"palette8\":\n                        this.colors = [\n                            \"#662E9B\",\n                            \"#F86624\",\n                            \"#F9C80E\",\n                            \"#EA3546\",\n                            \"#43BCCD\"\n                        ];\n                        break;\n                    case \"palette9\":\n                        this.colors = [\n                            \"#5C4742\",\n                            \"#A5978B\",\n                            \"#8D5B4C\",\n                            \"#5A2A27\",\n                            \"#C4BBAF\"\n                        ];\n                        break;\n                    case \"palette10\":\n                        this.colors = [\n                            \"#A300D6\",\n                            \"#7D02EB\",\n                            \"#5653FE\",\n                            \"#2983FF\",\n                            \"#00B1F2\"\n                        ];\n                }\n                return this.colors;\n            }\n        }\n    ]), t;\n}(), et = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function() {\n                this.drawTitleSubtitle(\"title\"), this.drawTitleSubtitle(\"subtitle\");\n            }\n        },\n        {\n            key: \"drawTitleSubtitle\",\n            value: function(t) {\n                var e = this.w, i = \"title\" === t ? e.config.title : e.config.subtitle, a = e.globals.svgWidth / 2, s = i.offsetY, r = \"middle\";\n                if (\"left\" === i.align ? (a = 10, r = \"start\") : \"right\" === i.align && (a = e.globals.svgWidth - 10, r = \"end\"), a += i.offsetX, s = s + parseInt(i.style.fontSize, 10) + i.margin / 2, void 0 !== i.text) {\n                    var o = new m(this.ctx).drawText({\n                        x: a,\n                        y: s,\n                        text: i.text,\n                        textAnchor: r,\n                        fontSize: i.style.fontSize,\n                        fontFamily: i.style.fontFamily,\n                        fontWeight: i.style.fontWeight,\n                        foreColor: i.style.color,\n                        opacity: 1\n                    });\n                    o.node.setAttribute(\"class\", \"apexcharts-\".concat(t, \"-text\")), e.globals.dom.Paper.add(o);\n                }\n            }\n        }\n    ]), t;\n}(), it = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"getTitleSubtitleCoords\",\n            value: function(t) {\n                var e = this.w, i = 0, a = 0, s = \"title\" === t ? e.config.title.floating : e.config.subtitle.floating, r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(t, \"-text\"));\n                if (null !== r && !s) {\n                    var o = r.getBoundingClientRect();\n                    i = o.width, a = e.globals.axisCharts ? o.height + 5 : o.height;\n                }\n                return {\n                    width: i,\n                    height: a\n                };\n            }\n        },\n        {\n            key: \"getLegendsRect\",\n            value: function() {\n                var t = this.w, e = t.globals.dom.elLegendWrap;\n                t.config.legend.height || \"top\" !== t.config.legend.position && \"bottom\" !== t.config.legend.position || (e.style.maxHeight = t.globals.svgHeight / 2 + \"px\");\n                var i = Object.assign({}, x.getBoundingClientRect(e));\n                return null !== e && !t.config.legend.floating && t.config.legend.show ? this.dCtx.lgRect = {\n                    x: i.x,\n                    y: i.y,\n                    height: i.height,\n                    width: 0 === i.height ? 0 : i.width\n                } : this.dCtx.lgRect = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0\n                }, \"left\" !== t.config.legend.position && \"right\" !== t.config.legend.position || 1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5), this.dCtx.lgRect;\n            }\n        },\n        {\n            key: \"getLargestStringFromMultiArr\",\n            value: function(t, e) {\n                var i = t;\n                if (this.w.globals.isMultiLineX) {\n                    var a = e.map(function(t, e) {\n                        return Array.isArray(t) ? t.length : 1;\n                    }), s = Math.max.apply(Math, u(a));\n                    i = e[a.indexOf(s)];\n                }\n                return i;\n            }\n        }\n    ]), t;\n}(), at = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"getxAxisLabelsCoords\",\n            value: function() {\n                var t, e = this.w, i = e.globals.labels.slice();\n                if (e.config.xaxis.convertedCatToNumeric && 0 === i.length && (i = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0) {\n                    var a = this.getxAxisTimeScaleLabelsCoords();\n                    t = {\n                        width: a.width,\n                        height: a.height\n                    }, e.globals.rotateXLabels = !1;\n                } else {\n                    this.dCtx.lgWidthForSideLegends = \"left\" !== e.config.legend.position && \"right\" !== e.config.legend.position || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;\n                    var s = e.globals.xLabelFormatter, r = x.getLargestStringFromArr(i), o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, i);\n                    e.globals.isBarHorizontal && (o = r = e.globals.yAxisScale[0].result.reduce(function(t, e) {\n                        return t.length > e.length ? t : e;\n                    }, 0));\n                    var n = new T(this.dCtx.ctx), l = r;\n                    r = n.xLabelFormat(s, r, l, {\n                        i: void 0,\n                        dateFormatter: new I(this.dCtx.ctx).formatDate,\n                        w: e\n                    }), o = n.xLabelFormat(s, o, l, {\n                        i: void 0,\n                        dateFormatter: new I(this.dCtx.ctx).formatDate,\n                        w: e\n                    }), (e.config.xaxis.convertedCatToNumeric && void 0 === r || \"\" === String(r).trim()) && (o = r = \"1\");\n                    var h = new m(this.dCtx.ctx), c = h.getTextRects(r, e.config.xaxis.labels.style.fontSize), d = c;\n                    if (r !== o && (d = h.getTextRects(o, e.config.xaxis.labels.style.fontSize)), (t = {\n                        width: c.width >= d.width ? c.width : d.width,\n                        height: c.height >= d.height ? c.height : d.height\n                    }).width * i.length > e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e.config.xaxis.labels.rotate || e.config.xaxis.labels.rotateAlways) {\n                        if (!e.globals.isBarHorizontal) {\n                            e.globals.rotateXLabels = !0;\n                            var g = function(t) {\n                                return h.getTextRects(t, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, \"rotate(\".concat(e.config.xaxis.labels.rotate, \" 0 0)\"), !1);\n                            };\n                            c = g(r), r !== o && (d = g(o)), t.height = (c.height > d.height ? c.height : d.height) / 1.5, t.width = c.width > d.width ? c.width : d.width;\n                        }\n                    } else e.globals.rotateXLabels = !1;\n                }\n                return e.config.xaxis.labels.show || (t = {\n                    width: 0,\n                    height: 0\n                }), {\n                    width: t.width,\n                    height: t.height\n                };\n            }\n        },\n        {\n            key: \"getxAxisGroupLabelsCoords\",\n            value: function() {\n                var t, e = this.w;\n                if (!e.globals.hasXaxisGroups) return {\n                    width: 0,\n                    height: 0\n                };\n                var i, a = (null === (t = e.config.xaxis.group.style) || void 0 === t ? void 0 : t.fontSize) || e.config.xaxis.labels.style.fontSize, s = e.globals.groups.map(function(t) {\n                    return t.title;\n                }), r = x.getLargestStringFromArr(s), o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, s), n = new m(this.dCtx.ctx), l = n.getTextRects(r, a), h = l;\n                return r !== o && (h = n.getTextRects(o, a)), i = {\n                    width: l.width >= h.width ? l.width : h.width,\n                    height: l.height >= h.height ? l.height : h.height\n                }, e.config.xaxis.labels.show || (i = {\n                    width: 0,\n                    height: 0\n                }), {\n                    width: i.width,\n                    height: i.height\n                };\n            }\n        },\n        {\n            key: \"getxAxisTitleCoords\",\n            value: function() {\n                var t = this.w, e = 0, i = 0;\n                if (void 0 !== t.config.xaxis.title.text) {\n                    var a = new m(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);\n                    e = a.width, i = a.height;\n                }\n                return {\n                    width: e,\n                    height: i\n                };\n            }\n        },\n        {\n            key: \"getxAxisTimeScaleLabelsCoords\",\n            value: function() {\n                var t, e = this.w;\n                this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();\n                var i = this.dCtx.timescaleLabels.map(function(t) {\n                    return t.value;\n                }), a = i.reduce(function(t, e) {\n                    return void 0 === t ? (console.error(\"You have possibly supplied invalid Date format. Please supply a valid JavaScript Date\"), 0) : t.length > e.length ? t : e;\n                }, 0);\n                return 1.05 * (t = new m(this.dCtx.ctx).getTextRects(a, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;\n            }\n        },\n        {\n            key: \"additionalPaddingXLabels\",\n            value: function(t) {\n                var e = this, i = this.w, a = i.globals, s = i.config, r = s.xaxis.type, o = t.width;\n                a.skipLastTimelinelabel = !1, a.skipFirstTimelinelabel = !1;\n                var n = i.config.yaxis[0].opposite && i.globals.isBarHorizontal, l = function(t, n) {\n                    s.yaxis.length > 1 && function(t) {\n                        return -1 !== a.collapsedSeriesIndices.indexOf(t);\n                    }(n) || function(t) {\n                        if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {\n                            var n = e.dCtx.timescaleLabels[0], l = e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + o / 1.75 - e.dCtx.yAxisWidthRight, h = n.position - o / 1.75 + e.dCtx.yAxisWidthLeft, c = \"right\" === i.config.legend.position && e.dCtx.lgRect.width > 0 ? e.dCtx.lgRect.width : 0;\n                            l > a.svgWidth - a.translateX - c && (a.skipLastTimelinelabel = !0), h < -(t.show && !t.floating || \"bar\" !== s.chart.type && \"candlestick\" !== s.chart.type && \"rangeBar\" !== s.chart.type && \"boxPlot\" !== s.chart.type ? 10 : o / 1.75) && (a.skipFirstTimelinelabel = !0);\n                        } else \"datetime\" === r ? e.dCtx.gridPad.right < o && !a.rotateXLabels && (a.skipLastTimelinelabel = !0) : \"datetime\" !== r && e.dCtx.gridPad.right < o / 2 - e.dCtx.yAxisWidthRight && !a.rotateXLabels && !i.config.xaxis.labels.trim && (\"between\" !== i.config.xaxis.tickPlacement || i.globals.isBarHorizontal) && (e.dCtx.xPadRight = o / 2 + 1);\n                    }(t);\n                };\n                s.yaxis.forEach(function(t, i) {\n                    n ? (e.dCtx.gridPad.left < o && (e.dCtx.xPadLeft = o / 2 + 1), e.dCtx.xPadRight = o / 2 + 1) : l(t, i);\n                });\n            }\n        }\n    ]), t;\n}(), st = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"getyAxisLabelsCoords\",\n            value: function() {\n                var t = this, e = this.w, i = [], a = 10, s = new B(this.dCtx.ctx);\n                return e.config.yaxis.map(function(r, o) {\n                    var n = {\n                        seriesIndex: o,\n                        dataPointIndex: -1,\n                        w: e\n                    }, l = e.globals.yAxisScale[o], h = 0;\n                    if (!s.isYAxisHidden(o) && r.labels.show && void 0 !== r.labels.minWidth && (h = r.labels.minWidth), !s.isYAxisHidden(o) && r.labels.show && l.result.length) {\n                        var c = e.globals.yLabelFormatters[o], d = l.niceMin === Number.MIN_VALUE ? 0 : l.niceMin, g = l.result.reduce(function(t, e) {\n                            var i, a;\n                            return (null === (i = String(c(t, n))) || void 0 === i ? void 0 : i.length) > (null === (a = String(c(e, n))) || void 0 === a ? void 0 : a.length) ? t : e;\n                        }, d), u = g = c(g, n);\n                        if (void 0 !== g && 0 !== g.length || (g = l.niceMax), e.globals.isBarHorizontal) {\n                            a = 0;\n                            var p = e.globals.labels.slice();\n                            g = x.getLargestStringFromArr(p), g = c(g, {\n                                seriesIndex: o,\n                                dataPointIndex: -1,\n                                w: e\n                            }), u = t.dCtx.dimHelpers.getLargestStringFromMultiArr(g, p);\n                        }\n                        var f = new m(t.dCtx.ctx), b = \"rotate(\".concat(r.labels.rotate, \" 0 0)\"), v = f.getTextRects(g, r.labels.style.fontSize, r.labels.style.fontFamily, b, !1), y = v;\n                        g !== u && (y = f.getTextRects(u, r.labels.style.fontSize, r.labels.style.fontFamily, b, !1)), i.push({\n                            width: (h > y.width || h > v.width ? h : y.width > v.width ? y.width : v.width) + a,\n                            height: y.height > v.height ? y.height : v.height\n                        });\n                    } else i.push({\n                        width: 0,\n                        height: 0\n                    });\n                }), i;\n            }\n        },\n        {\n            key: \"getyAxisTitleCoords\",\n            value: function() {\n                var t = this, e = this.w, i = [];\n                return e.config.yaxis.map(function(e, a) {\n                    if (e.show && void 0 !== e.title.text) {\n                        var s = new m(t.dCtx.ctx), r = \"rotate(\".concat(e.title.rotate, \" 0 0)\"), o = s.getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, r, !1);\n                        i.push({\n                            width: o.width,\n                            height: o.height\n                        });\n                    } else i.push({\n                        width: 0,\n                        height: 0\n                    });\n                }), i;\n            }\n        },\n        {\n            key: \"getTotalYAxisWidth\",\n            value: function() {\n                var t = this.w, e = 0, i = 0, a = 0, s = t.globals.yAxisScale.length > 1 ? 10 : 0, r = new B(this.dCtx.ctx), o = function(o, n) {\n                    var l = t.config.yaxis[n].floating, h = 0;\n                    o.width > 0 && !l ? (h = o.width + s, function(e) {\n                        return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;\n                    }(n) && (h = h - o.width - s)) : h = l || r.isYAxisHidden(n) ? 0 : 5, t.config.yaxis[n].opposite ? a += h : i += h, e += h;\n                };\n                return t.globals.yLabelsCoords.map(function(t, e) {\n                    o(t, e);\n                }), t.globals.yTitleCoords.map(function(t, e) {\n                    o(t, e);\n                }), t.globals.isBarHorizontal && !t.config.yaxis[0].floating && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i, this.dCtx.yAxisWidthRight = a, e;\n            }\n        }\n    ]), t;\n}(), rt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.dCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"gridPadForColumnsInNumericAxis\",\n            value: function(t) {\n                var e = this.w;\n                if (e.globals.noData || e.globals.allSeriesCollapsed) return 0;\n                var i = function(t) {\n                    return \"bar\" === t || \"rangeBar\" === t || \"candlestick\" === t || \"boxPlot\" === t;\n                }, a = e.config.chart.type, s = 0, r = i(a) ? e.config.series.length : 1;\n                if (e.globals.comboBarCount > 0 && (r = e.globals.comboBarCount), e.globals.collapsedSeries.forEach(function(t) {\n                    i(t.type) && (r -= 1);\n                }), e.config.chart.stacked && (r = 1), (i(a) || e.globals.comboBarCount > 0) && e.globals.isXNumeric && !e.globals.isBarHorizontal && r > 0) {\n                    var o, n, l = Math.abs(e.globals.initialMaxX - e.globals.initialMinX);\n                    l <= 3 && (l = e.globals.dataPoints), o = l / t, e.globals.minXDiff && e.globals.minXDiff / o > 0 && (n = e.globals.minXDiff / o), n > t / 2 && (n /= 2), (s = n / r * parseInt(e.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s = 1), s = s / (r > 1 ? 1 : 1.5) + 5, e.globals.barPadForNumericAxis = s;\n                }\n                return s;\n            }\n        },\n        {\n            key: \"gridPadFortitleSubtitle\",\n            value: function() {\n                var t = this, e = this.w, i = e.globals, a = this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;\n                [\n                    \"title\",\n                    \"subtitle\"\n                ].forEach(function(i) {\n                    void 0 !== e.config[i].text ? a += e.config[i].margin : a += t.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 5;\n                }), !e.config.legend.show || \"bottom\" !== e.config.legend.position || e.config.legend.floating || e.globals.axisCharts || (a += 10);\n                var s = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"title\"), r = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"subtitle\");\n                i.gridHeight = i.gridHeight - s.height - r.height - a, i.translateY = i.translateY + s.height + r.height + a;\n            }\n        },\n        {\n            key: \"setGridXPosForDualYAxis\",\n            value: function(t, e) {\n                var i = this.w, a = new B(this.dCtx.ctx);\n                i.config.yaxis.map(function(s, r) {\n                    -1 !== i.globals.ignoreYAxisIndexes.indexOf(r) || s.floating || a.isYAxisHidden(r) || (s.opposite && (i.globals.translateX = i.globals.translateX - (e[r].width + t[r].width) - parseInt(i.config.yaxis[r].labels.style.fontSize, 10) / 1.2 - 12), i.globals.translateX < 2 && (i.globals.translateX = 2));\n                });\n            }\n        }\n    ]), t;\n}(), ot = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new it(this), this.dimYAxis = new st(this), this.dimXAxis = new at(this), this.dimGrid = new rt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;\n    }\n    return r(t, [\n        {\n            key: \"plotCoords\",\n            value: function() {\n                var t = this, e = this.w, i = e.globals;\n                this.lgRect = this.dimHelpers.getLegendsRect(), this.isSparkline && ((e.config.markers.discrete.length > 0 || e.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e) {\n                    var i = g(e, 2), a = i[0], s = i[1];\n                    t.gridPad[a] = Math.max(s, t.w.globals.markers.largestSize / 1.5);\n                }), this.gridPad.top = Math.max(e.config.stroke.width / 2, this.gridPad.top), this.gridPad.bottom = Math.max(e.config.stroke.width / 2, this.gridPad.bottom)), i.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i.gridHeight = i.gridHeight - this.gridPad.top - this.gridPad.bottom, i.gridWidth = i.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;\n                var a = this.dimGrid.gridPadForColumnsInNumericAxis(i.gridWidth);\n                i.gridWidth = i.gridWidth - 2 * a, i.translateX = i.translateX + this.gridPad.left + this.xPadLeft + (a > 0 ? a + 4 : 0), i.translateY = i.translateY + this.gridPad.top;\n            }\n        },\n        {\n            key: \"setDimensionsForAxisCharts\",\n            value: function() {\n                var t = this, e = this.w, i = e.globals, a = this.dimYAxis.getyAxisLabelsCoords(), s = this.dimYAxis.getyAxisTitleCoords();\n                e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function(t, i) {\n                    e.globals.yLabelsCoords.push({\n                        width: a[i].width,\n                        index: i\n                    }), e.globals.yTitleCoords.push({\n                        width: s[i].width,\n                        index: i\n                    });\n                }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();\n                var r = this.dimXAxis.getxAxisLabelsCoords(), o = this.dimXAxis.getxAxisGroupLabelsCoords(), n = this.dimXAxis.getxAxisTitleCoords();\n                this.conditionalChecksForAxisCoords(r, n, o), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;\n                var l = this.yAxisWidth, h = this.xAxisHeight;\n                i.xAxisLabelsHeight = this.xAxisHeight - n.height, i.xAxisGroupLabelsHeight = i.xAxisLabelsHeight - r.height, i.xAxisLabelsWidth = this.xAxisWidth, i.xAxisHeight = this.xAxisHeight;\n                var c = 10;\n                (\"radar\" === e.config.chart.type || this.isSparkline) && (l = 0, h = i.goldenPadding), this.isSparkline && (this.lgRect = {\n                    height: 0,\n                    width: 0\n                }), (this.isSparkline || \"treemap\" === e.config.chart.type) && (l = 0, h = 0, c = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r);\n                var d = function() {\n                    i.translateX = l, i.gridHeight = i.svgHeight - t.lgRect.height - h - (t.isSparkline || \"treemap\" === e.config.chart.type ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - l;\n                };\n                switch(\"top\" === e.config.xaxis.position && (c = i.xAxisHeight - e.config.xaxis.axisTicks.height - 5), e.config.legend.position){\n                    case \"bottom\":\n                        i.translateY = c, d();\n                        break;\n                    case \"top\":\n                        i.translateY = this.lgRect.height + c, d();\n                        break;\n                    case \"left\":\n                        i.translateY = c, i.translateX = this.lgRect.width + l, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l;\n                        break;\n                    case \"right\":\n                        i.translateY = c, i.translateX = l, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l - 5;\n                        break;\n                    default:\n                        throw new Error(\"Legend position not supported\");\n                }\n                this.dimGrid.setGridXPosForDualYAxis(s, a), new q(this.ctx).setYAxisXPosition(a, s);\n            }\n        },\n        {\n            key: \"setDimensionsForNonAxisCharts\",\n            value: function() {\n                var t = this.w, e = t.globals, i = t.config, a = 0;\n                t.config.legend.show && !t.config.legend.floating && (a = 20);\n                var s = \"pie\" === i.chart.type || \"polarArea\" === i.chart.type || \"donut\" === i.chart.type ? \"pie\" : \"radialBar\", r = i.plotOptions[s].offsetY, o = i.plotOptions[s].offsetX;\n                if (!i.legend.show || i.legend.floating) return e.gridHeight = e.svgHeight - i.grid.padding.left + i.grid.padding.right, e.gridWidth = e.gridHeight, e.translateY = r, void (e.translateX = o + (e.svgWidth - e.gridWidth) / 2);\n                switch(i.legend.position){\n                    case \"bottom\":\n                        e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.svgWidth, e.translateY = r - 10, e.translateX = o + (e.svgWidth - e.gridWidth) / 2;\n                        break;\n                    case \"top\":\n                        e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.svgWidth, e.translateY = this.lgRect.height + r + 10, e.translateX = o + (e.svgWidth - e.gridWidth) / 2;\n                        break;\n                    case \"left\":\n                        e.gridWidth = e.svgWidth - this.lgRect.width - a, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = o + this.lgRect.width + a;\n                        break;\n                    case \"right\":\n                        e.gridWidth = e.svgWidth - this.lgRect.width - a - 5, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = o + 10;\n                        break;\n                    default:\n                        throw new Error(\"Legend position not supported\");\n                }\n            }\n        },\n        {\n            key: \"conditionalChecksForAxisCoords\",\n            value: function(t, e, i) {\n                var a = this.w, s = a.globals.hasXaxisGroups ? 2 : 1, r = i.height + t.height + e.height, o = a.globals.isMultiLineX ? 1.2 : a.globals.LINE_HEIGHT_RATIO, n = a.globals.rotateXLabels ? 22 : 10, l = a.globals.rotateXLabels && \"bottom\" === a.config.legend.position ? 10 : 0;\n                this.xAxisHeight = r * o + s * n + l, this.xAxisWidth = t.width, this.xAxisHeight - e.height > a.config.xaxis.labels.maxHeight && (this.xAxisHeight = a.config.xaxis.labels.maxHeight), a.config.xaxis.labels.minHeight && this.xAxisHeight < a.config.xaxis.labels.minHeight && (this.xAxisHeight = a.config.xaxis.labels.minHeight), a.config.xaxis.floating && (this.xAxisHeight = 0);\n                var h = 0, c = 0;\n                a.config.yaxis.forEach(function(t) {\n                    h += t.labels.minWidth, c += t.labels.maxWidth;\n                }), this.yAxisWidth < h && (this.yAxisWidth = h), this.yAxisWidth > c && (this.yAxisWidth = c);\n            }\n        }\n    ]), t;\n}(), nt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.lgCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"getLegendStyles\",\n            value: function() {\n                var t, e, i, a = document.createElement(\"style\");\n                a.setAttribute(\"type\", \"text/css\");\n                var s = (null === (t = this.lgCtx.ctx) || void 0 === t || null === (e = t.opts) || void 0 === e || null === (i = e.chart) || void 0 === i ? void 0 : i.nonce) || this.w.config.chart.nonce;\n                s && a.setAttribute(\"nonce\", s);\n                var r = document.createTextNode(\"\\n      .apexcharts-legend {\\n        display: flex;\\n        overflow: auto;\\n        padding: 0 10px;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\\n        flex-wrap: wrap\\n      }\\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\n        flex-direction: column;\\n        bottom: 0;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\n        justify-content: flex-start;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\\n        justify-content: center;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\\n        justify-content: flex-end;\\n      }\\n      .apexcharts-legend-series {\\n        cursor: pointer;\\n        line-height: normal;\\n      }\\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\\n        display: flex;\\n        align-items: center;\\n      }\\n      .apexcharts-legend-text {\\n        position: relative;\\n        font-size: 14px;\\n      }\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\n        pointer-events: none;\\n      }\\n      .apexcharts-legend-marker {\\n        position: relative;\\n        display: inline-block;\\n        cursor: pointer;\\n        margin-right: 3px;\\n        border-style: solid;\\n      }\\n\\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\\n        display: inline-block;\\n      }\\n      .apexcharts-legend-series.apexcharts-no-click {\\n        cursor: auto;\\n      }\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\n        display: none !important;\\n      }\\n      .apexcharts-inactive-legend {\\n        opacity: 0.45;\\n      }\");\n                return a.appendChild(r), a;\n            }\n        },\n        {\n            key: \"getLegendBBox\",\n            value: function() {\n                var t = this.w.globals.dom.baseEl.querySelector(\".apexcharts-legend\").getBoundingClientRect(), e = t.width;\n                return {\n                    clwh: t.height,\n                    clww: e\n                };\n            }\n        },\n        {\n            key: \"appendToForeignObject\",\n            value: function() {\n                this.w.globals.dom.elLegendForeign.appendChild(this.getLegendStyles());\n            }\n        },\n        {\n            key: \"toggleDataSeries\",\n            value: function(t, e) {\n                var i = this, a = this.w;\n                if (a.globals.axisCharts || \"radialBar\" === a.config.chart.type) {\n                    a.globals.resized = !0;\n                    var s = null, r = null;\n                    if (a.globals.risingSeries = [], a.globals.axisCharts ? (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\")), r = parseInt(s.getAttribute(\"data:realIndex\"), 10)) : (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(t + 1, \"']\")), r = parseInt(s.getAttribute(\"rel\"), 10) - 1), e) [\n                        {\n                            cs: a.globals.collapsedSeries,\n                            csi: a.globals.collapsedSeriesIndices\n                        },\n                        {\n                            cs: a.globals.ancillaryCollapsedSeries,\n                            csi: a.globals.ancillaryCollapsedSeriesIndices\n                        }\n                    ].forEach(function(t) {\n                        i.riseCollapsedSeries(t.cs, t.csi, r);\n                    });\n                    else this.hideSeries({\n                        seriesEl: s,\n                        realIndex: r\n                    });\n                } else {\n                    var o = a.globals.dom.Paper.select(\" .apexcharts-series[rel='\".concat(t + 1, \"'] path\")), n = a.config.chart.type;\n                    if (\"pie\" === n || \"polarArea\" === n || \"donut\" === n) {\n                        var l = a.config.plotOptions.pie.donut.labels;\n                        new m(this.lgCtx.ctx).pathMouseDown(o.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o.members[0].node, l);\n                    }\n                    o.fire(\"click\");\n                }\n            }\n        },\n        {\n            key: \"hideSeries\",\n            value: function(t) {\n                var e = t.seriesEl, i = t.realIndex, a = this.w, s = x.clone(a.config.series);\n                if (a.globals.axisCharts) {\n                    var r = !1;\n                    if (a.config.yaxis[i] && a.config.yaxis[i].show && a.config.yaxis[i].showAlways && (r = !0, a.globals.ancillaryCollapsedSeriesIndices.indexOf(i) < 0 && (a.globals.ancillaryCollapsedSeries.push({\n                        index: i,\n                        data: s[i].data.slice(),\n                        type: e.parentNode.className.baseVal.split(\"-\")[1]\n                    }), a.globals.ancillaryCollapsedSeriesIndices.push(i))), !r) {\n                        a.globals.collapsedSeries.push({\n                            index: i,\n                            data: s[i].data.slice(),\n                            type: e.parentNode.className.baseVal.split(\"-\")[1]\n                        }), a.globals.collapsedSeriesIndices.push(i);\n                        var o = a.globals.risingSeries.indexOf(i);\n                        a.globals.risingSeries.splice(o, 1);\n                    }\n                } else a.globals.collapsedSeries.push({\n                    index: i,\n                    data: s[i]\n                }), a.globals.collapsedSeriesIndices.push(i);\n                for(var n = e.childNodes, l = 0; l < n.length; l++)n[l].classList.contains(\"apexcharts-series-markers-wrap\") && (n[l].classList.contains(\"apexcharts-hide\") ? n[l].classList.remove(\"apexcharts-hide\") : n[l].classList.add(\"apexcharts-hide\"));\n                a.globals.allSeriesCollapsed = a.globals.collapsedSeries.length === a.config.series.length, s = this._getSeriesBasedOnCollapsedState(s), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n            }\n        },\n        {\n            key: \"riseCollapsedSeries\",\n            value: function(t, e, i) {\n                var a = this.w, s = x.clone(a.config.series);\n                if (t.length > 0) {\n                    for(var r = 0; r < t.length; r++)t[r].index === i && (a.globals.axisCharts ? (s[i].data = t[r].data.slice(), t.splice(r, 1), e.splice(r, 1), a.globals.risingSeries.push(i)) : (s[i] = t[r].data, t.splice(r, 1), e.splice(r, 1), a.globals.risingSeries.push(i)));\n                    s = this._getSeriesBasedOnCollapsedState(s), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n                }\n            }\n        },\n        {\n            key: \"_getSeriesBasedOnCollapsedState\",\n            value: function(t) {\n                var e = this.w;\n                return e.globals.axisCharts ? t.forEach(function(i, a) {\n                    e.globals.collapsedSeriesIndices.indexOf(a) > -1 && (t[a].data = []);\n                }) : t.forEach(function(i, a) {\n                    e.globals.collapsedSeriesIndices.indexOf(a) > -1 && (t[a] = 0);\n                }), t;\n            }\n        }\n    ]), t;\n}(), lt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = \"bar\" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new nt(this);\n    }\n    return r(t, [\n        {\n            key: \"init\",\n            value: function() {\n                var t = this.w, e = t.globals, i = t.config;\n                if ((i.legend.showForSingleSeries && 1 === e.series.length || this.isBarsDistributed || e.series.length > 1 || !e.axisCharts) && i.legend.show) {\n                    for(; e.dom.elLegendWrap.firstChild;)e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);\n                    this.drawLegends(), x.isIE11() ? document.getElementsByTagName(\"head\")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), \"bottom\" === i.legend.position || \"top\" === i.legend.position ? this.legendAlignHorizontal() : \"right\" !== i.legend.position && \"left\" !== i.legend.position || this.legendAlignVertical();\n                }\n            }\n        },\n        {\n            key: \"drawLegends\",\n            value: function() {\n                var t = this, e = this.w, i = e.config.legend.fontFamily, a = e.globals.seriesNames, s = e.globals.colors.slice();\n                if (\"heatmap\" === e.config.chart.type) {\n                    var r = e.config.plotOptions.heatmap.colorScale.ranges;\n                    a = r.map(function(t) {\n                        return t.name ? t.name : t.from + \" - \" + t.to;\n                    }), s = r.map(function(t) {\n                        return t.color;\n                    });\n                } else this.isBarsDistributed && (a = e.globals.labels.slice());\n                e.config.legend.customLegendItems.length && (a = e.config.legend.customLegendItems);\n                for(var o = e.globals.legendFormatter, n = e.config.legend.inverseOrder, l = n ? a.length - 1 : 0; n ? l >= 0 : l <= a.length - 1; n ? l-- : l++){\n                    var h, c = o(a[l], {\n                        seriesIndex: l,\n                        w: e\n                    }), d = !1, g = !1;\n                    if (e.globals.collapsedSeries.length > 0) for(var u = 0; u < e.globals.collapsedSeries.length; u++)e.globals.collapsedSeries[u].index === l && (d = !0);\n                    if (e.globals.ancillaryCollapsedSeriesIndices.length > 0) for(var p = 0; p < e.globals.ancillaryCollapsedSeriesIndices.length; p++)e.globals.ancillaryCollapsedSeriesIndices[p] === l && (g = !0);\n                    var f = document.createElement(\"span\");\n                    f.classList.add(\"apexcharts-legend-marker\");\n                    var b = e.config.legend.markers.offsetX, v = e.config.legend.markers.offsetY, w = e.config.legend.markers.height, k = e.config.legend.markers.width, A = e.config.legend.markers.strokeWidth, S = e.config.legend.markers.strokeColor, C = e.config.legend.markers.radius, L = f.style;\n                    L.background = s[l], L.color = s[l], L.setProperty(\"background\", s[l], \"important\"), e.config.legend.markers.fillColors && e.config.legend.markers.fillColors[l] && (L.background = e.config.legend.markers.fillColors[l]), void 0 !== e.globals.seriesColors[l] && (L.background = e.globals.seriesColors[l], L.color = e.globals.seriesColors[l]), L.height = Array.isArray(w) ? parseFloat(w[l]) + \"px\" : parseFloat(w) + \"px\", L.width = Array.isArray(k) ? parseFloat(k[l]) + \"px\" : parseFloat(k) + \"px\", L.left = (Array.isArray(b) ? parseFloat(b[l]) : parseFloat(b)) + \"px\", L.top = (Array.isArray(v) ? parseFloat(v[l]) : parseFloat(v)) + \"px\", L.borderWidth = Array.isArray(A) ? A[l] : A, L.borderColor = Array.isArray(S) ? S[l] : S, L.borderRadius = Array.isArray(C) ? parseFloat(C[l]) + \"px\" : parseFloat(C) + \"px\", e.config.legend.markers.customHTML && (Array.isArray(e.config.legend.markers.customHTML) ? e.config.legend.markers.customHTML[l] && (f.innerHTML = e.config.legend.markers.customHTML[l]()) : f.innerHTML = e.config.legend.markers.customHTML()), m.setAttrs(f, {\n                        rel: l + 1,\n                        \"data:collapsed\": d || g\n                    }), (d || g) && f.classList.add(\"apexcharts-inactive-legend\");\n                    var P = document.createElement(\"div\"), I = document.createElement(\"span\");\n                    I.classList.add(\"apexcharts-legend-text\"), I.innerHTML = Array.isArray(c) ? c.join(\" \") : c;\n                    var T = e.config.legend.labels.useSeriesColors ? e.globals.colors[l] : Array.isArray(e.config.legend.labels.colors) ? null === (h = e.config.legend.labels.colors) || void 0 === h ? void 0 : h[l] : e.config.legend.labels.colors;\n                    T || (T = e.config.chart.foreColor), I.style.color = T, I.style.fontSize = parseFloat(e.config.legend.fontSize) + \"px\", I.style.fontWeight = e.config.legend.fontWeight, I.style.fontFamily = i || e.config.chart.fontFamily, m.setAttrs(I, {\n                        rel: l + 1,\n                        i: l,\n                        \"data:default-text\": encodeURIComponent(c),\n                        \"data:collapsed\": d || g\n                    }), P.appendChild(f), P.appendChild(I);\n                    var M = new y(this.ctx);\n                    if (!e.config.legend.showForZeroSeries) 0 === M.getSeriesTotalByIndex(l) && M.seriesHaveSameValues(l) && !M.isSeriesNull(l) && -1 === e.globals.collapsedSeriesIndices.indexOf(l) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) && P.classList.add(\"apexcharts-hidden-zero-series\");\n                    e.config.legend.showForNullSeries || M.isSeriesNull(l) && -1 === e.globals.collapsedSeriesIndices.indexOf(l) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) && P.classList.add(\"apexcharts-hidden-null-series\"), e.globals.dom.elLegendWrap.appendChild(P), e.globals.dom.elLegendWrap.classList.add(\"apexcharts-align-\".concat(e.config.legend.horizontalAlign)), e.globals.dom.elLegendWrap.classList.add(\"apx-legend-position-\" + e.config.legend.position), P.classList.add(\"apexcharts-legend-series\"), P.style.margin = \"\".concat(e.config.legend.itemMargin.vertical, \"px \").concat(e.config.legend.itemMargin.horizontal, \"px\"), e.globals.dom.elLegendWrap.style.width = e.config.legend.width ? e.config.legend.width + \"px\" : \"\", e.globals.dom.elLegendWrap.style.height = e.config.legend.height ? e.config.legend.height + \"px\" : \"\", m.setAttrs(P, {\n                        rel: l + 1,\n                        seriesName: x.escapeString(a[l]),\n                        \"data:collapsed\": d || g\n                    }), (d || g) && P.classList.add(\"apexcharts-inactive-legend\"), e.config.legend.onItemClick.toggleDataSeries || P.classList.add(\"apexcharts-no-click\");\n                }\n                e.globals.dom.elWrap.addEventListener(\"click\", t.onLegendClick, !0), e.config.legend.onItemHover.highlightDataSeries && 0 === e.config.legend.customLegendItems.length && (e.globals.dom.elWrap.addEventListener(\"mousemove\", t.onLegendHovered, !0), e.globals.dom.elWrap.addEventListener(\"mouseout\", t.onLegendHovered, !0));\n            }\n        },\n        {\n            key: \"setLegendWrapXY\",\n            value: function(t, e) {\n                var i = this.w, a = i.globals.dom.elLegendWrap, s = a.getBoundingClientRect(), r = 0, o = 0;\n                if (\"bottom\" === i.config.legend.position) o += i.globals.svgHeight - s.height / 2;\n                else if (\"top\" === i.config.legend.position) {\n                    var n = new ot(this.ctx), l = n.dimHelpers.getTitleSubtitleCoords(\"title\").height, h = n.dimHelpers.getTitleSubtitleCoords(\"subtitle\").height;\n                    o = o + (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);\n                }\n                a.style.position = \"absolute\", r = r + t + i.config.legend.offsetX, o = o + e + i.config.legend.offsetY, a.style.left = r + \"px\", a.style.top = o + \"px\", \"bottom\" === i.config.legend.position ? (a.style.top = \"auto\", a.style.bottom = 5 - i.config.legend.offsetY + \"px\") : \"right\" === i.config.legend.position && (a.style.left = \"auto\", a.style.right = 25 + i.config.legend.offsetX + \"px\");\n                [\n                    \"width\",\n                    \"height\"\n                ].forEach(function(t) {\n                    a.style[t] && (a.style[t] = parseInt(i.config.legend[t], 10) + \"px\");\n                });\n            }\n        },\n        {\n            key: \"legendAlignHorizontal\",\n            value: function() {\n                var t = this.w;\n                t.globals.dom.elLegendWrap.style.right = 0;\n                var e = this.legendHelpers.getLegendBBox(), i = new ot(this.ctx), a = i.dimHelpers.getTitleSubtitleCoords(\"title\"), s = i.dimHelpers.getTitleSubtitleCoords(\"subtitle\"), r = 0;\n                \"bottom\" === t.config.legend.position ? r = -e.clwh / 1.8 : \"top\" === t.config.legend.position && (r = a.height + s.height + t.config.title.margin + t.config.subtitle.margin - 10), this.setLegendWrapXY(20, r);\n            }\n        },\n        {\n            key: \"legendAlignVertical\",\n            value: function() {\n                var t = this.w, e = this.legendHelpers.getLegendBBox(), i = 0;\n                \"left\" === t.config.legend.position && (i = 20), \"right\" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);\n            }\n        },\n        {\n            key: \"onLegendHovered\",\n            value: function(t) {\n                var e = this.w, i = t.target.classList.contains(\"apexcharts-legend-series\") || t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\");\n                if (\"heatmap\" === e.config.chart.type || this.isBarsDistributed) {\n                    if (i) {\n                        var a = parseInt(t.target.getAttribute(\"rel\"), 10) - 1;\n                        this.ctx.events.fireEvent(\"legendHover\", [\n                            this.ctx,\n                            a,\n                            this.w\n                        ]), new N(this.ctx).highlightRangeInSeries(t, t.target);\n                    }\n                } else !t.target.classList.contains(\"apexcharts-inactive-legend\") && i && new N(this.ctx).toggleSeriesOnHover(t, t.target);\n            }\n        },\n        {\n            key: \"onLegendClick\",\n            value: function(t) {\n                var e = this.w;\n                if (!e.config.legend.customLegendItems.length && (t.target.classList.contains(\"apexcharts-legend-series\") || t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\"))) {\n                    var i = parseInt(t.target.getAttribute(\"rel\"), 10) - 1, a = \"true\" === t.target.getAttribute(\"data:collapsed\"), s = this.w.config.chart.events.legendClick;\n                    \"function\" == typeof s && s(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendClick\", [\n                        this.ctx,\n                        i,\n                        this.w\n                    ]);\n                    var r = this.w.config.legend.markers.onClick;\n                    \"function\" == typeof r && t.target.classList.contains(\"apexcharts-legend-marker\") && (r(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendMarkerClick\", [\n                        this.ctx,\n                        i,\n                        this.w\n                    ])), \"treemap\" !== e.config.chart.type && \"heatmap\" !== e.config.chart.type && !this.isBarsDistributed && e.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i, a);\n                }\n            }\n        }\n    ]), t;\n}(), ht = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n        var i = this.w;\n        this.ev = this.w.config.chart.events, this.selectedClass = \"apexcharts-selected\", this.localeValues = this.w.globals.locale.toolbar, this.minX = i.globals.minX, this.maxX = i.globals.maxX;\n    }\n    return r(t, [\n        {\n            key: \"createToolbar\",\n            value: function() {\n                var t = this, e = this.w, i = function() {\n                    return document.createElement(\"div\");\n                }, a = i();\n                if (a.setAttribute(\"class\", \"apexcharts-toolbar\"), a.style.top = e.config.chart.toolbar.offsetY + \"px\", a.style.right = 3 - e.config.chart.toolbar.offsetX + \"px\", e.globals.dom.elWrap.appendChild(a), this.elZoom = i(), this.elZoomIn = i(), this.elZoomOut = i(), this.elPan = i(), this.elSelection = i(), this.elZoomReset = i(), this.elMenuIcon = i(), this.elMenu = i(), this.elCustomIcons = [], this.t = e.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for(var s = 0; s < this.t.customIcons.length; s++)this.elCustomIcons.push(i());\n                var r = [], o = function(i, a, s) {\n                    var o = i.toLowerCase();\n                    t.t[o] && e.config.chart.zoom.enabled && r.push({\n                        el: a,\n                        icon: \"string\" == typeof t.t[o] ? t.t[o] : s,\n                        title: t.localeValues[i],\n                        class: \"apexcharts-\".concat(o, \"-icon\")\n                    });\n                };\n                o(\"zoomIn\", this.elZoomIn, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n'), o(\"zoomOut\", this.elZoomOut, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n');\n                var n = function(i) {\n                    t.t[i] && e.config.chart[i].enabled && r.push({\n                        el: \"zoom\" === i ? t.elZoom : t.elSelection,\n                        icon: \"string\" == typeof t.t[i] ? t.t[i] : \"zoom\" === i ? '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\\n    <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\\n</svg>' : '<svg fill=\"#6E8192\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\"/>\\n</svg>',\n                        title: t.localeValues[\"zoom\" === i ? \"selectionZoom\" : \"selection\"],\n                        class: e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-\".concat(i, \"-icon\")\n                    });\n                };\n                n(\"zoom\"), n(\"selection\"), this.t.pan && e.config.chart.zoom.enabled && r.push({\n                    el: this.elPan,\n                    icon: \"string\" == typeof this.t.pan ? this.t.pan : '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <defs>\\n        <path d=\"M0 0h24v24H0z\" id=\"a\"/>\\n    </defs>\\n    <clipPath id=\"b\">\\n        <use overflow=\"visible\" xlink:href=\"#a\"/>\\n    </clipPath>\\n    <path clip-path=\"url(#b)\" d=\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\"/>\\n</svg>',\n                    title: this.localeValues.pan,\n                    class: e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-pan-icon\"\n                }), o(\"reset\", this.elZoomReset, '<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n</svg>'), this.t.download && r.push({\n                    el: this.elMenuIcon,\n                    icon: \"string\" == typeof this.t.download ? this.t.download : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>',\n                    title: this.localeValues.menu,\n                    class: \"apexcharts-menu-icon\"\n                });\n                for(var l = 0; l < this.elCustomIcons.length; l++)r.push({\n                    el: this.elCustomIcons[l],\n                    icon: this.t.customIcons[l].icon,\n                    title: this.t.customIcons[l].title,\n                    index: this.t.customIcons[l].index,\n                    class: \"apexcharts-toolbar-custom-icon \" + this.t.customIcons[l].class\n                });\n                r.forEach(function(t, e) {\n                    t.index && x.moveIndexInArray(r, e, t.index);\n                });\n                for(var h = 0; h < r.length; h++)m.setAttrs(r[h].el, {\n                    class: r[h].class,\n                    title: r[h].title\n                }), r[h].el.innerHTML = r[h].icon, a.appendChild(r[h].el);\n                this._createHamburgerMenu(a), e.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();\n            }\n        },\n        {\n            key: \"_createHamburgerMenu\",\n            value: function(t) {\n                this.elMenuItems = [], t.appendChild(this.elMenu), m.setAttrs(this.elMenu, {\n                    class: \"apexcharts-menu\"\n                });\n                for(var e = [\n                    {\n                        name: \"exportSVG\",\n                        title: this.localeValues.exportToSVG\n                    },\n                    {\n                        name: \"exportPNG\",\n                        title: this.localeValues.exportToPNG\n                    },\n                    {\n                        name: \"exportCSV\",\n                        title: this.localeValues.exportToCSV\n                    }\n                ], i = 0; i < e.length; i++)this.elMenuItems.push(document.createElement(\"div\")), this.elMenuItems[i].innerHTML = e[i].title, m.setAttrs(this.elMenuItems[i], {\n                    class: \"apexcharts-menu-item \".concat(e[i].name),\n                    title: e[i].title\n                }), this.elMenu.appendChild(this.elMenuItems[i]);\n            }\n        },\n        {\n            key: \"addToolbarEventListeners\",\n            value: function() {\n                var t = this;\n                this.elZoomReset.addEventListener(\"click\", this.handleZoomReset.bind(this)), this.elSelection.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"selection\")), this.elZoom.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"zoom\")), this.elZoomIn.addEventListener(\"click\", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener(\"click\", this.handleZoomOut.bind(this)), this.elPan.addEventListener(\"click\", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener(\"click\", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e) {\n                    e.classList.contains(\"exportSVG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"svg\")) : e.classList.contains(\"exportPNG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"png\")) : e.classList.contains(\"exportCSV\") && e.addEventListener(\"click\", t.handleDownload.bind(t, \"csv\"));\n                });\n                for(var e = 0; e < this.t.customIcons.length; e++)this.elCustomIcons[e].addEventListener(\"click\", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w));\n            }\n        },\n        {\n            key: \"toggleZoomSelection\",\n            value: function(t) {\n                this.ctx.getSyncedCharts().forEach(function(e) {\n                    e.ctx.toolbar.toggleOtherControls();\n                    var i = \"selection\" === t ? e.ctx.toolbar.elSelection : e.ctx.toolbar.elZoom, a = \"selection\" === t ? \"selectionEnabled\" : \"zoomEnabled\";\n                    e.w.globals[a] = !e.w.globals[a], i.classList.contains(e.ctx.toolbar.selectedClass) ? i.classList.remove(e.ctx.toolbar.selectedClass) : i.classList.add(e.ctx.toolbar.selectedClass);\n                });\n            }\n        },\n        {\n            key: \"getToolbarIconsReference\",\n            value: function() {\n                var t = this.w;\n                this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(\".apexcharts-zoom-icon\")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(\".apexcharts-pan-icon\")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(\".apexcharts-selection-icon\"));\n            }\n        },\n        {\n            key: \"enableZoomPanFromToolbar\",\n            value: function(t) {\n                this.toggleOtherControls(), \"pan\" === t ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;\n                var e = \"pan\" === t ? this.elPan : this.elZoom, i = \"pan\" === t ? this.elZoom : this.elPan;\n                e && e.classList.add(this.selectedClass), i && i.classList.remove(this.selectedClass);\n            }\n        },\n        {\n            key: \"togglePanning\",\n            value: function() {\n                this.ctx.getSyncedCharts().forEach(function(t) {\n                    t.ctx.toolbar.toggleOtherControls(), t.w.globals.panEnabled = !t.w.globals.panEnabled, t.ctx.toolbar.elPan.classList.contains(t.ctx.toolbar.selectedClass) ? t.ctx.toolbar.elPan.classList.remove(t.ctx.toolbar.selectedClass) : t.ctx.toolbar.elPan.classList.add(t.ctx.toolbar.selectedClass);\n                });\n            }\n        },\n        {\n            key: \"toggleOtherControls\",\n            value: function() {\n                var t = this, e = this.w;\n                e.globals.panEnabled = !1, e.globals.zoomEnabled = !1, e.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [\n                    this.elPan,\n                    this.elSelection,\n                    this.elZoom\n                ].forEach(function(e) {\n                    e && e.classList.remove(t.selectedClass);\n                });\n            }\n        },\n        {\n            key: \"handleZoomIn\",\n            value: function() {\n                var t = this.w;\n                t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY);\n                var e = (this.minX + this.maxX) / 2, i = (this.minX + e) / 2, a = (this.maxX + e) / 2, s = this._getNewMinXMaxX(i, a);\n                t.globals.disableZoomIn || this.zoomUpdateOptions(s.minX, s.maxX);\n            }\n        },\n        {\n            key: \"handleZoomOut\",\n            value: function() {\n                var t = this.w;\n                if (t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY), !(\"datetime\" === t.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {\n                    var e = (this.minX + this.maxX) / 2, i = this.minX - (e - this.minX), a = this.maxX - (e - this.maxX), s = this._getNewMinXMaxX(i, a);\n                    t.globals.disableZoomOut || this.zoomUpdateOptions(s.minX, s.maxX);\n                }\n            }\n        },\n        {\n            key: \"_getNewMinXMaxX\",\n            value: function(t, e) {\n                var i = this.w.config.xaxis.convertedCatToNumeric;\n                return {\n                    minX: i ? Math.floor(t) : t,\n                    maxX: i ? Math.floor(e) : e\n                };\n            }\n        },\n        {\n            key: \"zoomUpdateOptions\",\n            value: function(t, e) {\n                var i = this.w;\n                if (void 0 !== t || void 0 !== e) {\n                    if (!(i.config.xaxis.convertedCatToNumeric && (t < 1 && (t = 1, e = i.globals.dataPoints), e - t < 2))) {\n                        var a = {\n                            min: t,\n                            max: e\n                        }, s = this.getBeforeZoomRange(a);\n                        s && (a = s.xaxis);\n                        var r = {\n                            xaxis: a\n                        }, o = x.clone(i.globals.initialConfig.yaxis);\n                        if (i.config.chart.zoom.autoScaleYaxis) o = new _(this.ctx).autoScaleY(this.ctx, o, {\n                            xaxis: a\n                        });\n                        i.config.chart.group || (r.yaxis = o), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a, o);\n                    }\n                } else this.handleZoomReset();\n            }\n        },\n        {\n            key: \"zoomCallback\",\n            value: function(t, e) {\n                \"function\" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {\n                    xaxis: t,\n                    yaxis: e\n                });\n            }\n        },\n        {\n            key: \"getBeforeZoomRange\",\n            value: function(t, e) {\n                var i = null;\n                return \"function\" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {\n                    xaxis: t,\n                    yaxis: e\n                })), i;\n            }\n        },\n        {\n            key: \"toggleMenu\",\n            value: function() {\n                var t = this;\n                window.setTimeout(function() {\n                    t.elMenu.classList.contains(\"apexcharts-menu-open\") ? t.elMenu.classList.remove(\"apexcharts-menu-open\") : t.elMenu.classList.add(\"apexcharts-menu-open\");\n                }, 0);\n            }\n        },\n        {\n            key: \"handleDownload\",\n            value: function(t) {\n                var e = this.w, i = new G(this.ctx);\n                switch(t){\n                    case \"svg\":\n                        i.exportToSVG(this.ctx);\n                        break;\n                    case \"png\":\n                        i.exportToPng(this.ctx);\n                        break;\n                    case \"csv\":\n                        i.exportToCSV({\n                            series: e.config.series,\n                            columnDelimiter: e.config.chart.toolbar.export.csv.columnDelimiter\n                        });\n                }\n            }\n        },\n        {\n            key: \"handleZoomReset\",\n            value: function(t) {\n                this.ctx.getSyncedCharts().forEach(function(t) {\n                    var e = t.w;\n                    if (e.globals.lastXAxis.min = e.globals.initialConfig.xaxis.min, e.globals.lastXAxis.max = e.globals.initialConfig.xaxis.max, t.updateHelpers.revertDefaultAxisMinMax(), \"function\" == typeof e.config.chart.events.beforeResetZoom) {\n                        var i = e.config.chart.events.beforeResetZoom(t, e);\n                        i && t.updateHelpers.revertDefaultAxisMinMax(i);\n                    }\n                    \"function\" == typeof e.config.chart.events.zoomed && t.ctx.toolbar.zoomCallback({\n                        min: e.config.xaxis.min,\n                        max: e.config.xaxis.max\n                    }), e.globals.zoomed = !1;\n                    var a = t.ctx.series.emptyCollapsedSeries(x.clone(e.globals.initialSeries));\n                    t.updateHelpers._updateSeries(a, e.config.chart.animations.dynamicAnimation.enabled);\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;\n            }\n        }\n    ]), t;\n}(), ct = function(t) {\n    n(i, ht);\n    var e = d(i);\n    function i(t) {\n        var s;\n        return a(this, i), (s = e.call(this, t)).ctx = t, s.w = t.w, s.dragged = !1, s.graphics = new m(s.ctx), s.eventList = [\n            \"mousedown\",\n            \"mouseleave\",\n            \"mousemove\",\n            \"touchstart\",\n            \"touchmove\",\n            \"mouseup\",\n            \"touchend\"\n        ], s.clientX = 0, s.clientY = 0, s.startX = 0, s.endX = 0, s.dragX = 0, s.startY = 0, s.endY = 0, s.dragY = 0, s.moveDirection = \"none\", s;\n    }\n    return r(i, [\n        {\n            key: \"init\",\n            value: function(t) {\n                var e = this, i = t.xyRatios, a = this.w, s = this;\n                this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a.globals.dom.baseEl.querySelector(\".apexcharts-grid\"), this.zoomRect.node.classList.add(\"apexcharts-zoom-rect\"), this.selectionRect.node.classList.add(\"apexcharts-selection-rect\"), a.globals.dom.elGraphical.add(this.zoomRect), a.globals.dom.elGraphical.add(this.selectionRect), \"x\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n                    minX: 0,\n                    minY: 0,\n                    maxX: a.globals.gridWidth,\n                    maxY: a.globals.gridHeight\n                }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : \"y\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n                    minX: 0,\n                    maxX: a.globals.gridWidth\n                }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : this.slDraggableRect = this.selectionRect.draggable().on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")), this.preselectedSelection(), this.hoverArea = a.globals.dom.baseEl.querySelector(\"\".concat(a.globals.chartClass, \" .apexcharts-svg\")), this.hoverArea.classList.add(\"apexcharts-zoomable\"), this.eventList.forEach(function(t) {\n                    e.hoverArea.addEventListener(t, s.svgMouseEvents.bind(s, i), {\n                        capture: !1,\n                        passive: !0\n                    });\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;\n            }\n        },\n        {\n            key: \"svgMouseEvents\",\n            value: function(t, e) {\n                var i = this.w, a = this, s = this.ctx.toolbar, r = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type, o = i.config.chart.toolbar.autoSelected;\n                if (e.shiftKey ? (this.shiftWasPressed = !0, s.enableZoomPanFromToolbar(\"pan\" === o ? \"zoom\" : \"pan\")) : this.shiftWasPressed && (s.enableZoomPanFromToolbar(o), this.shiftWasPressed = !1), e.target) {\n                    var n, l = e.target.classList;\n                    if (e.target.parentNode && null !== e.target.parentNode && (n = e.target.parentNode.classList), !(l.contains(\"apexcharts-selection-rect\") || l.contains(\"apexcharts-legend-marker\") || l.contains(\"apexcharts-legend-text\") || n && n.contains(\"apexcharts-toolbar\"))) {\n                        if (a.clientX = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientX : \"touchend\" === e.type ? e.changedTouches[0].clientX : e.clientX, a.clientY = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientY : \"touchend\" === e.type ? e.changedTouches[0].clientY : e.clientY, \"mousedown\" === e.type && 1 === e.which) {\n                            var h = a.gridRect.getBoundingClientRect();\n                            a.startX = a.clientX - h.left, a.startY = a.clientY - h.top, a.dragged = !1, a.w.globals.mousedown = !0;\n                        }\n                        if ((\"mousemove\" === e.type && 1 === e.which || \"touchmove\" === e.type) && (a.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, a.w.globals.mousedown && a.panDragging({\n                            context: a,\n                            zoomtype: r,\n                            xyRatios: t\n                        })) : (a.w.globals.mousedown && i.globals.zoomEnabled || a.w.globals.mousedown && i.globals.selectionEnabled) && (a.selection = a.selectionDrawing({\n                            context: a,\n                            zoomtype: r\n                        }))), \"mouseup\" === e.type || \"touchend\" === e.type || \"mouseleave\" === e.type) {\n                            var c = a.gridRect.getBoundingClientRect();\n                            a.w.globals.mousedown && (a.endX = a.clientX - c.left, a.endY = a.clientY - c.top, a.dragX = Math.abs(a.endX - a.startX), a.dragY = Math.abs(a.endY - a.startY), (i.globals.zoomEnabled || i.globals.selectionEnabled) && a.selectionDrawn({\n                                context: a,\n                                zoomtype: r\n                            }), i.globals.panEnabled && i.config.xaxis.convertedCatToNumeric && a.delayedPanScrolled()), i.globals.zoomEnabled && a.hideSelectionRect(this.selectionRect), a.dragged = !1, a.w.globals.mousedown = !1;\n                        }\n                        this.makeSelectionRectDraggable();\n                    }\n                }\n            }\n        },\n        {\n            key: \"makeSelectionRectDraggable\",\n            value: function() {\n                var t = this.w;\n                if (this.selectionRect) {\n                    var e = this.selectionRect.node.getBoundingClientRect();\n                    e.width > 0 && e.height > 0 && this.slDraggableRect.selectize({\n                        points: \"l, r\",\n                        pointSize: 8,\n                        pointType: \"rect\"\n                    }).resize({\n                        constraint: {\n                            minX: 0,\n                            minY: 0,\n                            maxX: t.globals.gridWidth,\n                            maxY: t.globals.gridHeight\n                        }\n                    }).on(\"resizing\", this.selectionDragging.bind(this, \"resizing\"));\n                }\n            }\n        },\n        {\n            key: \"preselectedSelection\",\n            value: function() {\n                var t = this.w, e = this.xyRatios;\n                if (!t.globals.zoomEnabled) {\n                    if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);\n                    else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {\n                        var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio, a = t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i;\n                        t.globals.isRangeBar && (i = (t.config.chart.selection.xaxis.min - t.globals.yAxisScale[0].niceMin) / e.invertedYRatio, a = (t.config.chart.selection.xaxis.max - t.config.chart.selection.xaxis.min) / e.invertedYRatio);\n                        var s = {\n                            x: i,\n                            y: 0,\n                            width: a,\n                            height: t.globals.gridHeight,\n                            translateX: 0,\n                            translateY: 0,\n                            selectionEnabled: !0\n                        };\n                        this.drawSelectionRect(s), this.makeSelectionRectDraggable(), \"function\" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {\n                            xaxis: {\n                                min: t.config.chart.selection.xaxis.min,\n                                max: t.config.chart.selection.xaxis.max\n                            },\n                            yaxis: {}\n                        });\n                    }\n                }\n            }\n        },\n        {\n            key: \"drawSelectionRect\",\n            value: function(t) {\n                var e = t.x, i = t.y, a = t.width, s = t.height, r = t.translateX, o = void 0 === r ? 0 : r, n = t.translateY, l = void 0 === n ? 0 : n, h = this.w, c = this.zoomRect, d = this.selectionRect;\n                if (this.dragged || null !== h.globals.selection) {\n                    var g = {\n                        transform: \"translate(\" + o + \", \" + l + \")\"\n                    };\n                    h.globals.zoomEnabled && this.dragged && (a < 0 && (a = 1), c.attr({\n                        x: e,\n                        y: i,\n                        width: a,\n                        height: s,\n                        fill: h.config.chart.zoom.zoomedArea.fill.color,\n                        \"fill-opacity\": h.config.chart.zoom.zoomedArea.fill.opacity,\n                        stroke: h.config.chart.zoom.zoomedArea.stroke.color,\n                        \"stroke-width\": h.config.chart.zoom.zoomedArea.stroke.width,\n                        \"stroke-opacity\": h.config.chart.zoom.zoomedArea.stroke.opacity\n                    }), m.setAttrs(c.node, g)), h.globals.selectionEnabled && (d.attr({\n                        x: e,\n                        y: i,\n                        width: a > 0 ? a : 0,\n                        height: s > 0 ? s : 0,\n                        fill: h.config.chart.selection.fill.color,\n                        \"fill-opacity\": h.config.chart.selection.fill.opacity,\n                        stroke: h.config.chart.selection.stroke.color,\n                        \"stroke-width\": h.config.chart.selection.stroke.width,\n                        \"stroke-dasharray\": h.config.chart.selection.stroke.dashArray,\n                        \"stroke-opacity\": h.config.chart.selection.stroke.opacity\n                    }), m.setAttrs(d.node, g));\n                }\n            }\n        },\n        {\n            key: \"hideSelectionRect\",\n            value: function(t) {\n                t && t.attr({\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                });\n            }\n        },\n        {\n            key: \"selectionDrawing\",\n            value: function(t) {\n                var e = t.context, i = t.zoomtype, a = this.w, s = e, r = this.gridRect.getBoundingClientRect(), o = s.startX - 1, n = s.startY, l = !1, h = !1, c = s.clientX - r.left - o, d = s.clientY - r.top - n, g = {};\n                return Math.abs(c + o) > a.globals.gridWidth ? c = a.globals.gridWidth - o : s.clientX - r.left < 0 && (c = o), o > s.clientX - r.left && (l = !0, c = Math.abs(c)), n > s.clientY - r.top && (h = !0, d = Math.abs(d)), g = \"x\" === i ? {\n                    x: l ? o - c : o,\n                    y: 0,\n                    width: c,\n                    height: a.globals.gridHeight\n                } : \"y\" === i ? {\n                    x: 0,\n                    y: h ? n - d : n,\n                    width: a.globals.gridWidth,\n                    height: d\n                } : {\n                    x: l ? o - c : o,\n                    y: h ? n - d : n,\n                    width: c,\n                    height: d\n                }, s.drawSelectionRect(g), s.selectionDragging(\"resizing\"), g;\n            }\n        },\n        {\n            key: \"selectionDragging\",\n            value: function(t, e) {\n                var i = this, a = this.w, s = this.xyRatios, r = this.selectionRect, o = 0;\n                \"resizing\" === t && (o = 30);\n                var n = function(t) {\n                    return parseFloat(r.node.getAttribute(t));\n                }, l = {\n                    x: n(\"x\"),\n                    y: n(\"y\"),\n                    width: n(\"width\"),\n                    height: n(\"height\")\n                };\n                a.globals.selection = l, \"function\" == typeof a.config.chart.events.selection && a.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {\n                    var t, e, o, n, l = i.gridRect.getBoundingClientRect(), h = r.node.getBoundingClientRect();\n                    a.globals.isRangeBar ? (t = a.globals.yAxisScale[0].niceMin + (h.left - l.left) * s.invertedYRatio, e = a.globals.yAxisScale[0].niceMin + (h.right - l.left) * s.invertedYRatio, o = 0, n = 1) : (t = a.globals.xAxisScale.niceMin + (h.left - l.left) * s.xRatio, e = a.globals.xAxisScale.niceMin + (h.right - l.left) * s.xRatio, o = a.globals.yAxisScale[0].niceMin + (l.bottom - h.bottom) * s.yRatio[0], n = a.globals.yAxisScale[0].niceMax - (h.top - l.top) * s.yRatio[0]);\n                    var c = {\n                        xaxis: {\n                            min: t,\n                            max: e\n                        },\n                        yaxis: {\n                            min: o,\n                            max: n\n                        }\n                    };\n                    a.config.chart.events.selection(i.ctx, c), a.config.chart.brush.enabled && void 0 !== a.config.chart.events.brushScrolled && a.config.chart.events.brushScrolled(i.ctx, c);\n                }, o));\n            }\n        },\n        {\n            key: \"selectionDrawn\",\n            value: function(t) {\n                var e = t.context, i = t.zoomtype, a = this.w, s = e, r = this.xyRatios, o = this.ctx.toolbar;\n                if (s.startX > s.endX) {\n                    var n = s.startX;\n                    s.startX = s.endX, s.endX = n;\n                }\n                if (s.startY > s.endY) {\n                    var l = s.startY;\n                    s.startY = s.endY, s.endY = l;\n                }\n                var h = void 0, c = void 0;\n                a.globals.isRangeBar ? (h = a.globals.yAxisScale[0].niceMin + s.startX * r.invertedYRatio, c = a.globals.yAxisScale[0].niceMin + s.endX * r.invertedYRatio) : (h = a.globals.xAxisScale.niceMin + s.startX * r.xRatio, c = a.globals.xAxisScale.niceMin + s.endX * r.xRatio);\n                var d = [], g = [];\n                if (a.config.yaxis.forEach(function(t, e) {\n                    d.push(a.globals.yAxisScale[e].niceMax - r.yRatio[e] * s.startY), g.push(a.globals.yAxisScale[e].niceMax - r.yRatio[e] * s.endY);\n                }), s.dragged && (s.dragX > 10 || s.dragY > 10) && h !== c) {\n                    if (a.globals.zoomEnabled) {\n                        var u = x.clone(a.globals.initialConfig.yaxis), p = x.clone(a.globals.initialConfig.xaxis);\n                        if (a.globals.zoomed = !0, a.config.xaxis.convertedCatToNumeric && (h = Math.floor(h), c = Math.floor(c), h < 1 && (h = 1, c = a.globals.dataPoints), c - h < 2 && (c = h + 1)), \"xy\" !== i && \"x\" !== i || (p = {\n                            min: h,\n                            max: c\n                        }), \"xy\" !== i && \"y\" !== i || u.forEach(function(t, e) {\n                            u[e].min = g[e], u[e].max = d[e];\n                        }), a.config.chart.zoom.autoScaleYaxis) {\n                            var f = new _(s.ctx);\n                            u = f.autoScaleY(s.ctx, u, {\n                                xaxis: p\n                            });\n                        }\n                        if (o) {\n                            var b = o.getBeforeZoomRange(p, u);\n                            b && (p = b.xaxis ? b.xaxis : p, u = b.yaxis ? b.yaxis : u);\n                        }\n                        var v = {\n                            xaxis: p\n                        };\n                        a.config.chart.group || (v.yaxis = u), s.ctx.updateHelpers._updateOptions(v, !1, s.w.config.chart.animations.dynamicAnimation.enabled), \"function\" == typeof a.config.chart.events.zoomed && o.zoomCallback(p, u);\n                    } else if (a.globals.selectionEnabled) {\n                        var m, y = null;\n                        m = {\n                            min: h,\n                            max: c\n                        }, \"xy\" !== i && \"y\" !== i || (y = x.clone(a.config.yaxis)).forEach(function(t, e) {\n                            y[e].min = g[e], y[e].max = d[e];\n                        }), a.globals.selection = s.selection, \"function\" == typeof a.config.chart.events.selection && a.config.chart.events.selection(s.ctx, {\n                            xaxis: m,\n                            yaxis: y\n                        });\n                    }\n                }\n            }\n        },\n        {\n            key: \"panDragging\",\n            value: function(t) {\n                var e = t.context, i = this.w, a = e;\n                if (void 0 !== i.globals.lastClientPosition.x) {\n                    var s = i.globals.lastClientPosition.x - a.clientX, r = i.globals.lastClientPosition.y - a.clientY;\n                    Math.abs(s) > Math.abs(r) && s > 0 ? this.moveDirection = \"left\" : Math.abs(s) > Math.abs(r) && s < 0 ? this.moveDirection = \"right\" : Math.abs(r) > Math.abs(s) && r > 0 ? this.moveDirection = \"up\" : Math.abs(r) > Math.abs(s) && r < 0 && (this.moveDirection = \"down\");\n                }\n                i.globals.lastClientPosition = {\n                    x: a.clientX,\n                    y: a.clientY\n                };\n                var o = i.globals.isRangeBar ? i.globals.minY : i.globals.minX, n = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;\n                i.config.xaxis.convertedCatToNumeric || a.panScrolled(o, n);\n            }\n        },\n        {\n            key: \"delayedPanScrolled\",\n            value: function() {\n                var t = this.w, e = t.globals.minX, i = t.globals.maxX, a = (t.globals.maxX - t.globals.minX) / 2;\n                \"left\" === this.moveDirection ? (e = t.globals.minX + a, i = t.globals.maxX + a) : \"right\" === this.moveDirection && (e = t.globals.minX - a, i = t.globals.maxX - a), e = Math.floor(e), i = Math.floor(i), this.updateScrolledChart({\n                    xaxis: {\n                        min: e,\n                        max: i\n                    }\n                }, e, i);\n            }\n        },\n        {\n            key: \"panScrolled\",\n            value: function(t, e) {\n                var i = this.w, a = this.xyRatios, s = x.clone(i.globals.initialConfig.yaxis), r = a.xRatio, o = i.globals.minX, n = i.globals.maxX;\n                i.globals.isRangeBar && (r = a.invertedYRatio, o = i.globals.minY, n = i.globals.maxY), \"left\" === this.moveDirection ? (t = o + i.globals.gridWidth / 15 * r, e = n + i.globals.gridWidth / 15 * r) : \"right\" === this.moveDirection && (t = o - i.globals.gridWidth / 15 * r, e = n - i.globals.gridWidth / 15 * r), i.globals.isRangeBar || (t < i.globals.initialMinX || e > i.globals.initialMaxX) && (t = o, e = n);\n                var l = {\n                    min: t,\n                    max: e\n                };\n                i.config.chart.zoom.autoScaleYaxis && (s = new _(this.ctx).autoScaleY(this.ctx, s, {\n                    xaxis: l\n                }));\n                var h = {\n                    xaxis: {\n                        min: t,\n                        max: e\n                    }\n                };\n                i.config.chart.group || (h.yaxis = s), this.updateScrolledChart(h, t, e);\n            }\n        },\n        {\n            key: \"updateScrolledChart\",\n            value: function(t, e, i) {\n                var a = this.w;\n                this.ctx.updateHelpers._updateOptions(t, !1, !1), \"function\" == typeof a.config.chart.events.scrolled && a.config.chart.events.scrolled(this.ctx, {\n                    xaxis: {\n                        min: e,\n                        max: i\n                    }\n                });\n            }\n        }\n    ]), i;\n}(), dt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx;\n    }\n    return r(t, [\n        {\n            key: \"getNearestValues\",\n            value: function(t) {\n                var e = t.hoverArea, i = t.elGrid, a = t.clientX, s = t.clientY, r = this.w, o = i.getBoundingClientRect(), n = o.width, l = o.height, h = n / (r.globals.dataPoints - 1), c = l / r.globals.dataPoints, d = this.hasBars();\n                !r.globals.comboCharts && !d || r.config.xaxis.convertedCatToNumeric || (h = n / r.globals.dataPoints);\n                var g = a - o.left - r.globals.barPadForNumericAxis, u = s - o.top;\n                g < 0 || u < 0 || g > n || u > l ? (e.classList.remove(\"hovering-zoom\"), e.classList.remove(\"hovering-pan\")) : r.globals.zoomEnabled ? (e.classList.remove(\"hovering-pan\"), e.classList.add(\"hovering-zoom\")) : r.globals.panEnabled && (e.classList.remove(\"hovering-zoom\"), e.classList.add(\"hovering-pan\"));\n                var p = Math.round(g / h), f = Math.floor(u / c);\n                d && !r.config.xaxis.convertedCatToNumeric && (p = Math.ceil(g / h), p -= 1);\n                var b = null, v = null, m = r.globals.seriesXvalues.map(function(t) {\n                    return t.filter(function(t) {\n                        return x.isNumber(t);\n                    });\n                }), y = r.globals.seriesYvalues.map(function(t) {\n                    return t.filter(function(t) {\n                        return x.isNumber(t);\n                    });\n                });\n                if (r.globals.isXNumeric) {\n                    var w = this.ttCtx.getElGrid().getBoundingClientRect(), k = g * (w.width / n), A = u * (w.height / l);\n                    b = (v = this.closestInMultiArray(k, A, m, y)).index, p = v.j, null !== b && (m = r.globals.seriesXvalues[b], p = (v = this.closestInArray(k, m)).index);\n                }\n                return r.globals.capturedSeriesIndex = null === b ? -1 : b, (!p || p < 1) && (p = 0), r.globals.isBarHorizontal ? r.globals.capturedDataPointIndex = f : r.globals.capturedDataPointIndex = p, {\n                    capturedSeries: b,\n                    j: r.globals.isBarHorizontal ? f : p,\n                    hoverX: g,\n                    hoverY: u\n                };\n            }\n        },\n        {\n            key: \"closestInMultiArray\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = 0, o = null, n = -1;\n                s.globals.series.length > 1 ? r = this.getFirstActiveXArray(i) : o = 0;\n                var l = i[r][0], h = Math.abs(t - l);\n                if (i.forEach(function(e) {\n                    e.forEach(function(e, i) {\n                        var a = Math.abs(t - e);\n                        a <= h && (h = a, n = i);\n                    });\n                }), -1 !== n) {\n                    var c = a[r][n], d = Math.abs(e - c);\n                    o = r, a.forEach(function(t, i) {\n                        var a = Math.abs(e - t[n]);\n                        a <= d && (d = a, o = i);\n                    });\n                }\n                return {\n                    index: o,\n                    j: n\n                };\n            }\n        },\n        {\n            key: \"getFirstActiveXArray\",\n            value: function(t) {\n                for(var e = this.w, i = 0, a = t.map(function(t, e) {\n                    return t.length > 0 ? e : -1;\n                }), s = 0; s < a.length; s++)if (-1 !== a[s] && -1 === e.globals.collapsedSeriesIndices.indexOf(s) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(s)) {\n                    i = a[s];\n                    break;\n                }\n                return i;\n            }\n        },\n        {\n            key: \"closestInArray\",\n            value: function(t, e) {\n                for(var i = e[0], a = null, s = Math.abs(t - i), r = 0; r < e.length; r++){\n                    var o = Math.abs(t - e[r]);\n                    o < s && (s = o, a = r);\n                }\n                return {\n                    index: a\n                };\n            }\n        },\n        {\n            key: \"isXoverlap\",\n            value: function(t) {\n                var e = [], i = this.w.globals.seriesX.filter(function(t) {\n                    return void 0 !== t[0];\n                });\n                if (i.length > 0) for(var a = 0; a < i.length - 1; a++)void 0 !== i[a][t] && void 0 !== i[a + 1][t] && i[a][t] !== i[a + 1][t] && e.push(\"unEqual\");\n                return 0 === e.length;\n            }\n        },\n        {\n            key: \"isInitialSeriesSameLen\",\n            value: function() {\n                for(var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++)if (e[i].data.length !== e[i + 1].data.length) {\n                    t = !1;\n                    break;\n                }\n                return t;\n            }\n        },\n        {\n            key: \"getBarsHeight\",\n            value: function(t) {\n                return u(t).reduce(function(t, e) {\n                    return t + e.getBBox().height;\n                }, 0);\n            }\n        },\n        {\n            key: \"getElMarkers\",\n            value: function(t) {\n                return \"number\" == typeof t ? this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-series-markers-wrap > *\")) : this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap > *\");\n            }\n        },\n        {\n            key: \"getAllMarkers\",\n            value: function() {\n                var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap\");\n                (t = u(t)).sort(function(t, e) {\n                    var i = Number(t.getAttribute(\"data:realIndex\")), a = Number(e.getAttribute(\"data:realIndex\"));\n                    return a < i ? 1 : a > i ? -1 : 0;\n                });\n                var e = [];\n                return t.forEach(function(t) {\n                    e.push(t.querySelector(\".apexcharts-marker\"));\n                }), e;\n            }\n        },\n        {\n            key: \"hasMarkers\",\n            value: function(t) {\n                return this.getElMarkers(t).length > 0;\n            }\n        },\n        {\n            key: \"getElBars\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series\");\n            }\n        },\n        {\n            key: \"hasBars\",\n            value: function() {\n                return this.getElBars().length > 0;\n            }\n        },\n        {\n            key: \"getHoverMarkerSize\",\n            value: function(t) {\n                var e = this.w, i = e.config.markers.hover.size;\n                return void 0 === i && (i = e.globals.markers.size[t] + e.config.markers.hover.sizeOffset), i;\n            }\n        },\n        {\n            key: \"toggleAllTooltipSeriesGroups\",\n            value: function(t) {\n                var e = this.w, i = this.ttCtx;\n                0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-tooltip-series-group\"));\n                for(var a = i.allTooltipSeriesGroups, s = 0; s < a.length; s++)\"enable\" === t ? (a[s].classList.add(\"apexcharts-active\"), a[s].style.display = e.config.tooltip.items.display) : (a[s].classList.remove(\"apexcharts-active\"), a[s].style.display = \"none\");\n            }\n        }\n    ]), t;\n}(), gt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.ctx = e.ctx, this.ttCtx = e, this.tooltipUtil = new dt(e);\n    }\n    return r(t, [\n        {\n            key: \"drawSeriesTexts\",\n            value: function(t) {\n                var e = t.shared, i = void 0 === e || e, a = t.ttItems, s = t.i, r = void 0 === s ? 0 : s, o = t.j, n = void 0 === o ? null : o, l = t.y1, h = t.y2, c = t.e, d = this.w;\n                void 0 !== d.config.tooltip.custom ? this.handleCustomTooltip({\n                    i: r,\n                    j: n,\n                    y1: l,\n                    y2: h,\n                    w: d\n                }) : this.toggleActiveInactiveSeries(i);\n                var g = this.getValuesToPrint({\n                    i: r,\n                    j: n\n                });\n                this.printLabels({\n                    i: r,\n                    j: n,\n                    values: g,\n                    ttItems: a,\n                    shared: i,\n                    e: c\n                });\n                var u = this.ttCtx.getElTooltip();\n                this.ttCtx.tooltipRect.ttWidth = u.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u.getBoundingClientRect().height;\n            }\n        },\n        {\n            key: \"printLabels\",\n            value: function(t) {\n                var i, a = this, s = t.i, r = t.j, o = t.values, n = t.ttItems, l = t.shared, h = t.e, c = this.w, d = [], g = function(t) {\n                    return c.globals.seriesGoals[t] && c.globals.seriesGoals[t][r] && Array.isArray(c.globals.seriesGoals[t][r]);\n                }, u = o.xVal, p = o.zVal, f = o.xAxisTTVal, x = \"\", b = c.globals.colors[s];\n                null !== r && c.config.plotOptions.bar.distributed && (b = c.globals.colors[r]);\n                for(var v = function(t, o) {\n                    var v = a.getFormatters(s);\n                    x = a.getSeriesName({\n                        fn: v.yLbTitleFormatter,\n                        index: s,\n                        seriesIndex: s,\n                        j: r\n                    }), \"treemap\" === c.config.chart.type && (x = v.yLbTitleFormatter(String(c.config.series[s].data[r].x), {\n                        series: c.globals.series,\n                        seriesIndex: s,\n                        dataPointIndex: r,\n                        w: c\n                    }));\n                    var m = c.config.tooltip.inverseOrder ? o : t;\n                    if (c.globals.axisCharts) {\n                        var y = function(t) {\n                            var e, i, a, s;\n                            return c.globals.isRangeData ? v.yLbFormatter(null === (e = c.globals.seriesRangeStart) || void 0 === e || null === (i = e[t]) || void 0 === i ? void 0 : i[r], {\n                                series: c.globals.seriesRangeStart,\n                                seriesIndex: t,\n                                dataPointIndex: r,\n                                w: c\n                            }) + \" - \" + v.yLbFormatter(null === (a = c.globals.seriesRangeEnd) || void 0 === a || null === (s = a[t]) || void 0 === s ? void 0 : s[r], {\n                                series: c.globals.seriesRangeEnd,\n                                seriesIndex: t,\n                                dataPointIndex: r,\n                                w: c\n                            }) : v.yLbFormatter(c.globals.series[t][r], {\n                                series: c.globals.series,\n                                seriesIndex: t,\n                                dataPointIndex: r,\n                                w: c\n                            });\n                        };\n                        if (l) v = a.getFormatters(m), x = a.getSeriesName({\n                            fn: v.yLbTitleFormatter,\n                            index: m,\n                            seriesIndex: s,\n                            j: r\n                        }), b = c.globals.colors[m], i = y(m), g(m) && (d = c.globals.seriesGoals[m][r].map(function(t) {\n                            return {\n                                attrs: t,\n                                val: v.yLbFormatter(t.value, {\n                                    seriesIndex: m,\n                                    dataPointIndex: r,\n                                    w: c\n                                })\n                            };\n                        }));\n                        else {\n                            var w, k = null == h || null === (w = h.target) || void 0 === w ? void 0 : w.getAttribute(\"fill\");\n                            k && (b = -1 !== k.indexOf(\"url\") ? document.querySelector(k.substr(4).slice(0, -1)).childNodes[0].getAttribute(\"stroke\") : k), i = y(s), g(s) && Array.isArray(c.globals.seriesGoals[s][r]) && (d = c.globals.seriesGoals[s][r].map(function(t) {\n                                return {\n                                    attrs: t,\n                                    val: v.yLbFormatter(t.value, {\n                                        seriesIndex: s,\n                                        dataPointIndex: r,\n                                        w: c\n                                    })\n                                };\n                            }));\n                        }\n                    }\n                    null === r && (i = v.yLbFormatter(c.globals.series[s], e(e({}, c), {}, {\n                        seriesIndex: s,\n                        dataPointIndex: s\n                    }))), a.DOMHandling({\n                        i: s,\n                        t: m,\n                        j: r,\n                        ttItems: n,\n                        values: {\n                            val: i,\n                            goalVals: d,\n                            xVal: u,\n                            xAxisTTVal: f,\n                            zVal: p\n                        },\n                        seriesName: x,\n                        shared: l,\n                        pColor: b\n                    });\n                }, m = 0, y = c.globals.series.length - 1; m < c.globals.series.length; m++, y--)v(m, y);\n            }\n        },\n        {\n            key: \"getFormatters\",\n            value: function(t) {\n                var e, i = this.w, a = i.globals.yLabelFormatters[t];\n                return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (a = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (a = i.globals.ttVal.formatter, \"function\" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, \"function\" != typeof a && (a = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function(t) {\n                    return t;\n                }), \"function\" != typeof e && (e = function(t) {\n                    return t;\n                }), {\n                    yLbFormatter: a,\n                    yLbTitleFormatter: e\n                };\n            }\n        },\n        {\n            key: \"getSeriesName\",\n            value: function(t) {\n                var e = t.fn, i = t.index, a = t.seriesIndex, s = t.j, r = this.w;\n                return e(String(r.globals.seriesNames[i]), {\n                    series: r.globals.series,\n                    seriesIndex: a,\n                    dataPointIndex: s,\n                    w: r\n                });\n            }\n        },\n        {\n            key: \"DOMHandling\",\n            value: function(t) {\n                t.i;\n                var e = t.t, i = t.j, a = t.ttItems, s = t.values, r = t.seriesName, o = t.shared, n = t.pColor, l = this.w, h = this.ttCtx, c = s.val, d = s.goalVals, g = s.xVal, u = s.xAxisTTVal, p = s.zVal, f = null;\n                f = a[e].children, l.config.tooltip.fillSeriesColor && (a[e].style.backgroundColor = n, f[0].style.display = \"none\"), h.showTooltipTitle && (null === h.tooltipTitle && (h.tooltipTitle = l.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-title\")), h.tooltipTitle.innerHTML = g), h.isXAxisTooltipEnabled && (h.xaxisTooltipText.innerHTML = \"\" !== u ? u : g);\n                var x = a[e].querySelector(\".apexcharts-tooltip-text-y-label\");\n                x && (x.innerHTML = r || \"\");\n                var b = a[e].querySelector(\".apexcharts-tooltip-text-y-value\");\n                b && (b.innerHTML = void 0 !== c ? c : \"\"), f[0] && f[0].classList.contains(\"apexcharts-tooltip-marker\") && (l.config.tooltip.marker.fillColors && Array.isArray(l.config.tooltip.marker.fillColors) && (n = l.config.tooltip.marker.fillColors[e]), f[0].style.backgroundColor = n), l.config.tooltip.marker.show || (f[0].style.display = \"none\");\n                var v = a[e].querySelector(\".apexcharts-tooltip-text-goals-label\"), m = a[e].querySelector(\".apexcharts-tooltip-text-goals-value\");\n                if (d.length && l.globals.seriesGoals[e]) {\n                    var y = function() {\n                        var t = \"<div >\", e = \"<div>\";\n                        d.forEach(function(i, a) {\n                            t += ' <div style=\"display: flex\"><span class=\"apexcharts-tooltip-marker\" style=\"background-color: '.concat(i.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;\"></span> ').concat(i.attrs.name, \"</div>\"), e += \"<div>\".concat(i.val, \"</div>\");\n                        }), v.innerHTML = t + \"</div>\", m.innerHTML = e + \"</div>\";\n                    };\n                    o ? l.globals.seriesGoals[e][i] && Array.isArray(l.globals.seriesGoals[e][i]) ? y() : (v.innerHTML = \"\", m.innerHTML = \"\") : y();\n                } else v.innerHTML = \"\", m.innerHTML = \"\";\n                null !== p && (a[e].querySelector(\".apexcharts-tooltip-text-z-label\").innerHTML = l.config.tooltip.z.title, a[e].querySelector(\".apexcharts-tooltip-text-z-value\").innerHTML = void 0 !== p ? p : \"\");\n                if (o && f[0]) {\n                    if (l.config.tooltip.hideEmptySeries) {\n                        var w = a[e].querySelector(\".apexcharts-tooltip-marker\"), k = a[e].querySelector(\".apexcharts-tooltip-text\");\n                        0 == parseFloat(c) ? (w.style.display = \"none\", k.style.display = \"none\") : (w.style.display = \"block\", k.style.display = \"block\");\n                    }\n                    null == c || l.globals.ancillaryCollapsedSeriesIndices.indexOf(e) > -1 || l.globals.collapsedSeriesIndices.indexOf(e) > -1 ? f[0].parentNode.style.display = \"none\" : f[0].parentNode.style.display = l.config.tooltip.items.display;\n                }\n            }\n        },\n        {\n            key: \"toggleActiveInactiveSeries\",\n            value: function(t) {\n                var e = this.w;\n                if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups(\"enable\");\n                else {\n                    this.tooltipUtil.toggleAllTooltipSeriesGroups(\"disable\");\n                    var i = e.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-series-group\");\n                    i && (i.classList.add(\"apexcharts-active\"), i.style.display = e.config.tooltip.items.display);\n                }\n            }\n        },\n        {\n            key: \"getValuesToPrint\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = this.w, s = this.ctx.series.filteredSeriesX(), r = \"\", o = \"\", n = null, l = null, h = {\n                    series: a.globals.series,\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    w: a\n                }, c = a.globals.ttZFormatter;\n                null === i ? l = a.globals.series[e] : a.globals.isXNumeric && \"treemap\" !== a.config.chart.type ? (r = s[e][i], 0 === s[e].length && (r = s[this.tooltipUtil.getFirstActiveXArray(s)][i])) : r = void 0 !== a.globals.labels[i] ? a.globals.labels[i] : \"\";\n                var d = r;\n                a.globals.isXNumeric && \"datetime\" === a.config.xaxis.type ? r = new T(this.ctx).xLabelFormat(a.globals.ttKeyFormatter, d, d, {\n                    i: void 0,\n                    dateFormatter: new I(this.ctx).formatDate,\n                    w: this.w\n                }) : r = a.globals.isBarHorizontal ? a.globals.yLabelFormatters[0](d, h) : a.globals.xLabelFormatter(d, h);\n                return void 0 !== a.config.tooltip.x.formatter && (r = a.globals.ttKeyFormatter(d, h)), a.globals.seriesZ.length > 0 && a.globals.seriesZ[e].length > 0 && (n = c(a.globals.seriesZ[e][i], a)), o = \"function\" == typeof a.config.xaxis.tooltip.formatter ? a.globals.xaxisTooltipFormatter(d, h) : r, {\n                    val: Array.isArray(l) ? l.join(\" \") : l,\n                    xVal: Array.isArray(r) ? r.join(\" \") : r,\n                    xAxisTTVal: Array.isArray(o) ? o.join(\" \") : o,\n                    zVal: n\n                };\n            }\n        },\n        {\n            key: \"handleCustomTooltip\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = t.y1, s = t.y2, r = t.w, o = this.ttCtx.getElTooltip(), n = r.config.tooltip.custom;\n                Array.isArray(n) && n[e] && (n = n[e]), o.innerHTML = n({\n                    ctx: this.ctx,\n                    series: r.globals.series,\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    y1: a,\n                    y2: s,\n                    w: r\n                });\n            }\n        }\n    ]), t;\n}(), ut = function() {\n    function t(e) {\n        a(this, t), this.ttCtx = e, this.ctx = e.ctx, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"moveXCrosshairs\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i = this.ttCtx, a = this.w, s = i.getElXCrosshairs(), r = t - i.xcrosshairsWidth / 2, o = a.globals.labels.slice().length;\n                if (null !== e && (r = a.globals.gridWidth / o * e), null === s || a.globals.isBarHorizontal || (s.setAttribute(\"x\", r), s.setAttribute(\"x1\", r), s.setAttribute(\"x2\", r), s.setAttribute(\"y2\", a.globals.gridHeight), s.classList.add(\"apexcharts-active\")), r < 0 && (r = 0), r > a.globals.gridWidth && (r = a.globals.gridWidth), i.isXAxisTooltipEnabled) {\n                    var n = r;\n                    \"tickWidth\" !== a.config.xaxis.crosshairs.width && \"barWidth\" !== a.config.xaxis.crosshairs.width || (n = r + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(n);\n                }\n            }\n        },\n        {\n            key: \"moveYCrosshairs\",\n            value: function(t) {\n                var e = this.ttCtx;\n                null !== e.ycrosshairs && m.setAttrs(e.ycrosshairs, {\n                    y1: t,\n                    y2: t\n                }), null !== e.ycrosshairsHidden && m.setAttrs(e.ycrosshairsHidden, {\n                    y1: t,\n                    y2: t\n                });\n            }\n        },\n        {\n            key: \"moveXAxisTooltip\",\n            value: function(t) {\n                var e = this.w, i = this.ttCtx;\n                if (null !== i.xaxisTooltip && 0 !== i.xcrosshairsWidth) {\n                    i.xaxisTooltip.classList.add(\"apexcharts-active\");\n                    var a = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;\n                    if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {\n                        t += e.globals.translateX;\n                        var s;\n                        s = new m(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = s.width + \"px\", i.xaxisTooltip.style.left = t + \"px\", i.xaxisTooltip.style.top = a + \"px\";\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveYAxisTooltip\",\n            value: function(t) {\n                var e = this.w, i = this.ttCtx;\n                null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n                var a = parseInt(i.ycrosshairsHidden.getAttribute(\"y1\"), 10), s = e.globals.translateY + a, r = i.yaxisTTEls[t].getBoundingClientRect().height, o = e.globals.translateYAxisX[t] - 2;\n                e.config.yaxis[t].opposite && (o -= 26), s -= r / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (i.yaxisTTEls[t].classList.add(\"apexcharts-active\"), i.yaxisTTEls[t].style.top = s + \"px\", i.yaxisTTEls[t].style.left = o + e.config.yaxis[t].tooltip.offsetX + \"px\") : i.yaxisTTEls[t].classList.remove(\"apexcharts-active\");\n            }\n        },\n        {\n            key: \"moveTooltip\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = this.w, s = this.ttCtx, r = s.getElTooltip(), o = s.tooltipRect, n = null !== i ? parseFloat(i) : 1, l = parseFloat(t) + n + 5, h = parseFloat(e) + n / 2;\n                if (l > a.globals.gridWidth / 2 && (l = l - o.ttWidth - n - 10), l > a.globals.gridWidth - o.ttWidth - 10 && (l = a.globals.gridWidth - o.ttWidth), l < -20 && (l = -20), a.config.tooltip.followCursor) {\n                    var c = s.getElGrid().getBoundingClientRect();\n                    (l = s.e.clientX - c.left) > a.globals.gridWidth / 2 && (l -= s.tooltipRect.ttWidth), (h = s.e.clientY + a.globals.translateY - c.top) > a.globals.gridHeight / 2 && (h -= s.tooltipRect.ttHeight);\n                } else a.globals.isBarHorizontal || o.ttHeight / 2 + h > a.globals.gridHeight && (h = a.globals.gridHeight - o.ttHeight + a.globals.translateY);\n                isNaN(l) || (l += a.globals.translateX, r.style.left = l + \"px\", r.style.top = h + \"px\");\n            }\n        },\n        {\n            key: \"moveMarkers\",\n            value: function(t, e) {\n                var i = this.w, a = this.ttCtx;\n                if (i.globals.markers.size[t] > 0) for(var s = i.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-marker\")), r = 0; r < s.length; r++)parseInt(s[r].getAttribute(\"rel\"), 10) === e && (a.marker.resetPointsSize(), a.marker.enlargeCurrentPoint(e, s[r]));\n                else a.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);\n            }\n        },\n        {\n            key: \"moveDynamicPointOnHover\",\n            value: function(t, e) {\n                var i, a, s = this.w, r = this.ttCtx, o = s.globals.pointsArray, n = r.tooltipUtil.getHoverMarkerSize(e), l = s.config.series[e].type;\n                if (!l || \"column\" !== l && \"candlestick\" !== l && \"boxPlot\" !== l) {\n                    i = o[e][t][0], a = o[e][t][1] ? o[e][t][1] : 0;\n                    var h = s.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] .apexcharts-series-markers circle\"));\n                    h && a < s.globals.gridHeight && a > 0 && (h.setAttribute(\"r\", n), h.setAttribute(\"cx\", i), h.setAttribute(\"cy\", a)), this.moveXCrosshairs(i), r.fixedTooltip || this.moveTooltip(i, a, n);\n                }\n            }\n        },\n        {\n            key: \"moveDynamicPointsOnHover\",\n            value: function(t) {\n                var e, i = this.ttCtx, a = i.w, s = 0, r = 0, o = a.globals.pointsArray;\n                e = new N(this.ctx).getActiveConfigSeriesIndex(\"asc\", [\n                    \"line\",\n                    \"area\",\n                    \"scatter\",\n                    \"bubble\"\n                ]);\n                var n = i.tooltipUtil.getHoverMarkerSize(e);\n                o[e] && (s = o[e][t][0], r = o[e][t][1]);\n                var l = i.tooltipUtil.getAllMarkers();\n                if (null !== l) for(var h = 0; h < a.globals.series.length; h++){\n                    var c = o[h];\n                    if (a.globals.comboCharts && void 0 === c && l.splice(h, 0, null), c && c.length) {\n                        var d = o[h][t][1], g = void 0;\n                        if (l[h].setAttribute(\"cx\", s), \"rangeArea\" === a.config.chart.type && !a.globals.comboCharts) {\n                            var u = t + a.globals.series[h].length;\n                            g = o[h][u][1], d -= Math.abs(d - g) / 2;\n                        }\n                        null !== d && !isNaN(d) && d < a.globals.gridHeight + n && d + n > 0 ? (l[h] && l[h].setAttribute(\"r\", n), l[h] && l[h].setAttribute(\"cy\", d)) : l[h] && l[h].setAttribute(\"r\", 0);\n                    }\n                }\n                this.moveXCrosshairs(s), i.fixedTooltip || this.moveTooltip(s, r || a.globals.gridHeight, n);\n            }\n        },\n        {\n            key: \"moveStickyTooltipOverBars\",\n            value: function(t, e) {\n                var i = this.w, a = this.ttCtx, s = i.globals.columnSeries ? i.globals.columnSeries.length : i.globals.series.length, r = s >= 2 && s % 2 == 0 ? Math.floor(s / 2) : Math.floor(s / 2) + 1;\n                i.globals.isBarHorizontal && (r = new N(this.ctx).getActiveConfigSeriesIndex(\"desc\") + 1);\n                var o = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='\".concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-boxPlot-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='\").concat(r, \"'] path[j='\").concat(t, \"']\"));\n                o || \"number\" != typeof e || (o = i.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-candlestick-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-boxPlot-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"'],\\n        .apexcharts-rangebar-series .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] path[j='\").concat(t, \"']\")));\n                var n = o ? parseFloat(o.getAttribute(\"cx\")) : 0, l = o ? parseFloat(o.getAttribute(\"cy\")) : 0, h = o ? parseFloat(o.getAttribute(\"barWidth\")) : 0, c = a.getElGrid().getBoundingClientRect(), d = o && (o.classList.contains(\"apexcharts-candlestick-area\") || o.classList.contains(\"apexcharts-boxPlot-area\"));\n                i.globals.isXNumeric ? (o && !d && (n -= s % 2 != 0 ? h / 2 : 0), o && d && i.globals.comboCharts && (n -= h / 2)) : i.globals.isBarHorizontal || (n = a.xAxisTicksPositions[t - 1] + a.dataPointsDividedWidth / 2, isNaN(n) && (n = a.xAxisTicksPositions[t] - a.dataPointsDividedWidth / 2)), i.globals.isBarHorizontal ? l -= a.tooltipRect.ttHeight : i.config.tooltip.followCursor ? l = a.e.clientY - c.top - a.tooltipRect.ttHeight / 2 : l + a.tooltipRect.ttHeight + 15 > i.globals.gridHeight && (l = i.globals.gridHeight), i.globals.isBarHorizontal || this.moveXCrosshairs(n), a.fixedTooltip || this.moveTooltip(n, l || i.globals.gridHeight);\n            }\n        }\n    ]), t;\n}(), pt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx, this.tooltipPosition = new ut(e);\n    }\n    return r(t, [\n        {\n            key: \"drawDynamicPoints\",\n            value: function() {\n                var t = this.w, e = new m(this.ctx), i = new H(this.ctx), a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n                a = u(a), t.config.chart.stacked && a.sort(function(t, e) {\n                    return parseFloat(t.getAttribute(\"data:realIndex\")) - parseFloat(e.getAttribute(\"data:realIndex\"));\n                });\n                for(var s = 0; s < a.length; s++){\n                    var r = a[s].querySelector(\".apexcharts-series-markers-wrap\");\n                    if (null !== r) {\n                        var o = void 0, n = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));\n                        \"line\" !== t.config.chart.type && \"area\" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (n += \" no-pointer-events\");\n                        var l = i.getMarkerConfig({\n                            cssClass: n,\n                            seriesIndex: Number(r.getAttribute(\"data:realIndex\"))\n                        });\n                        (o = e.drawMarker(0, 0, l)).node.setAttribute(\"default-marker-size\", 0);\n                        var h = document.createElementNS(t.globals.SVGNS, \"g\");\n                        h.classList.add(\"apexcharts-series-markers\"), h.appendChild(o.node), r.appendChild(h);\n                    }\n                }\n            }\n        },\n        {\n            key: \"enlargeCurrentPoint\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s = this.w;\n                \"bubble\" !== s.config.chart.type && this.newPointSize(t, e);\n                var r = e.getAttribute(\"cx\"), o = e.getAttribute(\"cy\");\n                if (null !== i && null !== a && (r = i, o = a), this.tooltipPosition.moveXCrosshairs(r), !this.fixedTooltip) {\n                    if (\"radar\" === s.config.chart.type) {\n                        var n = this.ttCtx.getElGrid().getBoundingClientRect();\n                        r = this.ttCtx.e.clientX - n.left;\n                    }\n                    this.tooltipPosition.moveTooltip(r, o, s.config.markers.hover.size);\n                }\n            }\n        },\n        {\n            key: \"enlargePoints\",\n            value: function(t) {\n                for(var e = this.w, i = this, a = this.ttCtx, s = t, r = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), o = e.config.markers.hover.size, n = 0; n < r.length; n++){\n                    var l = r[n].getAttribute(\"rel\"), h = r[n].getAttribute(\"index\");\n                    if (void 0 === o && (o = e.globals.markers.size[h] + e.config.markers.hover.sizeOffset), s === parseInt(l, 10)) {\n                        i.newPointSize(s, r[n]);\n                        var c = r[n].getAttribute(\"cx\"), d = r[n].getAttribute(\"cy\");\n                        i.tooltipPosition.moveXCrosshairs(c), a.fixedTooltip || i.tooltipPosition.moveTooltip(c, d, o);\n                    } else i.oldPointSize(r[n]);\n                }\n            }\n        },\n        {\n            key: \"newPointSize\",\n            value: function(t, e) {\n                var i = this.w, a = i.config.markers.hover.size, s = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;\n                if (\"0\" !== s.getAttribute(\"default-marker-size\")) {\n                    var r = parseInt(s.getAttribute(\"index\"), 10);\n                    void 0 === a && (a = i.globals.markers.size[r] + i.config.markers.hover.sizeOffset), a < 0 && (a = 0), s.setAttribute(\"r\", a);\n                }\n            }\n        },\n        {\n            key: \"oldPointSize\",\n            value: function(t) {\n                var e = parseFloat(t.getAttribute(\"default-marker-size\"));\n                t.setAttribute(\"r\", e);\n            }\n        },\n        {\n            key: \"resetPointsSize\",\n            value: function() {\n                for(var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), e = 0; e < t.length; e++){\n                    var i = parseFloat(t[e].getAttribute(\"default-marker-size\"));\n                    x.isNumber(i) && i >= 0 ? t[e].setAttribute(\"r\", i) : t[e].setAttribute(\"r\", 0);\n                }\n            }\n        }\n    ]), t;\n}(), ft = function() {\n    function t(e) {\n        a(this, t), this.w = e.w;\n        var i = this.w;\n        this.ttCtx = e, this.isVerticalGroupedRangeBar = !i.globals.isBarHorizontal && \"rangeBar\" === i.config.chart.type && i.config.plotOptions.bar.rangeBarGroupRows;\n    }\n    return r(t, [\n        {\n            key: \"getAttr\",\n            value: function(t, e) {\n                return parseFloat(t.target.getAttribute(e));\n            }\n        },\n        {\n            key: \"handleHeatTreeTooltip\",\n            value: function(t) {\n                var e = t.e, i = t.opt, a = t.x, s = t.y, r = t.type, o = this.ttCtx, n = this.w;\n                if (e.target.classList.contains(\"apexcharts-\".concat(r, \"-rect\"))) {\n                    var l = this.getAttr(e, \"i\"), h = this.getAttr(e, \"j\"), c = this.getAttr(e, \"cx\"), d = this.getAttr(e, \"cy\"), g = this.getAttr(e, \"width\"), u = this.getAttr(e, \"height\");\n                    if (o.tooltipLabels.drawSeriesTexts({\n                        ttItems: i.ttItems,\n                        i: l,\n                        j: h,\n                        shared: !1,\n                        e: e\n                    }), n.globals.capturedSeriesIndex = l, n.globals.capturedDataPointIndex = h, a = c + o.tooltipRect.ttWidth / 2 + g, s = d + o.tooltipRect.ttHeight / 2 - u / 2, o.tooltipPosition.moveXCrosshairs(c + g / 2), a > n.globals.gridWidth / 2 && (a = c - o.tooltipRect.ttWidth / 2 + g), o.w.config.tooltip.followCursor) {\n                        var p = n.globals.dom.elWrap.getBoundingClientRect();\n                        a = n.globals.clientX - p.left - (a > n.globals.gridWidth / 2 ? o.tooltipRect.ttWidth : 0), s = n.globals.clientY - p.top - (s > n.globals.gridHeight / 2 ? o.tooltipRect.ttHeight : 0);\n                    }\n                }\n                return {\n                    x: a,\n                    y: s\n                };\n            }\n        },\n        {\n            key: \"handleMarkerTooltip\",\n            value: function(t) {\n                var e, i, a = t.e, s = t.opt, r = t.x, o = t.y, n = this.w, l = this.ttCtx;\n                if (a.target.classList.contains(\"apexcharts-marker\")) {\n                    var h = parseInt(s.paths.getAttribute(\"cx\"), 10), c = parseInt(s.paths.getAttribute(\"cy\"), 10), d = parseFloat(s.paths.getAttribute(\"val\"));\n                    if (i = parseInt(s.paths.getAttribute(\"rel\"), 10), e = parseInt(s.paths.parentNode.parentNode.parentNode.getAttribute(\"rel\"), 10) - 1, l.intersect) {\n                        var g = x.findAncestor(s.paths, \"apexcharts-series\");\n                        g && (e = parseInt(g.getAttribute(\"data:realIndex\"), 10));\n                    }\n                    if (l.tooltipLabels.drawSeriesTexts({\n                        ttItems: s.ttItems,\n                        i: e,\n                        j: i,\n                        shared: !l.showOnIntersect && n.config.tooltip.shared,\n                        e: a\n                    }), \"mouseup\" === a.type && l.markerClick(a, e, i), n.globals.capturedSeriesIndex = e, n.globals.capturedDataPointIndex = i, r = h, o = c + n.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {\n                        var u = l.getElGrid().getBoundingClientRect();\n                        o = l.e.clientY + n.globals.translateY - u.top;\n                    }\n                    d < 0 && (o = c), l.marker.enlargeCurrentPoint(i, s.paths, r, o);\n                }\n                return {\n                    x: r,\n                    y: o\n                };\n            }\n        },\n        {\n            key: \"handleBarTooltip\",\n            value: function(t) {\n                var e, i, a = t.e, s = t.opt, r = this.w, o = this.ttCtx, n = o.getElTooltip(), l = 0, h = 0, c = 0, d = this.getBarTooltipXY({\n                    e: a,\n                    opt: s\n                });\n                e = d.i;\n                var g = d.barHeight, u = d.j;\n                r.globals.capturedSeriesIndex = e, r.globals.capturedDataPointIndex = u, r.globals.isBarHorizontal && o.tooltipUtil.hasBars() || !r.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(r.config.stroke.width) ? r.config.stroke.width[e] : r.config.stroke.width, l = h) : r.globals.comboCharts || r.config.tooltip.shared || (l /= 2), isNaN(c) && (c = r.globals.svgHeight - o.tooltipRect.ttHeight);\n                var p = parseInt(s.paths.parentNode.getAttribute(\"data:realIndex\"), 10), f = r.globals.isMultipleYAxis ? r.config.yaxis[p] && r.config.yaxis[p].reversed : r.config.yaxis[0].reversed;\n                if (h + o.tooltipRect.ttWidth > r.globals.gridWidth && !f ? h -= o.tooltipRect.ttWidth : h < 0 && (h = 0), o.w.config.tooltip.followCursor) {\n                    var x = o.getElGrid().getBoundingClientRect();\n                    c = o.e.clientY - x.top;\n                }\n                null === o.tooltip && (o.tooltip = r.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\")), r.config.tooltip.shared || (r.globals.comboBarCount > 0 ? o.tooltipPosition.moveXCrosshairs(l + i / 2) : o.tooltipPosition.moveXCrosshairs(l)), !o.fixedTooltip && (!r.config.tooltip.shared || r.globals.isBarHorizontal && o.tooltipUtil.hasBars()) && (f && (h -= o.tooltipRect.ttWidth) < 0 && (h = 0), !f || r.globals.isBarHorizontal && o.tooltipUtil.hasBars() || (c = c + g - 2 * (r.globals.series[e][u] < 0 ? g : 0)), c = c + r.globals.translateY - o.tooltipRect.ttHeight / 2, n.style.left = h + r.globals.translateX + \"px\", n.style.top = c + \"px\");\n            }\n        },\n        {\n            key: \"getBarTooltipXY\",\n            value: function(t) {\n                var e = this, i = t.e, a = t.opt, s = this.w, r = null, o = this.ttCtx, n = 0, l = 0, h = 0, c = 0, d = 0, g = i.target.classList;\n                if (g.contains(\"apexcharts-bar-area\") || g.contains(\"apexcharts-candlestick-area\") || g.contains(\"apexcharts-boxPlot-area\") || g.contains(\"apexcharts-rangebar-area\")) {\n                    var u = i.target, p = u.getBoundingClientRect(), f = a.elGrid.getBoundingClientRect(), x = p.height;\n                    d = p.height;\n                    var b = p.width, v = parseInt(u.getAttribute(\"cx\"), 10), m = parseInt(u.getAttribute(\"cy\"), 10);\n                    c = parseFloat(u.getAttribute(\"barWidth\"));\n                    var y = \"touchmove\" === i.type ? i.touches[0].clientX : i.clientX;\n                    r = parseInt(u.getAttribute(\"j\"), 10), n = parseInt(u.parentNode.getAttribute(\"rel\"), 10) - 1;\n                    var w = u.getAttribute(\"data-range-y1\"), k = u.getAttribute(\"data-range-y2\");\n                    s.globals.comboCharts && (n = parseInt(u.parentNode.getAttribute(\"data:realIndex\"), 10));\n                    var A = function(t) {\n                        return s.globals.isXNumeric ? v - b / 2 : e.isVerticalGroupedRangeBar ? v + b / 2 : v - o.dataPointsDividedWidth + b / 2;\n                    }, S = function() {\n                        return m - o.dataPointsDividedHeight + x / 2 - o.tooltipRect.ttHeight / 2;\n                    };\n                    o.tooltipLabels.drawSeriesTexts({\n                        ttItems: a.ttItems,\n                        i: n,\n                        j: r,\n                        y1: w ? parseInt(w, 10) : null,\n                        y2: k ? parseInt(k, 10) : null,\n                        shared: !o.showOnIntersect && s.config.tooltip.shared,\n                        e: i\n                    }), s.config.tooltip.followCursor ? s.globals.isBarHorizontal ? (l = y - f.left + 15, h = S()) : (l = A(), h = i.clientY - f.top - o.tooltipRect.ttHeight / 2 - 15) : s.globals.isBarHorizontal ? ((l = v) < o.xyRatios.baseLineInvertedY && (l = v - o.tooltipRect.ttWidth), h = S()) : (l = A(), h = m);\n                }\n                return {\n                    x: l,\n                    y: h,\n                    barHeight: d,\n                    barWidth: c,\n                    i: n,\n                    j: r\n                };\n            }\n        }\n    ]), t;\n}(), xt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.ttCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"drawXaxisTooltip\",\n            value: function() {\n                var t = this.w, e = this.ttCtx, i = \"bottom\" === t.config.xaxis.position;\n                e.xaxisOffY = i ? t.globals.gridHeight + 1 : -t.globals.xAxisHeight - t.config.xaxis.axisTicks.height + 3;\n                var a = i ? \"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom\" : \"apexcharts-xaxistooltip apexcharts-xaxistooltip-top\", s = t.globals.dom.elWrap;\n                e.isXAxisTooltipEnabled && null === t.globals.dom.baseEl.querySelector(\".apexcharts-xaxistooltip\") && (e.xaxisTooltip = document.createElement(\"div\"), e.xaxisTooltip.setAttribute(\"class\", a + \" apexcharts-theme-\" + t.config.tooltip.theme), s.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement(\"div\"), e.xaxisTooltipText.classList.add(\"apexcharts-xaxistooltip-text\"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));\n            }\n        },\n        {\n            key: \"drawYaxisTooltip\",\n            value: function() {\n                for(var t = this.w, e = this.ttCtx, i = function(i) {\n                    var a = t.config.yaxis[i].opposite || t.config.yaxis[i].crosshairs.opposite;\n                    e.yaxisOffX = a ? t.globals.gridWidth + 1 : 1;\n                    var s = \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, a ? \" apexcharts-yaxistooltip-right\" : \" apexcharts-yaxistooltip-left\");\n                    t.globals.yAxisSameScaleIndices.map(function(e, a) {\n                        e.map(function(e, a) {\n                            a === i && (s += t.config.yaxis[a].show ? \" \" : \" apexcharts-yaxistooltip-hidden\");\n                        });\n                    });\n                    var r = t.globals.dom.elWrap;\n                    null === t.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i)) && (e.yaxisTooltip = document.createElement(\"div\"), e.yaxisTooltip.setAttribute(\"class\", s + \" apexcharts-theme-\" + t.config.tooltip.theme), r.appendChild(e.yaxisTooltip), 0 === i && (e.yaxisTooltipText = []), e.yaxisTooltipText[i] = document.createElement(\"div\"), e.yaxisTooltipText[i].classList.add(\"apexcharts-yaxistooltip-text\"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));\n                }, a = 0; a < t.config.yaxis.length; a++)i(a);\n            }\n        },\n        {\n            key: \"setXCrosshairWidth\",\n            value: function() {\n                var t = this.w, e = this.ttCtx, i = e.getElXCrosshairs();\n                if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10), t.globals.comboCharts) {\n                    var a = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n                    if (null !== a && \"barWidth\" === t.config.xaxis.crosshairs.width) {\n                        var s = parseFloat(a.getAttribute(\"barWidth\"));\n                        e.xcrosshairsWidth = s;\n                    } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n                        var r = t.globals.labels.length;\n                        e.xcrosshairsWidth = t.globals.gridWidth / r;\n                    }\n                } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n                    var o = t.globals.labels.length;\n                    e.xcrosshairsWidth = t.globals.gridWidth / o;\n                } else if (\"barWidth\" === t.config.xaxis.crosshairs.width) {\n                    var n = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n                    if (null !== n) {\n                        var l = parseFloat(n.getAttribute(\"barWidth\"));\n                        e.xcrosshairsWidth = l;\n                    } else e.xcrosshairsWidth = 1;\n                }\n                t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute(\"width\", e.xcrosshairsWidth);\n            }\n        },\n        {\n            key: \"handleYCrosshair\",\n            value: function() {\n                var t = this.w, e = this.ttCtx;\n                e.ycrosshairs = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs\"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs-hidden\");\n            }\n        },\n        {\n            key: \"drawYaxisTooltipText\",\n            value: function(t, e, i) {\n                var a = this.ttCtx, s = this.w, r = s.globals.yLabelFormatters[t];\n                if (a.yaxisTooltips[t]) {\n                    var o = a.getElGrid().getBoundingClientRect(), n = (e - o.top) * i.yRatio[t], l = s.globals.maxYArr[t] - s.globals.minYArr[t], h = s.globals.minYArr[t] + (l - n);\n                    a.tooltipPosition.moveYCrosshairs(e - o.top), a.yaxisTooltipText[t].innerHTML = r(h), a.tooltipPosition.moveYAxisTooltip(t);\n                }\n            }\n        }\n    ]), t;\n}(), bt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n        var i = this.w;\n        this.tConfig = i.config.tooltip, this.tooltipUtil = new dt(this), this.tooltipLabels = new gt(this), this.tooltipPosition = new ut(this), this.marker = new pt(this), this.intersect = new ft(this), this.axesTooltip = new xt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();\n    }\n    return r(t, [\n        {\n            key: \"getElTooltip\",\n            value: function(t) {\n                return t || (t = this), t.w.globals.dom.baseEl ? t.w.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\") : null;\n            }\n        },\n        {\n            key: \"getElXCrosshairs\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-xcrosshairs\");\n            }\n        },\n        {\n            key: \"getElGrid\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-grid\");\n            }\n        },\n        {\n            key: \"drawTooltip\",\n            value: function(t) {\n                var e = this.w;\n                this.xyRatios = t, this.isXAxisTooltipEnabled = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.yaxisTooltips = e.config.yaxis.map(function(t, i) {\n                    return !!(t.show && t.tooltip.enabled && e.globals.axisCharts);\n                }), this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);\n                var i = document.createElement(\"div\");\n                if (i.classList.add(\"apexcharts-tooltip\"), e.config.tooltip.cssClass && i.classList.add(e.config.tooltip.cssClass), i.classList.add(\"apexcharts-theme-\".concat(this.tConfig.theme)), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {\n                    this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();\n                    var a = new V(this.ctx);\n                    this.xAxisTicksPositions = a.getXAxisTicksPositions();\n                }\n                if (!e.globals.comboCharts && !this.tConfig.intersect && \"rangeBar\" !== e.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {\n                    this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement(\"div\"), this.tooltipTitle.classList.add(\"apexcharts-tooltip-title\"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));\n                    var s = e.globals.series.length;\n                    (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (s = this.showOnIntersect ? 1 : e.globals.series.length), this.legendLabels = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-legend-text\"), this.ttItems = this.createTTElements(s), this.addSVGEvents();\n                }\n            }\n        },\n        {\n            key: \"createTTElements\",\n            value: function(t) {\n                for(var e = this, i = this.w, a = [], s = this.getElTooltip(), r = function(r) {\n                    var o = document.createElement(\"div\");\n                    o.classList.add(\"apexcharts-tooltip-series-group\"), o.style.order = i.config.tooltip.inverseOrder ? t - r : r + 1, e.tConfig.shared && e.tConfig.enabledOnSeries && Array.isArray(e.tConfig.enabledOnSeries) && e.tConfig.enabledOnSeries.indexOf(r) < 0 && o.classList.add(\"apexcharts-tooltip-series-group-hidden\");\n                    var n = document.createElement(\"span\");\n                    n.classList.add(\"apexcharts-tooltip-marker\"), n.style.backgroundColor = i.globals.colors[r], o.appendChild(n);\n                    var l = document.createElement(\"div\");\n                    l.classList.add(\"apexcharts-tooltip-text\"), l.style.fontFamily = e.tConfig.style.fontFamily || i.config.chart.fontFamily, l.style.fontSize = e.tConfig.style.fontSize, [\n                        \"y\",\n                        \"goals\",\n                        \"z\"\n                    ].forEach(function(t) {\n                        var e = document.createElement(\"div\");\n                        e.classList.add(\"apexcharts-tooltip-\".concat(t, \"-group\"));\n                        var i = document.createElement(\"span\");\n                        i.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-label\")), e.appendChild(i);\n                        var a = document.createElement(\"span\");\n                        a.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-value\")), e.appendChild(a), l.appendChild(e);\n                    }), o.appendChild(l), s.appendChild(o), a.push(o);\n                }, o = 0; o < t; o++)r(o);\n                return a;\n            }\n        },\n        {\n            key: \"addSVGEvents\",\n            value: function() {\n                var t = this.w, e = t.config.chart.type, i = this.getElTooltip(), a = !(\"bar\" !== e && \"candlestick\" !== e && \"boxPlot\" !== e && \"rangeBar\" !== e), s = \"area\" === e || \"line\" === e || \"scatter\" === e || \"bubble\" === e || \"radar\" === e, r = t.globals.dom.Paper.node, o = this.getElGrid();\n                o && (this.seriesBound = o.getBoundingClientRect());\n                var n, l = [], h = [], c = {\n                    hoverArea: r,\n                    elGrid: o,\n                    tooltipEl: i,\n                    tooltipY: l,\n                    tooltipX: h,\n                    ttItems: this.ttItems\n                };\n                if (t.globals.axisCharts && (s ? n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:longestSeries='true'] .apexcharts-marker\") : a ? n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area\") : \"heatmap\" !== e && \"treemap\" !== e || (n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap\")), n && n.length)) for(var d = 0; d < n.length; d++)l.push(n[d].getAttribute(\"cy\")), h.push(n[d].getAttribute(\"cx\"));\n                if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || a && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([\n                    r\n                ], c);\n                else if (a && !t.globals.comboCharts || s && this.showOnIntersect) this.addDatapointEventsListeners(c);\n                else if (!t.globals.axisCharts || \"heatmap\" === e || \"treemap\" === e) {\n                    var g = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n                    this.addPathsEventListeners(g, c);\n                }\n                if (this.showOnIntersect) {\n                    var u = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker\");\n                    u.length > 0 && this.addPathsEventListeners(u, c), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c);\n                }\n            }\n        },\n        {\n            key: \"drawFixedTooltipRect\",\n            value: function() {\n                var t = this.w, e = this.getElTooltip(), i = e.getBoundingClientRect(), a = i.width + 10, s = i.height + 10, r = this.tConfig.fixed.offsetX, o = this.tConfig.fixed.offsetY, n = this.tConfig.fixed.position.toLowerCase();\n                return n.indexOf(\"right\") > -1 && (r = r + t.globals.svgWidth - a + 10), n.indexOf(\"bottom\") > -1 && (o = o + t.globals.svgHeight - s - 10), e.style.left = r + \"px\", e.style.top = o + \"px\", {\n                    x: r,\n                    y: o,\n                    ttWidth: a,\n                    ttHeight: s\n                };\n            }\n        },\n        {\n            key: \"addDatapointEventsListeners\",\n            value: function(t) {\n                var e = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area\");\n                this.addPathsEventListeners(e, t);\n            }\n        },\n        {\n            key: \"addPathsEventListeners\",\n            value: function(t, e) {\n                for(var i = this, a = function(a) {\n                    var s = {\n                        paths: t[a],\n                        tooltipEl: e.tooltipEl,\n                        tooltipY: e.tooltipY,\n                        tooltipX: e.tooltipX,\n                        elGrid: e.elGrid,\n                        hoverArea: e.hoverArea,\n                        ttItems: e.ttItems\n                    };\n                    [\n                        \"mousemove\",\n                        \"mouseup\",\n                        \"touchmove\",\n                        \"mouseout\",\n                        \"touchend\"\n                    ].map(function(e) {\n                        return t[a].addEventListener(e, i.onSeriesHover.bind(i, s), {\n                            capture: !1,\n                            passive: !0\n                        });\n                    });\n                }, s = 0; s < t.length; s++)a(s);\n            }\n        },\n        {\n            key: \"onSeriesHover\",\n            value: function(t, e) {\n                var i = this, a = Date.now() - this.lastHoverTime;\n                a >= 100 ? this.seriesHover(t, e) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {\n                    i.seriesHover(t, e);\n                }, 100 - a));\n            }\n        },\n        {\n            key: \"seriesHover\",\n            value: function(t, e) {\n                var i = this;\n                this.lastHoverTime = Date.now();\n                var a = [], s = this.w;\n                s.config.chart.group && (a = this.ctx.getGroupedCharts()), s.globals.axisCharts && (s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0 || 0 === s.globals.dataPoints) || (a.length ? a.forEach(function(a) {\n                    var s = i.getElTooltip(a), r = {\n                        paths: t.paths,\n                        tooltipEl: s,\n                        tooltipY: t.tooltipY,\n                        tooltipX: t.tooltipX,\n                        elGrid: t.elGrid,\n                        hoverArea: t.hoverArea,\n                        ttItems: a.w.globals.tooltip.ttItems\n                    };\n                    a.w.globals.minX === i.w.globals.minX && a.w.globals.maxX === i.w.globals.maxX && a.w.globals.tooltip.seriesHoverByContext({\n                        chartCtx: a,\n                        ttCtx: a.w.globals.tooltip,\n                        opt: r,\n                        e: e\n                    });\n                }) : this.seriesHoverByContext({\n                    chartCtx: this.ctx,\n                    ttCtx: this.w.globals.tooltip,\n                    opt: t,\n                    e: e\n                }));\n            }\n        },\n        {\n            key: \"seriesHoverByContext\",\n            value: function(t) {\n                var e = t.chartCtx, i = t.ttCtx, a = t.opt, s = t.e, r = e.w, o = this.getElTooltip();\n                if (o) {\n                    if (i.tooltipRect = {\n                        x: 0,\n                        y: 0,\n                        ttWidth: o.getBoundingClientRect().width,\n                        ttHeight: o.getBoundingClientRect().height\n                    }, i.e = s, i.tooltipUtil.hasBars() && !r.globals.comboCharts && !i.isBarShared) {\n                        if (this.tConfig.onDatasetHover.highlightDataSeries) new N(e).toggleSeriesOnHover(s, s.target.parentNode);\n                    }\n                    i.fixedTooltip && i.drawFixedTooltipRect(), r.globals.axisCharts ? i.axisChartsTooltips({\n                        e: s,\n                        opt: a,\n                        tooltipRect: i.tooltipRect\n                    }) : i.nonAxisChartsTooltips({\n                        e: s,\n                        opt: a,\n                        tooltipRect: i.tooltipRect\n                    });\n                }\n            }\n        },\n        {\n            key: \"axisChartsTooltips\",\n            value: function(t) {\n                var e, i, a = t.e, s = t.opt, r = this.w, o = s.elGrid.getBoundingClientRect(), n = \"touchmove\" === a.type ? a.touches[0].clientX : a.clientX, l = \"touchmove\" === a.type ? a.touches[0].clientY : a.clientY;\n                if (this.clientY = l, this.clientX = n, r.globals.capturedSeriesIndex = -1, r.globals.capturedDataPointIndex = -1, l < o.top || l > o.top + o.height) this.handleMouseOut(s);\n                else {\n                    if (Array.isArray(this.tConfig.enabledOnSeries) && !r.config.tooltip.shared) {\n                        var h = parseInt(s.paths.getAttribute(\"index\"), 10);\n                        if (this.tConfig.enabledOnSeries.indexOf(h) < 0) return void this.handleMouseOut(s);\n                    }\n                    var c = this.getElTooltip(), d = this.getElXCrosshairs(), g = r.globals.xyCharts || \"bar\" === r.config.chart.type && !r.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r.globals.comboCharts && this.tooltipUtil.hasBars();\n                    if (\"mousemove\" === a.type || \"touchmove\" === a.type || \"mouseup\" === a.type) {\n                        if (r.globals.collapsedSeries.length + r.globals.ancillaryCollapsedSeries.length === r.globals.series.length) return;\n                        null !== d && d.classList.add(\"apexcharts-active\");\n                        var u = this.yaxisTooltips.filter(function(t) {\n                            return !0 === t;\n                        });\n                        if (null !== this.ycrosshairs && u.length && this.ycrosshairs.classList.add(\"apexcharts-active\"), g && !this.showOnIntersect) this.handleStickyTooltip(a, n, l, s);\n                        else if (\"heatmap\" === r.config.chart.type || \"treemap\" === r.config.chart.type) {\n                            var p = this.intersect.handleHeatTreeTooltip({\n                                e: a,\n                                opt: s,\n                                x: e,\n                                y: i,\n                                type: r.config.chart.type\n                            });\n                            e = p.x, i = p.y, c.style.left = e + \"px\", c.style.top = i + \"px\";\n                        } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({\n                            e: a,\n                            opt: s\n                        }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({\n                            e: a,\n                            opt: s,\n                            x: e,\n                            y: i\n                        });\n                        if (this.yaxisTooltips.length) for(var f = 0; f < r.config.yaxis.length; f++)this.axesTooltip.drawYaxisTooltipText(f, l, this.xyRatios);\n                        s.tooltipEl.classList.add(\"apexcharts-active\");\n                    } else \"mouseout\" !== a.type && \"touchend\" !== a.type || this.handleMouseOut(s);\n                }\n            }\n        },\n        {\n            key: \"nonAxisChartsTooltips\",\n            value: function(t) {\n                var e = t.e, i = t.opt, a = t.tooltipRect, s = this.w, r = i.paths.getAttribute(\"rel\"), o = this.getElTooltip(), n = s.globals.dom.elWrap.getBoundingClientRect();\n                if (\"mousemove\" === e.type || \"touchmove\" === e.type) {\n                    o.classList.add(\"apexcharts-active\"), this.tooltipLabels.drawSeriesTexts({\n                        ttItems: i.ttItems,\n                        i: parseInt(r, 10) - 1,\n                        shared: !1\n                    });\n                    var l = s.globals.clientX - n.left - a.ttWidth / 2, h = s.globals.clientY - n.top - a.ttHeight - 10;\n                    if (o.style.left = l + \"px\", o.style.top = h + \"px\", s.config.legend.tooltipHoverFormatter) {\n                        var c = r - 1, d = (0, s.config.legend.tooltipHoverFormatter)(this.legendLabels[c].getAttribute(\"data:default-text\"), {\n                            seriesIndex: c,\n                            dataPointIndex: c,\n                            w: s\n                        });\n                        this.legendLabels[c].innerHTML = d;\n                    }\n                } else \"mouseout\" !== e.type && \"touchend\" !== e.type || (o.classList.remove(\"apexcharts-active\"), s.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t) {\n                    var e = t.getAttribute(\"data:default-text\");\n                    t.innerHTML = decodeURIComponent(e);\n                }));\n            }\n        },\n        {\n            key: \"handleStickyTooltip\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = this.tooltipUtil.getNearestValues({\n                    context: this,\n                    hoverArea: a.hoverArea,\n                    elGrid: a.elGrid,\n                    clientX: e,\n                    clientY: i\n                }), o = r.j, n = r.capturedSeries;\n                s.globals.collapsedSeriesIndices.includes(n) && (n = null);\n                var l = a.elGrid.getBoundingClientRect();\n                if (r.hoverX < 0 || r.hoverX > l.width) this.handleMouseOut(a);\n                else if (null !== n) this.handleStickyCapturedSeries(t, n, a, o);\n                else if (this.tooltipUtil.isXoverlap(o) || s.globals.isBarHorizontal) {\n                    var h = s.globals.series.findIndex(function(t, e) {\n                        return !s.globals.collapsedSeriesIndices.includes(e);\n                    });\n                    this.create(t, this, h, o, a.ttItems);\n                }\n            }\n        },\n        {\n            key: \"handleStickyCapturedSeries\",\n            value: function(t, e, i, a) {\n                var s = this.w;\n                if (!this.tConfig.shared && null === s.globals.series[e][a]) return void this.handleMouseOut(i);\n                if (void 0 !== s.globals.series[e][a]) this.tConfig.shared && this.tooltipUtil.isXoverlap(a) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t, this, e, a, i.ttItems) : this.create(t, this, e, a, i.ttItems, !1);\n                else if (this.tooltipUtil.isXoverlap(a)) {\n                    var r = s.globals.series.findIndex(function(t, e) {\n                        return !s.globals.collapsedSeriesIndices.includes(e);\n                    });\n                    this.create(t, this, r, a, i.ttItems);\n                }\n            }\n        },\n        {\n            key: \"deactivateHoverFilter\",\n            value: function() {\n                for(var t = this.w, e = new m(this.ctx), i = t.globals.dom.Paper.select(\".apexcharts-bar-area\"), a = 0; a < i.length; a++)e.pathMouseLeave(i[a]);\n            }\n        },\n        {\n            key: \"handleMouseOut\",\n            value: function(t) {\n                var e = this.w, i = this.getElXCrosshairs();\n                if (t.tooltipEl.classList.remove(\"apexcharts-active\"), this.deactivateHoverFilter(), \"bubble\" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove(\"apexcharts-active\"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove(\"apexcharts-active\"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove(\"apexcharts-active\"), this.yaxisTooltips.length) {\n                    null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n                    for(var a = 0; a < this.yaxisTTEls.length; a++)this.yaxisTTEls[a].classList.remove(\"apexcharts-active\");\n                }\n                e.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t) {\n                    var e = t.getAttribute(\"data:default-text\");\n                    t.innerHTML = decodeURIComponent(e);\n                });\n            }\n        },\n        {\n            key: \"markerClick\",\n            value: function(t, e, i) {\n                var a = this.w;\n                \"function\" == typeof a.config.chart.events.markerClick && a.config.chart.events.markerClick(t, this.ctx, {\n                    seriesIndex: e,\n                    dataPointIndex: i,\n                    w: a\n                }), this.ctx.events.fireEvent(\"markerClick\", [\n                    t,\n                    this.ctx,\n                    {\n                        seriesIndex: e,\n                        dataPointIndex: i,\n                        w: a\n                    }\n                ]);\n            }\n        },\n        {\n            key: \"create\",\n            value: function(t, i, a, s, r) {\n                var o, n, l, h, c, d, g, u, p, f, x, b, v, y, w, k, A = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, S = this.w, C = i;\n                \"mouseup\" === t.type && this.markerClick(t, a, s), null === A && (A = this.tConfig.shared);\n                var L = this.tooltipUtil.hasMarkers(a), P = this.tooltipUtil.getElBars();\n                if (S.config.legend.tooltipHoverFormatter) {\n                    var I = S.config.legend.tooltipHoverFormatter, T = Array.from(this.legendLabels);\n                    T.forEach(function(t) {\n                        var e = t.getAttribute(\"data:default-text\");\n                        t.innerHTML = decodeURIComponent(e);\n                    });\n                    for(var M = 0; M < T.length; M++){\n                        var z = T[M], X = parseInt(z.getAttribute(\"i\"), 10), E = decodeURIComponent(z.getAttribute(\"data:default-text\")), Y = I(E, {\n                            seriesIndex: A ? X : a,\n                            dataPointIndex: s,\n                            w: S\n                        });\n                        if (A) z.innerHTML = S.globals.collapsedSeriesIndices.indexOf(X) < 0 ? Y : E;\n                        else if (z.innerHTML = X === a ? Y : E, a === X) break;\n                    }\n                }\n                var F = e(e({\n                    ttItems: r,\n                    i: a,\n                    j: s\n                }, void 0 !== (null === (o = S.globals.seriesRange) || void 0 === o || null === (n = o[a]) || void 0 === n || null === (l = n[s]) || void 0 === l || null === (h = l.y[0]) || void 0 === h ? void 0 : h.y1) && {\n                    y1: null === (c = S.globals.seriesRange) || void 0 === c || null === (d = c[a]) || void 0 === d || null === (g = d[s]) || void 0 === g || null === (u = g.y[0]) || void 0 === u ? void 0 : u.y1\n                }), void 0 !== (null === (p = S.globals.seriesRange) || void 0 === p || null === (f = p[a]) || void 0 === f || null === (x = f[s]) || void 0 === x || null === (b = x.y[0]) || void 0 === b ? void 0 : b.y2) && {\n                    y2: null === (v = S.globals.seriesRange) || void 0 === v || null === (y = v[a]) || void 0 === y || null === (w = y[s]) || void 0 === w || null === (k = w.y[0]) || void 0 === k ? void 0 : k.y2\n                });\n                if (A) {\n                    if (C.tooltipLabels.drawSeriesTexts(e(e({}, F), {}, {\n                        shared: !this.showOnIntersect && this.tConfig.shared\n                    })), L) S.globals.markers.largestSize > 0 ? C.marker.enlargePoints(s) : C.tooltipPosition.moveDynamicPointsOnHover(s);\n                    else if (this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(P), this.barSeriesHeight > 0)) {\n                        var R = new m(this.ctx), H = S.globals.dom.Paper.select(\".apexcharts-bar-area[j='\".concat(s, \"']\"));\n                        this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(s, a);\n                        for(var D = 0; D < H.length; D++)R.pathMouseEnter(H[D]);\n                    }\n                } else C.tooltipLabels.drawSeriesTexts(e({\n                    shared: !1\n                }, F)), this.tooltipUtil.hasBars() && C.tooltipPosition.moveStickyTooltipOverBars(s, a), L && C.tooltipPosition.moveMarkers(a, s);\n            }\n        }\n    ]), t;\n}(), vt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.barCtx = e, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);\n    }\n    return r(t, [\n        {\n            key: \"handleBarDataLabels\",\n            value: function(t) {\n                var e = t.x, i = t.y, a = t.y1, s = t.y2, r = t.i, o = t.j, n = t.realIndex, l = t.groupIndex, h = t.series, c = t.barHeight, d = t.barWidth, g = t.barXPosition, u = t.barYPosition, p = t.visibleSeries, f = t.renderedPath, x = this.w, b = new m(this.barCtx.ctx), v = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n] : this.barCtx.strokeWidth, y = e + parseFloat(d * p), w = i + parseFloat(c * p);\n                x.globals.isXNumeric && !x.globals.isBarHorizontal && (y = e + parseFloat(d * (p + 1)), w = i + parseFloat(c * (p + 1)) - v);\n                var k, A = null, S = e, C = i, L = {}, P = x.config.dataLabels, I = this.barCtx.barOptions.dataLabels, T = this.barCtx.barOptions.dataLabels.total;\n                void 0 !== u && this.barCtx.isRangeBar && (w = u, C = u), void 0 !== g && this.barCtx.isVerticalGroupedRangeBar && (y = g, S = g);\n                var M = P.offsetX, z = P.offsetY, X = {\n                    width: 0,\n                    height: 0\n                };\n                if (x.config.dataLabels.enabled) {\n                    var E = this.barCtx.series[r][o];\n                    X = b.getTextRects(x.globals.yLabelFormatters[0](E), parseFloat(P.style.fontSize));\n                }\n                var Y = {\n                    x: e,\n                    y: i,\n                    i: r,\n                    j: o,\n                    realIndex: n,\n                    groupIndex: l || -1,\n                    renderedPath: f,\n                    bcx: y,\n                    bcy: w,\n                    barHeight: c,\n                    barWidth: d,\n                    textRects: X,\n                    strokeWidth: v,\n                    dataLabelsX: S,\n                    dataLabelsY: C,\n                    dataLabelsConfig: P,\n                    barDataLabelsConfig: I,\n                    barTotalDataLabelsConfig: T,\n                    offX: M,\n                    offY: z\n                };\n                return L = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(Y) : this.calculateColumnsDataLabelsPosition(Y), f.attr({\n                    cy: L.bcy,\n                    cx: L.bcx,\n                    j: o,\n                    val: h[r][o],\n                    barHeight: c,\n                    barWidth: d\n                }), k = this.drawCalculatedDataLabels({\n                    x: L.dataLabelsX,\n                    y: L.dataLabelsY,\n                    val: this.barCtx.isRangeBar ? [\n                        a,\n                        s\n                    ] : h[r][o],\n                    i: n,\n                    j: o,\n                    barWidth: d,\n                    barHeight: c,\n                    textRects: X,\n                    dataLabelsConfig: P\n                }), x.config.chart.stacked && T.enabled && (A = this.drawTotalDataLabels({\n                    x: L.totalDataLabelsX,\n                    y: L.totalDataLabelsY,\n                    barWidth: d,\n                    barHeight: c,\n                    realIndex: n,\n                    textAnchor: L.totalDataLabelsAnchor,\n                    val: this.getStackedTotalDataLabel({\n                        realIndex: n,\n                        j: o\n                    }),\n                    dataLabelsConfig: P,\n                    barTotalDataLabelsConfig: T\n                })), {\n                    dataLabels: k,\n                    totalDataLabels: A\n                };\n            }\n        },\n        {\n            key: \"getStackedTotalDataLabel\",\n            value: function(t) {\n                var i = t.realIndex, a = t.j, s = this.w, r = this.barCtx.stackedSeriesTotals[a];\n                return this.totalFormatter && (r = this.totalFormatter(r, e(e({}, s), {}, {\n                    seriesIndex: i,\n                    dataPointIndex: a,\n                    w: s\n                }))), r;\n            }\n        },\n        {\n            key: \"calculateColumnsDataLabelsPosition\",\n            value: function(t) {\n                var e, i, a = this.w, s = t.i, r = t.j, o = t.realIndex, n = t.groupIndex, l = t.y, h = t.bcx, c = t.barWidth, d = t.barHeight, g = t.textRects, u = t.dataLabelsX, p = t.dataLabelsY, f = t.dataLabelsConfig, x = t.barDataLabelsConfig, b = t.barTotalDataLabelsConfig, v = t.strokeWidth, y = t.offX, w = t.offY;\n                d = Math.abs(d);\n                var k = \"vertical\" === a.config.plotOptions.bar.dataLabels.orientation, A = this.barCtx.barHelpers.getZeroValueEncounters({\n                    i: s,\n                    j: r\n                }).zeroEncounters;\n                h = h - v / 2 + (-1 !== n ? n * c : 0);\n                var S = a.globals.gridWidth / a.globals.dataPoints;\n                if (this.barCtx.isVerticalGroupedRangeBar ? u += c / 2 : (u = a.globals.isXNumeric ? h - c / 2 + y : h - S + c / 2 + y, A > 0 && a.config.plotOptions.bar.hideZeroBarsWhenGrouped && (u -= c * A)), k) {\n                    u = u + g.height / 2 - v / 2 - 2;\n                }\n                var C = this.barCtx.series[s][r] < 0, L = l;\n                switch(this.barCtx.isReversed && (L = l - d + (C ? 2 * d : 0), l -= d), x.position){\n                    case \"center\":\n                        p = k ? C ? L - d / 2 + w : L + d / 2 - w : C ? L - d / 2 + g.height / 2 + w : L + d / 2 + g.height / 2 - w;\n                        break;\n                    case \"bottom\":\n                        p = k ? C ? L - d + w : L + d - w : C ? L - d + g.height + v + w : L + d - g.height / 2 + v - w;\n                        break;\n                    case \"top\":\n                        p = k ? C ? L + w : L - w : C ? L - g.height / 2 - w : L + g.height + w;\n                }\n                if (this.barCtx.lastActiveBarSerieIndex === o && b.enabled) {\n                    var P = new m(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({\n                        realIndex: o,\n                        j: r\n                    }), f.fontSize);\n                    e = C ? L - P.height / 2 - w - b.offsetY + 18 : L + P.height + w + b.offsetY - 18, i = u + b.offsetX;\n                }\n                return a.config.chart.stacked || (p < 0 ? p = 0 + v : p + g.height / 3 > a.globals.gridHeight && (p = a.globals.gridHeight - v)), {\n                    bcx: h,\n                    bcy: l,\n                    dataLabelsX: u,\n                    dataLabelsY: p,\n                    totalDataLabelsX: i,\n                    totalDataLabelsY: e,\n                    totalDataLabelsAnchor: \"middle\"\n                };\n            }\n        },\n        {\n            key: \"calculateBarsDataLabelsPosition\",\n            value: function(t) {\n                var e = this.w, i = t.x, a = t.i, s = t.j, r = t.realIndex, o = t.groupIndex, n = t.bcy, l = t.barHeight, h = t.barWidth, c = t.textRects, d = t.dataLabelsX, g = t.strokeWidth, u = t.dataLabelsConfig, p = t.barDataLabelsConfig, f = t.barTotalDataLabelsConfig, x = t.offX, b = t.offY, v = e.globals.gridHeight / e.globals.dataPoints;\n                h = Math.abs(h);\n                var y, w, k = (n += -1 !== o ? o * l : 0) - (this.barCtx.isRangeBar ? 0 : v) + l / 2 + c.height / 2 + b - 3, A = \"start\", S = this.barCtx.series[a][s] < 0, C = i;\n                switch(this.barCtx.isReversed && (C = i + h - (S ? 2 * h : 0), i = e.globals.gridWidth - h), p.position){\n                    case \"center\":\n                        d = S ? C + h / 2 - x : Math.max(c.width / 2, C - h / 2) + x;\n                        break;\n                    case \"bottom\":\n                        d = S ? C + h - g - Math.round(c.width / 2) - x : C - h + g + Math.round(c.width / 2) + x;\n                        break;\n                    case \"top\":\n                        d = S ? C - g + Math.round(c.width / 2) - x : C - g - Math.round(c.width / 2) + x;\n                }\n                if (this.barCtx.lastActiveBarSerieIndex === r && f.enabled) {\n                    var L = new m(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({\n                        realIndex: r,\n                        j: s\n                    }), u.fontSize);\n                    S ? (y = C - g + Math.round(L.width / 2) - x - f.offsetX - 15, A = \"end\") : y = C - g - Math.round(L.width / 2) + x + f.offsetX + 15, w = k + f.offsetY;\n                }\n                return e.config.chart.stacked || (d < 0 ? d = d + c.width + g : d + c.width / 2 > e.globals.gridWidth && (d = e.globals.gridWidth - c.width - g)), {\n                    bcx: i,\n                    bcy: n,\n                    dataLabelsX: d,\n                    dataLabelsY: k,\n                    totalDataLabelsX: y,\n                    totalDataLabelsY: w,\n                    totalDataLabelsAnchor: A\n                };\n            }\n        },\n        {\n            key: \"drawCalculatedDataLabels\",\n            value: function(t) {\n                var i = t.x, a = t.y, s = t.val, r = t.i, o = t.j, n = t.textRects, l = t.barHeight, h = t.barWidth, c = t.dataLabelsConfig, d = this.w, g = \"rotate(0)\";\n                \"vertical\" === d.config.plotOptions.bar.dataLabels.orientation && (g = \"rotate(-90, \".concat(i, \", \").concat(a, \")\"));\n                var u = new O(this.barCtx.ctx), p = new m(this.barCtx.ctx), f = c.formatter, x = null, b = d.globals.collapsedSeriesIndices.indexOf(r) > -1;\n                if (c.enabled && !b) {\n                    x = p.group({\n                        class: \"apexcharts-data-labels\",\n                        transform: g\n                    });\n                    var v = \"\";\n                    void 0 !== s && (v = f(s, e(e({}, d), {}, {\n                        seriesIndex: r,\n                        dataPointIndex: o,\n                        w: d\n                    }))), !s && d.config.plotOptions.bar.hideZeroBarsWhenGrouped && (v = \"\");\n                    var y = d.globals.series[r][o] < 0, w = d.config.plotOptions.bar.dataLabels.position;\n                    if (\"vertical\" === d.config.plotOptions.bar.dataLabels.orientation && (\"top\" === w && (c.textAnchor = y ? \"end\" : \"start\"), \"center\" === w && (c.textAnchor = \"middle\"), \"bottom\" === w && (c.textAnchor = y ? \"end\" : \"start\")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) h < p.getTextRects(v, parseFloat(c.style.fontSize)).width && (v = \"\");\n                    d.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n.width / 1.6 > Math.abs(h) && (v = \"\") : n.height / 1.6 > Math.abs(l) && (v = \"\"));\n                    var k = e({}, c);\n                    this.barCtx.isHorizontal && s < 0 && (\"start\" === c.textAnchor ? k.textAnchor = \"end\" : \"end\" === c.textAnchor && (k.textAnchor = \"start\")), u.plotDataLabelsText({\n                        x: i,\n                        y: a,\n                        text: v,\n                        i: r,\n                        j: o,\n                        parent: x,\n                        dataLabelsConfig: k,\n                        alwaysDrawDataLabel: !0,\n                        offsetCorrection: !0\n                    });\n                }\n                return x;\n            }\n        },\n        {\n            key: \"drawTotalDataLabels\",\n            value: function(t) {\n                var e, i = t.x, a = t.y, s = t.val, r = t.barWidth, o = t.barHeight, n = t.realIndex, l = t.textAnchor, h = t.barTotalDataLabelsConfig, c = this.w, d = new m(this.barCtx.ctx);\n                return h.enabled && void 0 !== i && void 0 !== a && this.barCtx.lastActiveBarSerieIndex === n && (e = d.drawText({\n                    x: i - (!c.globals.isBarHorizontal && c.globals.seriesGroups.length ? r / c.globals.seriesGroups.length : 0),\n                    y: a - (c.globals.isBarHorizontal && c.globals.seriesGroups.length ? o / c.globals.seriesGroups.length : 0),\n                    foreColor: h.style.color,\n                    text: s,\n                    textAnchor: l,\n                    fontFamily: h.style.fontFamily,\n                    fontSize: h.style.fontSize,\n                    fontWeight: h.style.fontWeight\n                })), e;\n            }\n        }\n    ]), t;\n}(), mt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.barCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"initVariables\",\n            value: function(t) {\n                var e = this.w;\n                this.barCtx.series = t, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;\n                for(var i = 0; i < t.length; i++)if (t[i].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t[i].length), e.globals.isXNumeric) for(var a = 0; a < t[i].length; a++)e.globals.seriesX[i][a] > e.globals.minX && e.globals.seriesX[i][a] < e.globals.maxX && this.barCtx.visibleItems++;\n                else this.barCtx.visibleItems = e.globals.dataPoints;\n                0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], e.globals.comboCharts || this.checkZeroSeries({\n                    series: t\n                });\n            }\n        },\n        {\n            key: \"initialPositions\",\n            value: function() {\n                var t, e, i, a, s, r, o, n, l = this.w, h = l.globals.dataPoints;\n                this.barCtx.isRangeBar && (h = l.globals.labels.length);\n                var c = this.barCtx.seriesLen;\n                if (l.config.plotOptions.bar.rangeBarGroupRows && (c = 1), this.barCtx.isHorizontal) s = (i = l.globals.gridHeight / h) / c, l.globals.isXNumeric && (s = (i = l.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s = s * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, -1 === String(this.barCtx.barOptions.barHeight).indexOf(\"%\") && (s = parseInt(this.barCtx.barOptions.barHeight, 10)), n = this.barCtx.baseLineInvertedY + l.globals.padHorizontal + (this.barCtx.isReversed ? l.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), this.barCtx.isFunnel && (n = l.globals.gridWidth / 2), e = (i - s * this.barCtx.seriesLen) / 2;\n                else {\n                    if (a = l.globals.gridWidth / this.barCtx.visibleItems, l.config.xaxis.convertedCatToNumeric && (a = l.globals.gridWidth / l.globals.dataPoints), r = a / c * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l.globals.isXNumeric) {\n                        var d = this.barCtx.xRatio;\n                        l.globals.minXDiff && .5 !== l.globals.minXDiff && l.globals.minXDiff / d > 0 && (a = l.globals.minXDiff / d), (r = a / c * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r = 1);\n                    }\n                    -1 === String(this.barCtx.barOptions.columnWidth).indexOf(\"%\") && (r = parseInt(this.barCtx.barOptions.columnWidth, 10)), o = l.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t = l.globals.padHorizontal + (a - r * this.barCtx.seriesLen) / 2;\n                }\n                return l.globals.barHeight = s, l.globals.barWidth = r, {\n                    x: t,\n                    y: e,\n                    yDivision: i,\n                    xDivision: a,\n                    barHeight: s,\n                    barWidth: r,\n                    zeroH: o,\n                    zeroW: n\n                };\n            }\n        },\n        {\n            key: \"initializeStackedPrevVars\",\n            value: function(t) {\n                var e = t.w;\n                e.globals.hasSeriesGroups ? e.globals.seriesGroups.forEach(function(e) {\n                    t[e] || (t[e] = {}), t[e].prevY = [], t[e].prevX = [], t[e].prevYF = [], t[e].prevXF = [], t[e].prevYVal = [], t[e].prevXVal = [];\n                }) : (t.prevY = [], t.prevX = [], t.prevYF = [], t.prevXF = [], t.prevYVal = [], t.prevXVal = []);\n            }\n        },\n        {\n            key: \"initializeStackedXYVars\",\n            value: function(t) {\n                var e = t.w;\n                e.globals.hasSeriesGroups ? e.globals.seriesGroups.forEach(function(e) {\n                    t[e] || (t[e] = {}), t[e].xArrj = [], t[e].xArrjF = [], t[e].xArrjVal = [], t[e].yArrj = [], t[e].yArrjF = [], t[e].yArrjVal = [];\n                }) : (t.xArrj = [], t.xArrjF = [], t.xArrjVal = [], t.yArrj = [], t.yArrjF = [], t.yArrjVal = []);\n            }\n        },\n        {\n            key: \"getPathFillColor\",\n            value: function(t, e, i, a) {\n                var s, r, o, n, l = this.w, h = new R(this.barCtx.ctx), c = null, d = this.barCtx.barOptions.distributed ? i : e;\n                this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a) {\n                    t[e][i] >= a.from && t[e][i] <= a.to && (c = a.color);\n                });\n                return l.config.series[e].data[i] && l.config.series[e].data[i].fillColor && (c = l.config.series[e].data[i].fillColor), h.fillPath({\n                    seriesNumber: this.barCtx.barOptions.distributed ? d : a,\n                    dataPointIndex: i,\n                    color: c,\n                    value: t[e][i],\n                    fillConfig: null === (s = l.config.series[e].data[i]) || void 0 === s ? void 0 : s.fill,\n                    fillType: null !== (r = l.config.series[e].data[i]) && void 0 !== r && null !== (o = r.fill) && void 0 !== o && o.type ? null === (n = l.config.series[e].data[i]) || void 0 === n ? void 0 : n.fill.type : Array.isArray(l.config.fill.type) ? l.config.fill.type[e] : l.config.fill.type\n                });\n            }\n        },\n        {\n            key: \"getStrokeWidth\",\n            value: function(t, e, i) {\n                var a = 0, s = this.w;\n                return void 0 === this.barCtx.series[t][e] || null === this.barCtx.series[t][e] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, s.config.stroke.show && (this.barCtx.isNullValue || (a = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)), a;\n            }\n        },\n        {\n            key: \"shouldApplyRadius\",\n            value: function(t) {\n                var e = this.w, i = !1;\n                return e.config.plotOptions.bar.borderRadius > 0 && (e.config.chart.stacked && \"last\" === e.config.plotOptions.bar.borderRadiusWhenStacked ? this.barCtx.lastActiveBarSerieIndex === t && (i = !0) : i = !0), i;\n            }\n        },\n        {\n            key: \"barBackground\",\n            value: function(t) {\n                var e = t.j, i = t.i, a = t.x1, s = t.x2, r = t.y1, o = t.y2, n = t.elSeries, l = this.w, h = new m(this.barCtx.ctx), c = new N(this.barCtx.ctx).getActiveConfigSeriesIndex();\n                if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c === i) {\n                    e >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e %= this.barCtx.barOptions.colors.backgroundBarColors.length);\n                    var d = this.barCtx.barOptions.colors.backgroundBarColors[e], g = h.drawRect(void 0 !== a ? a : 0, void 0 !== r ? r : 0, void 0 !== s ? s : l.globals.gridWidth, void 0 !== o ? o : l.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d, this.barCtx.barOptions.colors.backgroundBarOpacity);\n                    n.add(g), g.node.classList.add(\"apexcharts-backgroundBar\");\n                }\n            }\n        },\n        {\n            key: \"getColumnPaths\",\n            value: function(t) {\n                var e, i = t.barWidth, a = t.barXPosition, s = t.y1, r = t.y2, o = t.strokeWidth, n = t.seriesGroup, l = t.realIndex, h = t.i, c = t.j, d = t.w, g = new m(this.barCtx.ctx);\n                (o = Array.isArray(o) ? o[l] : o) || (o = 0);\n                var u = i, p = a;\n                null !== (e = d.config.series[l].data[c]) && void 0 !== e && e.columnWidthOffset && (p = a - d.config.series[l].data[c].columnWidthOffset / 2, u = i + d.config.series[l].data[c].columnWidthOffset);\n                var f = p, x = p + u;\n                s += .001, r += .001;\n                var b = g.move(f, s), v = g.move(f, s), y = g.line(x - o, s);\n                if (d.globals.previousPaths.length > 0 && (v = this.barCtx.getPreviousPath(l, c, !1)), b = b + g.line(f, r) + g.line(x - o, r) + g.line(x - o, s) + (\"around\" === d.config.plotOptions.bar.borderRadiusApplication ? \" Z\" : \" z\"), v = v + g.line(f, s) + y + y + y + y + y + g.line(f, s) + (\"around\" === d.config.plotOptions.bar.borderRadiusApplication ? \" Z\" : \" z\"), this.shouldApplyRadius(l) && (b = g.roundPathCorners(b, d.config.plotOptions.bar.borderRadius)), d.config.chart.stacked) {\n                    var w = this.barCtx;\n                    d.globals.hasSeriesGroups && n && (w = this.barCtx[n]), w.yArrj.push(r), w.yArrjF.push(Math.abs(s - r)), w.yArrjVal.push(this.barCtx.series[h][c]);\n                }\n                return {\n                    pathTo: b,\n                    pathFrom: v\n                };\n            }\n        },\n        {\n            key: \"getBarpaths\",\n            value: function(t) {\n                var e, i = t.barYPosition, a = t.barHeight, s = t.x1, r = t.x2, o = t.strokeWidth, n = t.seriesGroup, l = t.realIndex, h = t.i, c = t.j, d = t.w, g = new m(this.barCtx.ctx);\n                (o = Array.isArray(o) ? o[l] : o) || (o = 0);\n                var u = i, p = a;\n                null !== (e = d.config.series[l].data[c]) && void 0 !== e && e.barHeightOffset && (u = i - d.config.series[l].data[c].barHeightOffset / 2, p = a + d.config.series[l].data[c].barHeightOffset);\n                var f = u, x = u + p;\n                s += .001, r += .001;\n                var b = g.move(s, f), v = g.move(s, f);\n                d.globals.previousPaths.length > 0 && (v = this.barCtx.getPreviousPath(l, c, !1));\n                var y = g.line(s, x - o);\n                if (b = b + g.line(r, f) + g.line(r, x - o) + y + (\"around\" === d.config.plotOptions.bar.borderRadiusApplication ? \" Z\" : \" z\"), v = v + g.line(s, f) + y + y + y + y + y + g.line(s, f) + (\"around\" === d.config.plotOptions.bar.borderRadiusApplication ? \" Z\" : \" z\"), this.shouldApplyRadius(l) && (b = g.roundPathCorners(b, d.config.plotOptions.bar.borderRadius)), d.config.chart.stacked) {\n                    var w = this.barCtx;\n                    d.globals.hasSeriesGroups && n && (w = this.barCtx[n]), w.xArrj.push(r), w.xArrjF.push(Math.abs(s - r)), w.xArrjVal.push(this.barCtx.series[h][c]);\n                }\n                return {\n                    pathTo: b,\n                    pathFrom: v\n                };\n            }\n        },\n        {\n            key: \"checkZeroSeries\",\n            value: function(t) {\n                for(var e = t.series, i = this.w, a = 0; a < e.length; a++){\n                    for(var s = 0, r = 0; r < e[i.globals.maxValsInArrayIndex].length; r++)s += e[a][r];\n                    0 === s && this.barCtx.zeroSerieses.push(a);\n                }\n            }\n        },\n        {\n            key: \"getXForValue\",\n            value: function(t, e) {\n                var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e : null;\n                return null != t && (i = e + t / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t / this.barCtx.invertedYRatio : 0)), i;\n            }\n        },\n        {\n            key: \"getYForValue\",\n            value: function(t, e) {\n                var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2] ? e : null;\n                return null != t && (i = e - t / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), i;\n            }\n        },\n        {\n            key: \"getGoalValues\",\n            value: function(t, i, a, s, r) {\n                var n = this, l = this.w, h = [], c = function(e, s) {\n                    var r;\n                    h.push((o(r = {}, t, \"x\" === t ? n.getXForValue(e, i, !1) : n.getYForValue(e, a, !1)), o(r, \"attrs\", s), r));\n                };\n                if (l.globals.seriesGoals[s] && l.globals.seriesGoals[s][r] && Array.isArray(l.globals.seriesGoals[s][r]) && l.globals.seriesGoals[s][r].forEach(function(t) {\n                    c(t.value, t);\n                }), this.barCtx.barOptions.isDumbbell && l.globals.seriesRange.length) {\n                    var d = this.barCtx.barOptions.dumbbellColors ? this.barCtx.barOptions.dumbbellColors : l.globals.colors, g = {\n                        strokeHeight: \"x\" === t ? 0 : l.globals.markers.size[s],\n                        strokeWidth: \"x\" === t ? l.globals.markers.size[s] : 0,\n                        strokeDashArray: 0,\n                        strokeLineCap: \"round\",\n                        strokeColor: Array.isArray(d[s]) ? d[s][0] : d[s]\n                    };\n                    c(l.globals.seriesRangeStart[s][r], g), c(l.globals.seriesRangeEnd[s][r], e(e({}, g), {}, {\n                        strokeColor: Array.isArray(d[s]) ? d[s][1] : d[s]\n                    }));\n                }\n                return h;\n            }\n        },\n        {\n            key: \"drawGoalLine\",\n            value: function(t) {\n                var e = t.barXPosition, i = t.barYPosition, a = t.goalX, s = t.goalY, r = t.barWidth, o = t.barHeight, n = new m(this.barCtx.ctx), l = n.group({\n                    className: \"apexcharts-bar-goals-groups\"\n                });\n                l.node.classList.add(\"apexcharts-element-hidden\"), this.barCtx.w.globals.delayedElements.push({\n                    el: l.node\n                }), l.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(this.barCtx.w.globals.cuid, \")\"));\n                var h = null;\n                return this.barCtx.isHorizontal ? Array.isArray(a) && a.forEach(function(t) {\n                    var e = void 0 !== t.attrs.strokeHeight ? t.attrs.strokeHeight : o / 2, a = i + e + o / 2;\n                    h = n.drawLine(t.x, a - 2 * e, t.x, a, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeWidth ? t.attrs.strokeWidth : 2, t.attrs.strokeLineCap), l.add(h);\n                }) : Array.isArray(s) && s.forEach(function(t) {\n                    var i = void 0 !== t.attrs.strokeWidth ? t.attrs.strokeWidth : r / 2, a = e + i + r / 2;\n                    h = n.drawLine(a - 2 * i, t.y, a, t.y, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeHeight ? t.attrs.strokeHeight : 2, t.attrs.strokeLineCap), l.add(h);\n                }), l;\n            }\n        },\n        {\n            key: \"drawBarShadow\",\n            value: function(t) {\n                var e = t.prevPaths, i = t.currPaths, a = t.color, s = this.w, r = e.x, o = e.x1, n = e.barYPosition, l = i.x, h = i.x1, c = i.barYPosition, d = n + i.barHeight, g = new m(this.barCtx.ctx), u = new x, p = g.move(o, d) + g.line(r, d) + g.line(l, c) + g.line(h, c) + g.line(o, d) + (\"around\" === s.config.plotOptions.bar.borderRadiusApplication ? \" Z\" : \" z\");\n                return g.drawPath({\n                    d: p,\n                    fill: u.shadeColor(.5, x.rgb2hex(a)),\n                    stroke: \"none\",\n                    strokeWidth: 0,\n                    fillOpacity: 1,\n                    classes: \"apexcharts-bar-shadows\"\n                });\n            }\n        },\n        {\n            key: \"getZeroValueEncounters\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = this.w, s = 0, r = 0;\n                return a.globals.seriesPercent.forEach(function(t, a) {\n                    t[i] && s++, a < e && 0 === t[i] && r++;\n                }), {\n                    nonZeroColumns: s,\n                    zeroEncounters: r\n                };\n            }\n        }\n    ]), t;\n}(), yt = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = e, this.w = e.w;\n        var s = this.w;\n        this.barOptions = s.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s.config.stroke.width, this.isNullValue = !1, this.isRangeBar = s.globals.seriesRange.length && this.isHorizontal, this.isVerticalGroupedRangeBar = !s.globals.isBarHorizontal && s.globals.seriesRange.length && s.config.plotOptions.bar.rangeBarGroupRows, this.isFunnel = this.barOptions.isFunnel, this.xyRatios = i, null !== this.xyRatios && (this.xRatio = i.xRatio, this.yRatio = i.yRatio, this.invertedXRatio = i.invertedXRatio, this.invertedYRatio = i.invertedYRatio, this.baseLineY = i.baseLineY, this.baseLineInvertedY = i.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.pathArr = [];\n        var r = new N(this.ctx);\n        this.lastActiveBarSerieIndex = r.getActiveConfigSeriesIndex(\"desc\", [\n            \"bar\",\n            \"column\"\n        ]);\n        var o = r.getBarSeriesIndices(), n = new y(this.ctx);\n        this.stackedSeriesTotals = n.getStackedSeriesTotals(this.w.config.series.map(function(t, e) {\n            return -1 === o.indexOf(e) ? e : -1;\n        }).filter(function(t) {\n            return -1 !== t;\n        })), this.barHelpers = new mt(this);\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t, i) {\n                var a = this.w, s = new m(this.ctx), r = new y(this.ctx, a);\n                t = r.getLogSeries(t), this.series = t, this.yRatio = r.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n                var o = s.group({\n                    class: \"apexcharts-bar-series apexcharts-plot-series\"\n                });\n                a.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn(\"WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering - ApexCharts\");\n                for(var n = 0, l = 0; n < t.length; n++, l++){\n                    var h, c, d, g, u = void 0, p = void 0, f = [], b = [], v = a.globals.comboCharts ? i[n] : n, w = s.group({\n                        class: \"apexcharts-series\",\n                        rel: n + 1,\n                        seriesName: x.escapeString(a.globals.seriesNames[v]),\n                        \"data:realIndex\": v\n                    });\n                    this.ctx.series.addCollapsedClassToSeries(w, v), t[n].length > 0 && (this.visibleI = this.visibleI + 1);\n                    var k = 0, A = 0;\n                    this.yRatio.length > 1 && (this.yaxisIndex = v), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed;\n                    var S = this.barHelpers.initialPositions();\n                    p = S.y, k = S.barHeight, c = S.yDivision, g = S.zeroW, u = S.x, A = S.barWidth, h = S.xDivision, d = S.zeroH, this.horizontal || b.push(u + A / 2);\n                    var C = s.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": v\n                    });\n                    a.globals.delayedElements.push({\n                        el: C.node\n                    }), C.node.classList.add(\"apexcharts-element-hidden\");\n                    var L = s.group({\n                        class: \"apexcharts-bar-goals-markers\"\n                    }), P = s.group({\n                        class: \"apexcharts-bar-shadows\"\n                    });\n                    a.globals.delayedElements.push({\n                        el: P.node\n                    }), P.node.classList.add(\"apexcharts-element-hidden\");\n                    for(var I = 0; I < a.globals.dataPoints; I++){\n                        var T = this.barHelpers.getStrokeWidth(n, I, v), M = null, z = {\n                            indexes: {\n                                i: n,\n                                j: I,\n                                realIndex: v,\n                                bc: l\n                            },\n                            x: u,\n                            y: p,\n                            strokeWidth: T,\n                            elSeries: w\n                        };\n                        this.isHorizontal ? (M = this.drawBarPaths(e(e({}, z), {}, {\n                            barHeight: k,\n                            zeroW: g,\n                            yDivision: c\n                        })), A = this.series[n][I] / this.invertedYRatio) : (M = this.drawColumnPaths(e(e({}, z), {}, {\n                            xDivision: h,\n                            barWidth: A,\n                            zeroH: d\n                        })), k = this.series[n][I] / this.yRatio[this.yaxisIndex]);\n                        var X = this.barHelpers.getPathFillColor(t, n, I, v);\n                        if (this.isFunnel && this.barOptions.isFunnel3d && this.pathArr.length && I > 0) {\n                            var E = this.barHelpers.drawBarShadow({\n                                color: \"string\" == typeof X && -1 === (null == X ? void 0 : X.indexOf(\"url\")) ? X : x.hexToRgba(a.globals.colors[n]),\n                                prevPaths: this.pathArr[this.pathArr.length - 1],\n                                currPaths: M\n                            });\n                            E && P.add(E);\n                        }\n                        this.pathArr.push(M);\n                        var Y = this.barHelpers.drawGoalLine({\n                            barXPosition: M.barXPosition,\n                            barYPosition: M.barYPosition,\n                            goalX: M.goalX,\n                            goalY: M.goalY,\n                            barHeight: k,\n                            barWidth: A\n                        });\n                        Y && L.add(Y), p = M.y, u = M.x, I > 0 && b.push(u + A / 2), f.push(p), this.renderSeries({\n                            realIndex: v,\n                            pathFill: X,\n                            j: I,\n                            i: n,\n                            pathFrom: M.pathFrom,\n                            pathTo: M.pathTo,\n                            strokeWidth: T,\n                            elSeries: w,\n                            x: u,\n                            y: p,\n                            series: t,\n                            barHeight: M.barHeight ? M.barHeight : k,\n                            barWidth: M.barWidth ? M.barWidth : A,\n                            elDataLabelsWrap: C,\n                            elGoalsMarkers: L,\n                            elBarShadows: P,\n                            visibleSeries: this.visibleI,\n                            type: \"bar\"\n                        });\n                    }\n                    a.globals.seriesXvalues[v] = b, a.globals.seriesYvalues[v] = f, o.add(w);\n                }\n                return o;\n            }\n        },\n        {\n            key: \"renderSeries\",\n            value: function(t) {\n                var e = t.realIndex, i = t.pathFill, a = t.lineFill, s = t.j, r = t.i, o = t.groupIndex, n = t.pathFrom, l = t.pathTo, h = t.strokeWidth, c = t.elSeries, d = t.x, g = t.y, u = t.y1, p = t.y2, f = t.series, x = t.barHeight, b = t.barWidth, y = t.barXPosition, w = t.barYPosition, k = t.elDataLabelsWrap, A = t.elGoalsMarkers, S = t.elBarShadows, C = t.visibleSeries, L = t.type, P = this.w, I = new m(this.ctx);\n                a || (a = this.barOptions.distributed ? P.globals.stroke.colors[s] : P.globals.stroke.colors[e]), P.config.series[r].data[s] && P.config.series[r].data[s].strokeColor && (a = P.config.series[r].data[s].strokeColor), this.isNullValue && (i = \"none\");\n                var T = s / P.config.chart.animations.animateGradually.delay * (P.config.chart.animations.speed / P.globals.dataPoints) / 2.4, M = I.renderPaths({\n                    i: r,\n                    j: s,\n                    realIndex: e,\n                    pathFrom: n,\n                    pathTo: l,\n                    stroke: a,\n                    strokeWidth: h,\n                    strokeLineCap: P.config.stroke.lineCap,\n                    fill: i,\n                    animationDelay: T,\n                    initialSpeed: P.config.chart.animations.speed,\n                    dataChangeSpeed: P.config.chart.animations.dynamicAnimation.speed,\n                    className: \"apexcharts-\".concat(L, \"-area\")\n                });\n                M.attr(\"clip-path\", \"url(#gridRectMask\".concat(P.globals.cuid, \")\"));\n                var z = P.config.forecastDataPoints;\n                z.count > 0 && s >= P.globals.dataPoints - z.count && (M.node.setAttribute(\"stroke-dasharray\", z.dashArray), M.node.setAttribute(\"stroke-width\", z.strokeWidth), M.node.setAttribute(\"fill-opacity\", z.fillOpacity)), void 0 !== u && void 0 !== p && (M.attr(\"data-range-y1\", u), M.attr(\"data-range-y2\", p)), new v(this.ctx).setSelectionFilter(M, e, s), c.add(M);\n                var X = new vt(this).handleBarDataLabels({\n                    x: d,\n                    y: g,\n                    y1: u,\n                    y2: p,\n                    i: r,\n                    j: s,\n                    series: f,\n                    realIndex: e,\n                    groupIndex: o,\n                    barHeight: x,\n                    barWidth: b,\n                    barXPosition: y,\n                    barYPosition: w,\n                    renderedPath: M,\n                    visibleSeries: C\n                });\n                return null !== X.dataLabels && k.add(X.dataLabels), X.totalDataLabels && k.add(X.totalDataLabels), c.add(k), A && c.add(A), S && c.add(S), c;\n            }\n        },\n        {\n            key: \"drawBarPaths\",\n            value: function(t) {\n                var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, o = t.x, n = t.y, l = t.yDivision, h = t.elSeries, c = this.w, d = i.i, g = i.j;\n                if (c.globals.isXNumeric) e = (n = (c.globals.seriesX[d][g] - c.globals.minX) / this.invertedXRatio - a) + a * this.visibleI;\n                else if (c.config.plotOptions.bar.hideZeroBarsWhenGrouped) {\n                    var u = 0, p = 0;\n                    c.globals.seriesPercent.forEach(function(t, e) {\n                        t[g] && u++, e < d && 0 === t[g] && p++;\n                    }), u > 0 && (a = this.seriesLen * a / u), e = n + a * this.visibleI, e -= a * p;\n                } else e = n + a * this.visibleI;\n                this.isFunnel && (r -= (this.barHelpers.getXForValue(this.series[d][g], r) - r) / 2), o = this.barHelpers.getXForValue(this.series[d][g], r);\n                var f = this.barHelpers.getBarpaths({\n                    barYPosition: e,\n                    barHeight: a,\n                    x1: r,\n                    x2: o,\n                    strokeWidth: s,\n                    series: this.series,\n                    realIndex: i.realIndex,\n                    i: d,\n                    j: g,\n                    w: c\n                });\n                return c.globals.isXNumeric || (n += l), this.barHelpers.barBackground({\n                    j: g,\n                    i: d,\n                    y1: e - a * this.visibleI,\n                    y2: a * this.seriesLen,\n                    elSeries: h\n                }), {\n                    pathTo: f.pathTo,\n                    pathFrom: f.pathFrom,\n                    x1: r,\n                    x: o,\n                    y: n,\n                    goalX: this.barHelpers.getGoalValues(\"x\", r, null, d, g),\n                    barYPosition: e,\n                    barHeight: a\n                };\n            }\n        },\n        {\n            key: \"drawColumnPaths\",\n            value: function(t) {\n                var e, i = t.indexes, a = t.x, s = t.y, r = t.xDivision, o = t.barWidth, n = t.zeroH, l = t.strokeWidth, h = t.elSeries, c = this.w, d = i.realIndex, g = i.i, u = i.j, p = i.bc;\n                if (c.globals.isXNumeric) {\n                    var f = this.getBarXForNumericXAxis({\n                        x: a,\n                        j: u,\n                        realIndex: d,\n                        barWidth: o\n                    });\n                    a = f.x, e = f.barXPosition;\n                } else if (c.config.plotOptions.bar.hideZeroBarsWhenGrouped) {\n                    var x = this.barHelpers.getZeroValueEncounters({\n                        i: g,\n                        j: u\n                    }), b = x.nonZeroColumns, v = x.zeroEncounters;\n                    b > 0 && (o = this.seriesLen * o / b), e = a + o * this.visibleI, e -= o * v;\n                } else e = a + o * this.visibleI;\n                s = this.barHelpers.getYForValue(this.series[g][u], n);\n                var m = this.barHelpers.getColumnPaths({\n                    barXPosition: e,\n                    barWidth: o,\n                    y1: n,\n                    y2: s,\n                    strokeWidth: l,\n                    series: this.series,\n                    realIndex: i.realIndex,\n                    i: g,\n                    j: u,\n                    w: c\n                });\n                return c.globals.isXNumeric || (a += r), this.barHelpers.barBackground({\n                    bc: p,\n                    j: u,\n                    i: g,\n                    x1: e - l / 2 - o * this.visibleI,\n                    x2: o * this.seriesLen + l / 2,\n                    elSeries: h\n                }), {\n                    pathTo: m.pathTo,\n                    pathFrom: m.pathFrom,\n                    x: a,\n                    y: s,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, n, g, u),\n                    barXPosition: e,\n                    barWidth: o\n                };\n            }\n        },\n        {\n            key: \"getBarXForNumericXAxis\",\n            value: function(t) {\n                var e = t.x, i = t.barWidth, a = t.realIndex, s = t.j, r = this.w, o = a;\n                return r.globals.seriesX[a].length || (o = r.globals.maxValsInArrayIndex), r.globals.seriesX[o][s] && (e = (r.globals.seriesX[o][s] - r.globals.minX) / this.xRatio - i * this.seriesLen / 2), {\n                    barXPosition: e + i * this.visibleI,\n                    x: e\n                };\n            }\n        },\n        {\n            key: \"getPreviousPath\",\n            value: function(t, e) {\n                for(var i, a = this.w, s = 0; s < a.globals.previousPaths.length; s++){\n                    var r = a.globals.previousPaths[s];\n                    r.paths && r.paths.length > 0 && parseInt(r.realIndex, 10) === parseInt(t, 10) && void 0 !== a.globals.previousPaths[s].paths[e] && (i = a.globals.previousPaths[s].paths[e].d);\n                }\n                return i;\n            }\n        }\n    ]), t;\n}(), wt = function(t) {\n    n(s, yt);\n    var i = d(s);\n    function s() {\n        return a(this, s), i.apply(this, arguments);\n    }\n    return r(s, [\n        {\n            key: \"draw\",\n            value: function(t, i) {\n                var a = this, s = this.w;\n                this.graphics = new m(this.ctx), this.bar = new yt(this.ctx, this.xyRatios);\n                var r = new y(this.ctx, s);\n                t = r.getLogSeries(t), this.yRatio = r.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t), \"100%\" === s.config.chart.stackType && (t = s.globals.seriesPercent.slice()), this.series = t, this.barHelpers.initializeStackedPrevVars(this);\n                for(var o = this.graphics.group({\n                    class: \"apexcharts-bar-series apexcharts-plot-series\"\n                }), n = 0, l = 0, h = function(r, h) {\n                    var c = void 0, d = void 0, g = void 0, u = void 0, p = -1;\n                    a.groupCtx = a, s.globals.seriesGroups.forEach(function(t, e) {\n                        t.indexOf(s.config.series[r].name) > -1 && (p = e);\n                    }), -1 !== p && (a.groupCtx = a[s.globals.seriesGroups[p]]);\n                    var f = [], b = [], v = s.globals.comboCharts ? i[r] : r;\n                    a.yRatio.length > 1 && (a.yaxisIndex = v), a.isReversed = s.config.yaxis[a.yaxisIndex] && s.config.yaxis[a.yaxisIndex].reversed;\n                    var m = a.graphics.group({\n                        class: \"apexcharts-series\",\n                        seriesName: x.escapeString(s.globals.seriesNames[v]),\n                        rel: r + 1,\n                        \"data:realIndex\": v\n                    });\n                    a.ctx.series.addCollapsedClassToSeries(m, v);\n                    var y = a.graphics.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": v\n                    }), w = a.graphics.group({\n                        class: \"apexcharts-bar-goals-markers\"\n                    }), k = 0, A = 0, S = a.initialPositions(n, l, c, d, g, u);\n                    l = S.y, k = S.barHeight, d = S.yDivision, u = S.zeroW, n = S.x, A = S.barWidth, c = S.xDivision, g = S.zeroH, s.globals.barHeight = k, s.globals.barWidth = A, a.barHelpers.initializeStackedXYVars(a), 1 === a.groupCtx.prevY.length && a.groupCtx.prevY[0].every(function(t) {\n                        return isNaN(t);\n                    }) && (a.groupCtx.prevY[0] = a.groupCtx.prevY[0].map(function(t) {\n                        return g;\n                    }), a.groupCtx.prevYF[0] = a.groupCtx.prevYF[0].map(function(t) {\n                        return 0;\n                    }));\n                    for(var C = 0; C < s.globals.dataPoints; C++){\n                        var L = a.barHelpers.getStrokeWidth(r, C, v), P = {\n                            indexes: {\n                                i: r,\n                                j: C,\n                                realIndex: v,\n                                bc: h\n                            },\n                            strokeWidth: L,\n                            x: n,\n                            y: l,\n                            elSeries: m,\n                            groupIndex: p,\n                            seriesGroup: s.globals.seriesGroups[p]\n                        }, I = null;\n                        a.isHorizontal ? (I = a.drawStackedBarPaths(e(e({}, P), {}, {\n                            zeroW: u,\n                            barHeight: k,\n                            yDivision: d\n                        })), A = a.series[r][C] / a.invertedYRatio) : (I = a.drawStackedColumnPaths(e(e({}, P), {}, {\n                            xDivision: c,\n                            barWidth: A,\n                            zeroH: g\n                        })), k = a.series[r][C] / a.yRatio[a.yaxisIndex]);\n                        var T = a.barHelpers.drawGoalLine({\n                            barXPosition: I.barXPosition,\n                            barYPosition: I.barYPosition,\n                            goalX: I.goalX,\n                            goalY: I.goalY,\n                            barHeight: k,\n                            barWidth: A\n                        });\n                        T && w.add(T), l = I.y, n = I.x, f.push(n), b.push(l);\n                        var M = a.barHelpers.getPathFillColor(t, r, C, v);\n                        m = a.renderSeries({\n                            realIndex: v,\n                            pathFill: M,\n                            j: C,\n                            i: r,\n                            groupIndex: p,\n                            pathFrom: I.pathFrom,\n                            pathTo: I.pathTo,\n                            strokeWidth: L,\n                            elSeries: m,\n                            x: n,\n                            y: l,\n                            series: t,\n                            barHeight: k,\n                            barWidth: A,\n                            elDataLabelsWrap: y,\n                            elGoalsMarkers: w,\n                            type: \"bar\",\n                            visibleSeries: 0\n                        });\n                    }\n                    s.globals.seriesXvalues[v] = f, s.globals.seriesYvalues[v] = b, a.groupCtx.prevY.push(a.groupCtx.yArrj), a.groupCtx.prevYF.push(a.groupCtx.yArrjF), a.groupCtx.prevYVal.push(a.groupCtx.yArrjVal), a.groupCtx.prevX.push(a.groupCtx.xArrj), a.groupCtx.prevXF.push(a.groupCtx.xArrjF), a.groupCtx.prevXVal.push(a.groupCtx.xArrjVal), o.add(m);\n                }, c = 0, d = 0; c < t.length; c++, d++)h(c, d);\n                return o;\n            }\n        },\n        {\n            key: \"initialPositions\",\n            value: function(t, e, i, a, s, r) {\n                var o, n, l, h, c = this.w;\n                return this.isHorizontal ? (l = (l = a = c.globals.gridHeight / c.globals.dataPoints) * parseInt(c.config.plotOptions.bar.barHeight, 10) / 100, -1 === String(c.config.plotOptions.bar.barHeight).indexOf(\"%\") && (l = parseInt(c.config.plotOptions.bar.barHeight, 10)), r = this.baseLineInvertedY + c.globals.padHorizontal + (this.isReversed ? c.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (a - l) / 2) : (h = i = c.globals.gridWidth / c.globals.dataPoints, h = c.globals.isXNumeric && c.globals.dataPoints > 1 ? (i = c.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : h * parseInt(c.config.plotOptions.bar.columnWidth, 10) / 100, -1 === String(c.config.plotOptions.bar.columnWidth).indexOf(\"%\") && (h = parseInt(c.config.plotOptions.bar.columnWidth, 10)), s = c.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? c.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = c.globals.padHorizontal + (i - h) / 2), {\n                    x: t,\n                    y: e,\n                    yDivision: a,\n                    xDivision: i,\n                    barHeight: null !== (o = c.globals.seriesGroups) && void 0 !== o && o.length ? l / c.globals.seriesGroups.length : l,\n                    barWidth: null !== (n = c.globals.seriesGroups) && void 0 !== n && n.length ? h / c.globals.seriesGroups.length : h,\n                    zeroH: s,\n                    zeroW: r\n                };\n            }\n        },\n        {\n            key: \"drawStackedBarPaths\",\n            value: function(t) {\n                for(var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, o = t.x, n = t.y, l = t.groupIndex, h = t.seriesGroup, c = t.yDivision, d = t.elSeries, g = this.w, u = n + (-1 !== l ? l * a : 0), p = i.i, f = i.j, x = 0, b = 0; b < this.groupCtx.prevXF.length; b++)x += this.groupCtx.prevXF[b][f];\n                var v = p;\n                if (h && (v = h.indexOf(g.config.series[p].name)), v > 0) {\n                    var m = r;\n                    this.groupCtx.prevXVal[v - 1][f] < 0 ? m = this.series[p][f] >= 0 ? this.groupCtx.prevX[v - 1][f] + x - 2 * (this.isReversed ? x : 0) : this.groupCtx.prevX[v - 1][f] : this.groupCtx.prevXVal[v - 1][f] >= 0 && (m = this.series[p][f] >= 0 ? this.groupCtx.prevX[v - 1][f] : this.groupCtx.prevX[v - 1][f] - x + 2 * (this.isReversed ? x : 0)), e = m;\n                } else e = r;\n                o = null === this.series[p][f] ? e : e + this.series[p][f] / this.invertedYRatio - 2 * (this.isReversed ? this.series[p][f] / this.invertedYRatio : 0);\n                var y = this.barHelpers.getBarpaths({\n                    barYPosition: u,\n                    barHeight: a,\n                    x1: e,\n                    x2: o,\n                    strokeWidth: s,\n                    series: this.series,\n                    realIndex: i.realIndex,\n                    seriesGroup: h,\n                    i: p,\n                    j: f,\n                    w: g\n                });\n                return this.barHelpers.barBackground({\n                    j: f,\n                    i: p,\n                    y1: u,\n                    y2: a,\n                    elSeries: d\n                }), n += c, {\n                    pathTo: y.pathTo,\n                    pathFrom: y.pathFrom,\n                    goalX: this.barHelpers.getGoalValues(\"x\", r, null, p, f),\n                    barYPosition: u,\n                    x: o,\n                    y: n\n                };\n            }\n        },\n        {\n            key: \"drawStackedColumnPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.x, a = t.y, s = t.xDivision, r = t.barWidth, o = t.zeroH, n = t.groupIndex, l = t.seriesGroup, h = t.elSeries, c = this.w, d = e.i, g = e.j, u = e.bc;\n                if (c.globals.isXNumeric) {\n                    var p = c.globals.seriesX[d][g];\n                    p || (p = 0), i = (p - c.globals.minX) / this.xRatio - r / 2, c.globals.seriesGroups.length && (i = (p - c.globals.minX) / this.xRatio - r / 2 * c.globals.seriesGroups.length);\n                }\n                for(var f, x = i + (-1 !== n ? n * r : 0), b = 0, v = 0; v < this.groupCtx.prevYF.length; v++)b += isNaN(this.groupCtx.prevYF[v][g]) ? 0 : this.groupCtx.prevYF[v][g];\n                var m = d;\n                if (l && (m = l.indexOf(c.config.series[d].name)), m > 0 && !c.globals.isXNumeric || m > 0 && c.globals.isXNumeric && c.globals.seriesX[d - 1][g] === c.globals.seriesX[d][g]) {\n                    var y, w, k, A = Math.min(this.yRatio.length + 1, d + 1);\n                    if (void 0 !== this.groupCtx.prevY[m - 1] && this.groupCtx.prevY[m - 1].length) for(var S = 1; S < A; S++){\n                        var C;\n                        if (!isNaN(null === (C = this.groupCtx.prevY[m - S]) || void 0 === C ? void 0 : C[g])) {\n                            k = this.groupCtx.prevY[m - S][g];\n                            break;\n                        }\n                    }\n                    for(var L = 1; L < A; L++){\n                        var P, I;\n                        if ((null === (P = this.groupCtx.prevYVal[m - L]) || void 0 === P ? void 0 : P[g]) < 0) {\n                            w = this.series[d][g] >= 0 ? k - b + 2 * (this.isReversed ? b : 0) : k;\n                            break;\n                        }\n                        if ((null === (I = this.groupCtx.prevYVal[m - L]) || void 0 === I ? void 0 : I[g]) >= 0) {\n                            w = this.series[d][g] >= 0 ? k : k + b - 2 * (this.isReversed ? b : 0);\n                            break;\n                        }\n                    }\n                    void 0 === w && (w = c.globals.gridHeight), f = null !== (y = this.groupCtx.prevYF[0]) && void 0 !== y && y.every(function(t) {\n                        return 0 === t;\n                    }) && this.groupCtx.prevYF.slice(1, m).every(function(t) {\n                        return t.every(function(t) {\n                            return isNaN(t);\n                        });\n                    }) ? o : w;\n                } else f = o;\n                a = this.series[d][g] ? f - this.series[d][g] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[d][g] / this.yRatio[this.yaxisIndex] : 0) : f;\n                var T = this.barHelpers.getColumnPaths({\n                    barXPosition: x,\n                    barWidth: r,\n                    y1: f,\n                    y2: a,\n                    yRatio: this.yRatio[this.yaxisIndex],\n                    strokeWidth: this.strokeWidth,\n                    series: this.series,\n                    seriesGroup: l,\n                    realIndex: e.realIndex,\n                    i: d,\n                    j: g,\n                    w: c\n                });\n                return this.barHelpers.barBackground({\n                    bc: u,\n                    j: g,\n                    i: d,\n                    x1: x,\n                    x2: r,\n                    elSeries: h\n                }), i += s, {\n                    pathTo: T.pathTo,\n                    pathFrom: T.pathFrom,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, o, d, g),\n                    barXPosition: x,\n                    x: c.globals.isXNumeric ? i - s : i,\n                    y: a\n                };\n            }\n        }\n    ]), s;\n}(), kt = function(t) {\n    n(s, yt);\n    var i = d(s);\n    function s() {\n        return a(this, s), i.apply(this, arguments);\n    }\n    return r(s, [\n        {\n            key: \"draw\",\n            value: function(t, i, a) {\n                var s = this, r = this.w, o = new m(this.ctx), n = r.globals.comboCharts ? i : r.config.chart.type, l = new R(this.ctx);\n                this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = r.config.plotOptions.bar.horizontal;\n                var h = new y(this.ctx, r);\n                t = h.getLogSeries(t), this.series = t, this.yRatio = h.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n                for(var c = o.group({\n                    class: \"apexcharts-\".concat(n, \"-series apexcharts-plot-series\")\n                }), d = function(i) {\n                    s.isBoxPlot = \"boxPlot\" === r.config.chart.type || \"boxPlot\" === r.config.series[i].type;\n                    var n, h, d, g, u = void 0, p = void 0, f = [], b = [], v = r.globals.comboCharts ? a[i] : i, m = o.group({\n                        class: \"apexcharts-series\",\n                        seriesName: x.escapeString(r.globals.seriesNames[v]),\n                        rel: i + 1,\n                        \"data:realIndex\": v\n                    });\n                    s.ctx.series.addCollapsedClassToSeries(m, v), t[i].length > 0 && (s.visibleI = s.visibleI + 1);\n                    var y, w;\n                    s.yRatio.length > 1 && (s.yaxisIndex = v);\n                    var k = s.barHelpers.initialPositions();\n                    p = k.y, y = k.barHeight, h = k.yDivision, g = k.zeroW, u = k.x, w = k.barWidth, n = k.xDivision, d = k.zeroH, b.push(u + w / 2);\n                    for(var A = o.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": v\n                    }), S = function(a) {\n                        var o = s.barHelpers.getStrokeWidth(i, a, v), c = null, x = {\n                            indexes: {\n                                i: i,\n                                j: a,\n                                realIndex: v\n                            },\n                            x: u,\n                            y: p,\n                            strokeWidth: o,\n                            elSeries: m\n                        };\n                        c = s.isHorizontal ? s.drawHorizontalBoxPaths(e(e({}, x), {}, {\n                            yDivision: h,\n                            barHeight: y,\n                            zeroW: g\n                        })) : s.drawVerticalBoxPaths(e(e({}, x), {}, {\n                            xDivision: n,\n                            barWidth: w,\n                            zeroH: d\n                        })), p = c.y, u = c.x, a > 0 && b.push(u + w / 2), f.push(p), c.pathTo.forEach(function(e, n) {\n                            var h = !s.isBoxPlot && s.candlestickOptions.wick.useFillColor ? c.color[n] : r.globals.stroke.colors[i], d = l.fillPath({\n                                seriesNumber: v,\n                                dataPointIndex: a,\n                                color: c.color[n],\n                                value: t[i][a]\n                            });\n                            s.renderSeries({\n                                realIndex: v,\n                                pathFill: d,\n                                lineFill: h,\n                                j: a,\n                                i: i,\n                                pathFrom: c.pathFrom,\n                                pathTo: e,\n                                strokeWidth: o,\n                                elSeries: m,\n                                x: u,\n                                y: p,\n                                series: t,\n                                barHeight: y,\n                                barWidth: w,\n                                elDataLabelsWrap: A,\n                                visibleSeries: s.visibleI,\n                                type: r.config.chart.type\n                            });\n                        });\n                    }, C = 0; C < r.globals.dataPoints; C++)S(C);\n                    r.globals.seriesXvalues[v] = b, r.globals.seriesYvalues[v] = f, c.add(m);\n                }, g = 0; g < t.length; g++)d(g);\n                return c;\n            }\n        },\n        {\n            key: \"drawVerticalBoxPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.x;\n                t.y;\n                var a = t.xDivision, s = t.barWidth, r = t.zeroH, o = t.strokeWidth, n = this.w, l = new m(this.ctx), h = e.i, c = e.j, d = !0, g = n.config.plotOptions.candlestick.colors.upward, u = n.config.plotOptions.candlestick.colors.downward, p = \"\";\n                this.isBoxPlot && (p = [\n                    this.boxOptions.colors.lower,\n                    this.boxOptions.colors.upper\n                ]);\n                var f = this.yRatio[this.yaxisIndex], x = e.realIndex, b = this.getOHLCValue(x, c), v = r, y = r;\n                b.o > b.c && (d = !1);\n                var w = Math.min(b.o, b.c), k = Math.max(b.o, b.c), A = b.m;\n                n.globals.isXNumeric && (i = (n.globals.seriesX[x][c] - n.globals.minX) / this.xRatio - s / 2);\n                var S = i + s * this.visibleI;\n                void 0 === this.series[h][c] || null === this.series[h][c] ? (w = r, k = r) : (w = r - w / f, k = r - k / f, v = r - b.h / f, y = r - b.l / f, A = r - b.m / f);\n                var C = l.move(S, r), L = l.move(S + s / 2, w);\n                return n.globals.previousPaths.length > 0 && (L = this.getPreviousPath(x, c, !0)), C = this.isBoxPlot ? [\n                    l.move(S, w) + l.line(S + s / 2, w) + l.line(S + s / 2, v) + l.line(S + s / 4, v) + l.line(S + s - s / 4, v) + l.line(S + s / 2, v) + l.line(S + s / 2, w) + l.line(S + s, w) + l.line(S + s, A) + l.line(S, A) + l.line(S, w + o / 2),\n                    l.move(S, A) + l.line(S + s, A) + l.line(S + s, k) + l.line(S + s / 2, k) + l.line(S + s / 2, y) + l.line(S + s - s / 4, y) + l.line(S + s / 4, y) + l.line(S + s / 2, y) + l.line(S + s / 2, k) + l.line(S, k) + l.line(S, A) + \"z\"\n                ] : [\n                    l.move(S, k) + l.line(S + s / 2, k) + l.line(S + s / 2, v) + l.line(S + s / 2, k) + l.line(S + s, k) + l.line(S + s, w) + l.line(S + s / 2, w) + l.line(S + s / 2, y) + l.line(S + s / 2, w) + l.line(S, w) + l.line(S, k - o / 2)\n                ], L += l.move(S, w), n.globals.isXNumeric || (i += a), {\n                    pathTo: C,\n                    pathFrom: L,\n                    x: i,\n                    y: k,\n                    barXPosition: S,\n                    color: this.isBoxPlot ? p : d ? [\n                        g\n                    ] : [\n                        u\n                    ]\n                };\n            }\n        },\n        {\n            key: \"drawHorizontalBoxPaths\",\n            value: function(t) {\n                var e = t.indexes;\n                t.x;\n                var i = t.y, a = t.yDivision, s = t.barHeight, r = t.zeroW, o = t.strokeWidth, n = this.w, l = new m(this.ctx), h = e.i, c = e.j, d = this.boxOptions.colors.lower;\n                this.isBoxPlot && (d = [\n                    this.boxOptions.colors.lower,\n                    this.boxOptions.colors.upper\n                ]);\n                var g = this.invertedYRatio, u = e.realIndex, p = this.getOHLCValue(u, c), f = r, x = r, b = Math.min(p.o, p.c), v = Math.max(p.o, p.c), y = p.m;\n                n.globals.isXNumeric && (i = (n.globals.seriesX[u][c] - n.globals.minX) / this.invertedXRatio - s / 2);\n                var w = i + s * this.visibleI;\n                void 0 === this.series[h][c] || null === this.series[h][c] ? (b = r, v = r) : (b = r + b / g, v = r + v / g, f = r + p.h / g, x = r + p.l / g, y = r + p.m / g);\n                var k = l.move(r, w), A = l.move(b, w + s / 2);\n                return n.globals.previousPaths.length > 0 && (A = this.getPreviousPath(u, c, !0)), k = [\n                    l.move(b, w) + l.line(b, w + s / 2) + l.line(f, w + s / 2) + l.line(f, w + s / 2 - s / 4) + l.line(f, w + s / 2 + s / 4) + l.line(f, w + s / 2) + l.line(b, w + s / 2) + l.line(b, w + s) + l.line(y, w + s) + l.line(y, w) + l.line(b + o / 2, w),\n                    l.move(y, w) + l.line(y, w + s) + l.line(v, w + s) + l.line(v, w + s / 2) + l.line(x, w + s / 2) + l.line(x, w + s - s / 4) + l.line(x, w + s / 4) + l.line(x, w + s / 2) + l.line(v, w + s / 2) + l.line(v, w) + l.line(y, w) + \"z\"\n                ], A += l.move(b, w), n.globals.isXNumeric || (i += a), {\n                    pathTo: k,\n                    pathFrom: A,\n                    x: v,\n                    y: i,\n                    barYPosition: w,\n                    color: d\n                };\n            }\n        },\n        {\n            key: \"getOHLCValue\",\n            value: function(t, e) {\n                var i = this.w;\n                return {\n                    o: this.isBoxPlot ? i.globals.seriesCandleH[t][e] : i.globals.seriesCandleO[t][e],\n                    h: this.isBoxPlot ? i.globals.seriesCandleO[t][e] : i.globals.seriesCandleH[t][e],\n                    m: i.globals.seriesCandleM[t][e],\n                    l: this.isBoxPlot ? i.globals.seriesCandleC[t][e] : i.globals.seriesCandleL[t][e],\n                    c: this.isBoxPlot ? i.globals.seriesCandleL[t][e] : i.globals.seriesCandleC[t][e]\n                };\n            }\n        }\n    ]), s;\n}(), At = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"checkColorRange\",\n            value: function() {\n                var t = this.w, e = !1, i = t.config.plotOptions[t.config.chart.type];\n                return i.colorScale.ranges.length > 0 && i.colorScale.ranges.map(function(t, i) {\n                    t.from <= 0 && (e = !0);\n                }), e;\n            }\n        },\n        {\n            key: \"getShadeColor\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = 1, o = s.config.plotOptions[t].shadeIntensity, n = this.determineColor(t, e, i);\n                s.globals.hasNegs || a ? r = s.config.plotOptions[t].reverseNegativeShade ? n.percent < 0 ? n.percent / 100 * (1.25 * o) : (1 - n.percent / 100) * (1.25 * o) : n.percent <= 0 ? 1 - (1 + n.percent / 100) * o : (1 - n.percent / 100) * o : (r = 1 - n.percent / 100, \"treemap\" === t && (r = (1 - n.percent / 100) * (1.25 * o)));\n                var l = n.color, h = new x;\n                return s.config.plotOptions[t].enableShades && (l = \"dark\" === this.w.config.theme.mode ? x.hexToRgba(h.shadeColor(-1 * r, n.color), s.config.fill.opacity) : x.hexToRgba(h.shadeColor(r, n.color), s.config.fill.opacity)), {\n                    color: l,\n                    colorProps: n\n                };\n            }\n        },\n        {\n            key: \"determineColor\",\n            value: function(t, e, i) {\n                var a = this.w, s = a.globals.series[e][i], r = a.config.plotOptions[t], o = r.colorScale.inverse ? i : e;\n                r.distributed && \"treemap\" === a.config.chart.type && (o = i);\n                var n = a.globals.colors[o], l = null, h = Math.min.apply(Math, u(a.globals.series[e])), c = Math.max.apply(Math, u(a.globals.series[e]));\n                r.distributed || \"heatmap\" !== t || (h = a.globals.minY, c = a.globals.maxY), void 0 !== r.colorScale.min && (h = r.colorScale.min < a.globals.minY ? r.colorScale.min : a.globals.minY, c = r.colorScale.max > a.globals.maxY ? r.colorScale.max : a.globals.maxY);\n                var d = Math.abs(c) + Math.abs(h), g = 100 * s / (0 === d ? d - 1e-6 : d);\n                r.colorScale.ranges.length > 0 && r.colorScale.ranges.map(function(t, e) {\n                    if (s >= t.from && s <= t.to) {\n                        n = t.color, l = t.foreColor ? t.foreColor : null, h = t.from, c = t.to;\n                        var i = Math.abs(c) + Math.abs(h);\n                        g = 100 * s / (0 === i ? i - 1e-6 : i);\n                    }\n                });\n                return {\n                    color: n,\n                    foreColor: l,\n                    percent: g\n                };\n            }\n        },\n        {\n            key: \"calculateDataLabels\",\n            value: function(t) {\n                var e = t.text, i = t.x, a = t.y, s = t.i, r = t.j, o = t.colorProps, n = t.fontSize, l = this.w.config.dataLabels, h = new m(this.ctx), c = new O(this.ctx), d = null;\n                if (l.enabled) {\n                    d = h.group({\n                        class: \"apexcharts-data-labels\"\n                    });\n                    var g = l.offsetX, u = l.offsetY, p = i + g, f = a + parseFloat(l.style.fontSize) / 3 + u;\n                    c.plotDataLabelsText({\n                        x: p,\n                        y: f,\n                        text: e,\n                        i: s,\n                        j: r,\n                        color: o.foreColor,\n                        parent: d,\n                        fontSize: n,\n                        dataLabelsConfig: l\n                    });\n                }\n                return d;\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function(t) {\n                var e = new m(this.ctx);\n                t.node.addEventListener(\"mouseenter\", e.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", e.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mousedown\", e.pathMouseDown.bind(this, t));\n            }\n        }\n    ]), t;\n}(), St = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = e, this.w = e.w, this.xRatio = i.xRatio, this.yRatio = i.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new At(e), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = i.group({\n                    class: \"apexcharts-heatmap\"\n                });\n                a.attr(\"clip-path\", \"url(#gridRectMask\".concat(e.globals.cuid, \")\"));\n                var s = e.globals.gridWidth / e.globals.dataPoints, r = e.globals.gridHeight / e.globals.series.length, o = 0, n = !1;\n                this.negRange = this.helpers.checkColorRange();\n                var l = t.slice();\n                e.config.yaxis[0].reversed && (n = !0, l.reverse());\n                for(var h = n ? 0 : l.length - 1; n ? h < l.length : h >= 0; n ? h++ : h--){\n                    var c = i.group({\n                        class: \"apexcharts-series apexcharts-heatmap-series\",\n                        seriesName: x.escapeString(e.globals.seriesNames[h]),\n                        rel: h + 1,\n                        \"data:realIndex\": h\n                    });\n                    if (this.ctx.series.addCollapsedClassToSeries(c, h), e.config.chart.dropShadow.enabled) {\n                        var d = e.config.chart.dropShadow;\n                        new v(this.ctx).dropShadow(c, d, h);\n                    }\n                    for(var g = 0, u = e.config.plotOptions.heatmap.shadeIntensity, p = 0; p < l[h].length; p++){\n                        var f = this.helpers.getShadeColor(e.config.chart.type, h, p, this.negRange), b = f.color, y = f.colorProps;\n                        if (\"image\" === e.config.fill.type) b = new R(this.ctx).fillPath({\n                            seriesNumber: h,\n                            dataPointIndex: p,\n                            opacity: e.globals.hasNegs ? y.percent < 0 ? 1 - (1 + y.percent / 100) : u + y.percent / 100 : y.percent / 100,\n                            patternID: x.randomId(),\n                            width: e.config.fill.image.width ? e.config.fill.image.width : s,\n                            height: e.config.fill.image.height ? e.config.fill.image.height : r\n                        });\n                        var w = this.rectRadius, k = i.drawRect(g, o, s, r, w);\n                        if (k.attr({\n                            cx: g,\n                            cy: o\n                        }), k.node.classList.add(\"apexcharts-heatmap-rect\"), c.add(k), k.attr({\n                            fill: b,\n                            i: h,\n                            index: h,\n                            j: p,\n                            val: t[h][p],\n                            \"stroke-width\": this.strokeWidth,\n                            stroke: e.config.plotOptions.heatmap.useFillColorAsStroke ? b : e.globals.stroke.colors[0],\n                            color: b\n                        }), this.helpers.addListeners(k), e.config.chart.animations.enabled && !e.globals.dataChanged) {\n                            var A = 1;\n                            e.globals.resized || (A = e.config.chart.animations.speed), this.animateHeatMap(k, g, o, s, r, A);\n                        }\n                        if (e.globals.dataChanged) {\n                            var S = 1;\n                            if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {\n                                S = this.dynamicAnim.speed;\n                                var C = e.globals.previousPaths[h] && e.globals.previousPaths[h][p] && e.globals.previousPaths[h][p].color;\n                                C || (C = \"rgba(255, 255, 255, 0)\"), this.animateHeatColor(k, x.isColorHex(C) ? C : x.rgb2hex(C), x.isColorHex(b) ? b : x.rgb2hex(b), S);\n                            }\n                        }\n                        var L = (0, e.config.dataLabels.formatter)(e.globals.series[h][p], {\n                            value: e.globals.series[h][p],\n                            seriesIndex: h,\n                            dataPointIndex: p,\n                            w: e\n                        }), P = this.helpers.calculateDataLabels({\n                            text: L,\n                            x: g + s / 2,\n                            y: o + r / 2,\n                            i: h,\n                            j: p,\n                            colorProps: y,\n                            series: l\n                        });\n                        null !== P && c.add(P), g += s;\n                    }\n                    o += r, a.add(c);\n                }\n                var I = e.globals.yAxisScale[0].result.slice();\n                return e.config.yaxis[0].reversed ? I.unshift(\"\") : I.push(\"\"), e.globals.yAxisScale[0].result = I, a;\n            }\n        },\n        {\n            key: \"animateHeatMap\",\n            value: function(t, e, i, a, s, r) {\n                var o = new b(this.ctx);\n                o.animateRect(t, {\n                    x: e + a / 2,\n                    y: i + s / 2,\n                    width: 0,\n                    height: 0\n                }, {\n                    x: e,\n                    y: i,\n                    width: a,\n                    height: s\n                }, r, function() {\n                    o.animationCompleted(t);\n                });\n            }\n        },\n        {\n            key: \"animateHeatColor\",\n            value: function(t, e, i, a) {\n                t.attr({\n                    fill: e\n                }).animate(a).attr({\n                    fill: i\n                });\n            }\n        }\n    ]), t;\n}(), Ct = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"drawYAxisTexts\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = s.config.yaxis[0], o = s.globals.yLabelFormatters[0];\n                return new m(this.ctx).drawText({\n                    x: t + r.labels.offsetX,\n                    y: e + r.labels.offsetY,\n                    text: o(a, i),\n                    textAnchor: \"middle\",\n                    fontSize: r.labels.style.fontSize,\n                    fontFamily: r.labels.style.fontFamily,\n                    foreColor: Array.isArray(r.labels.style.colors) ? r.labels.style.colors[i] : r.labels.style.colors\n                });\n            }\n        }\n    ]), t;\n}(), Lt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n        var i = this.w;\n        this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [\n            0\n        ], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i.globals.stroke.colors ? i.globals.stroke.colors : i.globals.colors, this.defaultSize = Math.min(i.globals.gridWidth, i.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i.globals.gridWidth / 2, \"radialBar\" === i.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i.config.plotOptions.pie.endAngle - i.config.plotOptions.pie.startAngle), this.initialAngle = i.config.plotOptions.pie.startAngle % this.fullAngle, i.globals.radialSize = this.defaultSize / 2.05 - i.config.stroke.width - (i.config.chart.sparkline.enabled ? 0 : i.config.chart.dropShadow.blur), this.donutSize = i.globals.radialSize * parseInt(i.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this, i = this.w, a = new m(this.ctx);\n                if (this.ret = a.group({\n                    class: \"apexcharts-pie\"\n                }), i.globals.noData) return this.ret;\n                for(var s = 0, r = 0; r < t.length; r++)s += x.negToZero(t[r]);\n                var o = [], n = a.group();\n                0 === s && (s = 1e-5), t.forEach(function(t) {\n                    e.maxY = Math.max(e.maxY, t);\n                }), i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max), \"back\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(this.ret);\n                for(var l = 0; l < t.length; l++){\n                    var h = this.fullAngle * x.negToZero(t[l]) / s;\n                    o.push(h), \"polarArea\" === this.chartType ? (o[l] = this.fullAngle / t.length, this.sliceSizes.push(i.globals.radialSize * t[l] / this.maxY)) : this.sliceSizes.push(i.globals.radialSize);\n                }\n                if (i.globals.dataChanged) {\n                    for(var c, d = 0, g = 0; g < i.globals.previousPaths.length; g++)d += x.negToZero(i.globals.previousPaths[g]);\n                    for(var u = 0; u < i.globals.previousPaths.length; u++)c = this.fullAngle * x.negToZero(i.globals.previousPaths[u]) / d, this.prevSectorAngleArr.push(c);\n                }\n                this.donutSize < 0 && (this.donutSize = 0);\n                var p = i.config.plotOptions.pie.customScale, f = i.globals.gridWidth / 2, b = i.globals.gridHeight / 2, v = f - i.globals.gridWidth / 2 * p, y = b - i.globals.gridHeight / 2 * p;\n                if (\"donut\" === this.chartType) {\n                    var w = a.drawCircle(this.donutSize);\n                    w.attr({\n                        cx: this.centerX,\n                        cy: this.centerY,\n                        fill: i.config.plotOptions.pie.donut.background ? i.config.plotOptions.pie.donut.background : \"transparent\"\n                    }), n.add(w);\n                }\n                var k = this.drawArcs(o, t);\n                if (this.sliceLabels.forEach(function(t) {\n                    k.add(t);\n                }), n.attr({\n                    transform: \"translate(\".concat(v, \", \").concat(y, \") scale(\").concat(p, \")\")\n                }), n.add(k), this.ret.add(n), this.donutDataLabels.show) {\n                    var A = this.renderInnerDataLabels(this.donutDataLabels, {\n                        hollowSize: this.donutSize,\n                        centerX: this.centerX,\n                        centerY: this.centerY,\n                        opacity: this.donutDataLabels.show,\n                        translateX: v,\n                        translateY: y\n                    });\n                    this.ret.add(A);\n                }\n                return \"front\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(this.ret), this.ret;\n            }\n        },\n        {\n            key: \"drawArcs\",\n            value: function(t, e) {\n                var i = this.w, a = new v(this.ctx), s = new m(this.ctx), r = new R(this.ctx), o = s.group({\n                    class: \"apexcharts-slices\"\n                }), n = this.initialAngle, l = this.initialAngle, h = this.initialAngle, c = this.initialAngle;\n                this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;\n                for(var d = 0; d < t.length; d++){\n                    var g = s.group({\n                        class: \"apexcharts-series apexcharts-pie-series\",\n                        seriesName: x.escapeString(i.globals.seriesNames[d]),\n                        rel: d + 1,\n                        \"data:realIndex\": d\n                    });\n                    o.add(g), l = c, h = (n = h) + t[d], c = l + this.prevSectorAngleArr[d];\n                    var u = h < n ? this.fullAngle + h - n : h - n, p = r.fillPath({\n                        seriesNumber: d,\n                        size: this.sliceSizes[d],\n                        value: e[d]\n                    }), f = this.getChangedPath(l, c), b = s.drawPath({\n                        d: f,\n                        stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d] : this.lineColorArr,\n                        strokeWidth: 0,\n                        fill: p,\n                        fillOpacity: i.config.fill.opacity,\n                        classes: \"apexcharts-pie-area apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(d)\n                    });\n                    if (b.attr({\n                        index: 0,\n                        j: d\n                    }), a.setSelectionFilter(b, 0, d), i.config.chart.dropShadow.enabled) {\n                        var y = i.config.chart.dropShadow;\n                        a.dropShadow(b, y, d);\n                    }\n                    this.addListeners(b, this.donutDataLabels), m.setAttrs(b.node, {\n                        \"data:angle\": u,\n                        \"data:startAngle\": n,\n                        \"data:strokeWidth\": this.strokeWidth,\n                        \"data:value\": e[d]\n                    });\n                    var w = {\n                        x: 0,\n                        y: 0\n                    };\n                    \"pie\" === this.chartType || \"polarArea\" === this.chartType ? w = x.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize / 1.25 + i.config.plotOptions.pie.dataLabels.offset, (n + u / 2) % this.fullAngle) : \"donut\" === this.chartType && (w = x.polarToCartesian(this.centerX, this.centerY, (i.globals.radialSize + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, (n + u / 2) % this.fullAngle)), g.add(b);\n                    var k = 0;\n                    if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k = u / this.fullAngle * i.config.chart.animations.speed) && (k = 1), this.animDur = k + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(b, {\n                        size: this.sliceSizes[d],\n                        endAngle: h,\n                        startAngle: n,\n                        prevStartAngle: l,\n                        prevEndAngle: c,\n                        animateStartingPos: !0,\n                        i: d,\n                        animBeginArr: this.animBeginArr,\n                        shouldSetPrevPaths: !0,\n                        dur: i.config.chart.animations.dynamicAnimation.speed\n                    }) : this.animatePaths(b, {\n                        size: this.sliceSizes[d],\n                        endAngle: h,\n                        startAngle: n,\n                        i: d,\n                        totalItems: t.length - 1,\n                        animBeginArr: this.animBeginArr,\n                        dur: k\n                    }), i.config.plotOptions.pie.expandOnClick && \"polarArea\" !== this.chartType && b.click(this.pieClicked.bind(this, d)), void 0 !== i.globals.selectedDataPoints[0] && i.globals.selectedDataPoints[0].indexOf(d) > -1 && this.pieClicked(d), i.config.dataLabels.enabled) {\n                        var A = w.x, S = w.y, C = 100 * u / this.fullAngle + \"%\";\n                        if (0 !== u && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[d]) {\n                            var L = i.config.dataLabels.formatter;\n                            void 0 !== L && (C = L(i.globals.seriesPercent[d][0], {\n                                seriesIndex: d,\n                                w: i\n                            }));\n                            var P = i.globals.dataLabels.style.colors[d], I = s.group({\n                                class: \"apexcharts-datalabels\"\n                            }), T = s.drawText({\n                                x: A,\n                                y: S,\n                                text: C,\n                                textAnchor: \"middle\",\n                                fontSize: i.config.dataLabels.style.fontSize,\n                                fontFamily: i.config.dataLabels.style.fontFamily,\n                                fontWeight: i.config.dataLabels.style.fontWeight,\n                                foreColor: P\n                            });\n                            if (I.add(T), i.config.dataLabels.dropShadow.enabled) {\n                                var M = i.config.dataLabels.dropShadow;\n                                a.dropShadow(T, M);\n                            }\n                            T.node.classList.add(\"apexcharts-pie-label\"), i.config.chart.animations.animate && !1 === i.globals.resized && (T.node.classList.add(\"apexcharts-pie-label-delay\"), T.node.style.animationDelay = i.config.chart.animations.speed / 940 + \"s\"), this.sliceLabels.push(I);\n                        }\n                    }\n                }\n                return o;\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function(t, e) {\n                var i = new m(this.ctx);\n                t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mouseleave\", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this, t)), this.donutDataLabels.total.showAlways || (t.node.addEventListener(\"mouseenter\", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", this.printDataLabelsInner.bind(this, t.node, e)));\n            }\n        },\n        {\n            key: \"animatePaths\",\n            value: function(t, e) {\n                var i = this.w, a = e.endAngle < e.startAngle ? this.fullAngle + e.endAngle - e.startAngle : e.endAngle - e.startAngle, s = a, r = e.startAngle, o = e.startAngle;\n                void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (r = e.prevEndAngle, s = e.prevEndAngle < e.prevStartAngle ? this.fullAngle + e.prevEndAngle - e.prevStartAngle : e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (a + o > this.fullAngle ? e.endAngle = e.endAngle - (a + o) : a + o < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (a + o)))), a === this.fullAngle && (a = this.fullAngle - .01), this.animateArc(t, r, o, a, s, e);\n            }\n        },\n        {\n            key: \"animateArc\",\n            value: function(t, e, i, a, s, r) {\n                var o, n = this, l = this.w, h = new b(this.ctx), c = r.size;\n                (isNaN(e) || isNaN(s)) && (e = i, s = a, r.dur = 0);\n                var d = a, g = i, u = e < i ? this.fullAngle + e - i : e - i;\n                l.globals.dataChanged && r.shouldSetPrevPaths && r.prevEndAngle && (o = n.getPiePath({\n                    me: n,\n                    startAngle: r.prevStartAngle,\n                    angle: r.prevEndAngle < r.prevStartAngle ? this.fullAngle + r.prevEndAngle - r.prevStartAngle : r.prevEndAngle - r.prevStartAngle,\n                    size: c\n                }), t.attr({\n                    d: o\n                })), 0 !== r.dur ? t.animate(r.dur, l.globals.easing, r.animBeginArr[r.i]).afterAll(function() {\n                    \"pie\" !== n.chartType && \"donut\" !== n.chartType && \"polarArea\" !== n.chartType || this.animate(l.config.chart.animations.dynamicAnimation.speed).attr({\n                        \"stroke-width\": n.strokeWidth\n                    }), r.i === l.config.series.length - 1 && h.animationCompleted(t);\n                }).during(function(l) {\n                    d = u + (a - u) * l, r.animateStartingPos && (d = s + (a - s) * l, g = e - s + (i - (e - s)) * l), o = n.getPiePath({\n                        me: n,\n                        startAngle: g,\n                        angle: d,\n                        size: c\n                    }), t.node.setAttribute(\"data:pathOrig\", o), t.attr({\n                        d: o\n                    });\n                }) : (o = n.getPiePath({\n                    me: n,\n                    startAngle: g,\n                    angle: a,\n                    size: c\n                }), r.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute(\"data:pathOrig\", o), t.attr({\n                    d: o,\n                    \"stroke-width\": n.strokeWidth\n                }));\n            }\n        },\n        {\n            key: \"pieClicked\",\n            value: function(t) {\n                var e, i = this.w, a = this, s = a.sliceSizes[t] + (i.config.plotOptions.pie.expandOnClick ? 4 : 0), r = i.globals.dom.Paper.select(\".apexcharts-\".concat(a.chartType.toLowerCase(), \"-slice-\").concat(t)).members[0];\n                if (\"true\" !== r.attr(\"data:pieClicked\")) {\n                    var o = i.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\");\n                    Array.prototype.forEach.call(o, function(t) {\n                        t.setAttribute(\"data:pieClicked\", \"false\");\n                        var e = t.getAttribute(\"data:pathOrig\");\n                        e && t.setAttribute(\"d\", e);\n                    }), r.attr(\"data:pieClicked\", \"true\");\n                    var n = parseInt(r.attr(\"data:startAngle\"), 10), l = parseInt(r.attr(\"data:angle\"), 10);\n                    e = a.getPiePath({\n                        me: a,\n                        startAngle: n,\n                        angle: l,\n                        size: s\n                    }), 360 !== l && r.plot(e);\n                } else {\n                    r.attr({\n                        \"data:pieClicked\": \"false\"\n                    }), this.revertDataLabelsInner(r.node, this.donutDataLabels);\n                    var h = r.attr(\"data:pathOrig\");\n                    r.attr({\n                        d: h\n                    });\n                }\n            }\n        },\n        {\n            key: \"getChangedPath\",\n            value: function(t, e) {\n                var i = \"\";\n                return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({\n                    me: this,\n                    startAngle: t,\n                    angle: e - t,\n                    size: this.size\n                })), i;\n            }\n        },\n        {\n            key: \"getPiePath\",\n            value: function(t) {\n                var e, i = t.me, a = t.startAngle, s = t.angle, r = t.size, o = new m(this.ctx), n = a, l = Math.PI * (n - 90) / 180, h = s + a;\n                Math.ceil(h) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (h = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - .01), Math.ceil(h) > this.fullAngle && (h -= this.fullAngle);\n                var c = Math.PI * (h - 90) / 180, d = i.centerX + r * Math.cos(l), g = i.centerY + r * Math.sin(l), u = i.centerX + r * Math.cos(c), p = i.centerY + r * Math.sin(c), f = x.polarToCartesian(i.centerX, i.centerY, i.donutSize, h), b = x.polarToCartesian(i.centerX, i.centerY, i.donutSize, n), v = s > 180 ? 1 : 0, y = [\n                    \"M\",\n                    d,\n                    g,\n                    \"A\",\n                    r,\n                    r,\n                    0,\n                    v,\n                    1,\n                    u,\n                    p\n                ];\n                return e = \"donut\" === i.chartType ? [].concat(y, [\n                    \"L\",\n                    f.x,\n                    f.y,\n                    \"A\",\n                    i.donutSize,\n                    i.donutSize,\n                    0,\n                    v,\n                    0,\n                    b.x,\n                    b.y,\n                    \"L\",\n                    d,\n                    g,\n                    \"z\"\n                ]).join(\" \") : \"pie\" === i.chartType || \"polarArea\" === i.chartType ? [].concat(y, [\n                    \"L\",\n                    i.centerX,\n                    i.centerY,\n                    \"L\",\n                    d,\n                    g\n                ]).join(\" \") : [].concat(y).join(\" \"), o.roundPathCorners(e, 2 * this.strokeWidth);\n            }\n        },\n        {\n            key: \"drawPolarElements\",\n            value: function(t) {\n                var e = this.w, i = new _(this.ctx), a = new m(this.ctx), s = new Ct(this.ctx), r = a.group(), o = a.group(), n = i.niceScale(0, Math.ceil(this.maxY), e.config.yaxis[0].tickAmount, 0, !0), l = n.result.reverse(), h = n.result.length;\n                this.maxY = n.niceMax;\n                for(var c = e.globals.radialSize, d = c / (h - 1), g = 0; g < h - 1; g++){\n                    var u = a.drawCircle(c);\n                    if (u.attr({\n                        cx: this.centerX,\n                        cy: this.centerY,\n                        fill: \"none\",\n                        \"stroke-width\": e.config.plotOptions.polarArea.rings.strokeWidth,\n                        stroke: e.config.plotOptions.polarArea.rings.strokeColor\n                    }), e.config.yaxis[0].show) {\n                        var p = s.drawYAxisTexts(this.centerX, this.centerY - c + parseInt(e.config.yaxis[0].labels.style.fontSize, 10) / 2, g, l[g]);\n                        o.add(p);\n                    }\n                    r.add(u), c -= d;\n                }\n                this.drawSpokes(t), t.add(r), t.add(o);\n            }\n        },\n        {\n            key: \"renderInnerDataLabels\",\n            value: function(t, e) {\n                var i = this.w, a = new m(this.ctx), s = a.group({\n                    class: \"apexcharts-datalabels-group\",\n                    transform: \"translate(\".concat(e.translateX ? e.translateX : 0, \", \").concat(e.translateY ? e.translateY : 0, \") scale(\").concat(i.config.plotOptions.pie.customScale, \")\")\n                }), r = t.total.show;\n                s.node.style.opacity = e.opacity;\n                var o, n, l = e.centerX, h = e.centerY;\n                o = void 0 === t.name.color ? i.globals.colors[0] : t.name.color;\n                var c = t.name.fontSize, d = t.name.fontFamily, g = t.name.fontWeight;\n                n = void 0 === t.value.color ? i.config.chart.foreColor : t.value.color;\n                var u = t.value.formatter, p = \"\", f = \"\";\n                if (r ? (o = t.total.color, c = t.total.fontSize, d = t.total.fontFamily, g = t.total.fontWeight, f = t.total.label, p = t.total.formatter(i)) : 1 === i.globals.series.length && (p = u(i.globals.series[0], i), f = i.globals.seriesNames[0]), f && (f = t.name.formatter(f, t.total.show, i)), t.name.show) {\n                    var x = a.drawText({\n                        x: l,\n                        y: h + parseFloat(t.name.offsetY),\n                        text: f,\n                        textAnchor: \"middle\",\n                        foreColor: o,\n                        fontSize: c,\n                        fontWeight: g,\n                        fontFamily: d\n                    });\n                    x.node.classList.add(\"apexcharts-datalabel-label\"), s.add(x);\n                }\n                if (t.value.show) {\n                    var b = t.name.show ? parseFloat(t.value.offsetY) + 16 : t.value.offsetY, v = a.drawText({\n                        x: l,\n                        y: h + b,\n                        text: p,\n                        textAnchor: \"middle\",\n                        foreColor: n,\n                        fontWeight: t.value.fontWeight,\n                        fontSize: t.value.fontSize,\n                        fontFamily: t.value.fontFamily\n                    });\n                    v.node.classList.add(\"apexcharts-datalabel-value\"), s.add(v);\n                }\n                return s;\n            }\n        },\n        {\n            key: \"printInnerLabels\",\n            value: function(t, e, i, a) {\n                var s, r = this.w;\n                a ? s = void 0 === t.name.color ? r.globals.colors[parseInt(a.parentNode.getAttribute(\"rel\"), 10) - 1] : t.name.color : r.globals.series.length > 1 && t.total.show && (s = t.total.color);\n                var o = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-label\"), n = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-value\");\n                i = (0, t.value.formatter)(i, r), a || \"function\" != typeof t.total.formatter || (i = t.total.formatter(r));\n                var l = e === t.total.label;\n                e = t.name.formatter(e, l, r), null !== o && (o.textContent = e), null !== n && (n.textContent = i), null !== o && (o.style.fill = s);\n            }\n        },\n        {\n            key: \"printDataLabelsInner\",\n            value: function(t, e) {\n                var i = this.w, a = t.getAttribute(\"data:value\"), s = i.globals.seriesNames[parseInt(t.parentNode.getAttribute(\"rel\"), 10) - 1];\n                i.globals.series.length > 1 && this.printInnerLabels(e, s, a, t);\n                var r = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\");\n                null !== r && (r.style.opacity = 1);\n            }\n        },\n        {\n            key: \"drawSpokes\",\n            value: function(t) {\n                var e = this, i = this.w, a = new m(this.ctx), s = i.config.plotOptions.polarArea.spokes;\n                if (0 !== s.strokeWidth) {\n                    for(var r = [], o = 360 / i.globals.series.length, n = 0; n < i.globals.series.length; n++)r.push(x.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize, i.config.plotOptions.pie.startAngle + o * n));\n                    r.forEach(function(i, r) {\n                        var o = a.drawLine(i.x, i.y, e.centerX, e.centerY, Array.isArray(s.connectorColors) ? s.connectorColors[r] : s.connectorColors);\n                        t.add(o);\n                    });\n                }\n            }\n        },\n        {\n            key: \"revertDataLabelsInner\",\n            value: function(t, e, i) {\n                var a = this, s = this.w, r = s.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\"), o = !1, n = s.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\"), l = function(t) {\n                    var i = t.makeSliceOut, s = t.printLabel;\n                    Array.prototype.forEach.call(n, function(t) {\n                        \"true\" === t.getAttribute(\"data:pieClicked\") && (i && (o = !0), s && a.printDataLabelsInner(t, e));\n                    });\n                };\n                if (l({\n                    makeSliceOut: !0,\n                    printLabel: !1\n                }), e.total.show && s.globals.series.length > 1) o && !e.total.showAlways ? l({\n                    makeSliceOut: !1,\n                    printLabel: !0\n                }) : this.printInnerLabels(e, e.total.label, e.total.formatter(s));\n                else if (l({\n                    makeSliceOut: !1,\n                    printLabel: !0\n                }), !o) if (s.globals.selectedDataPoints.length && s.globals.series.length > 1) if (s.globals.selectedDataPoints[0].length > 0) {\n                    var h = s.globals.selectedDataPoints[0], c = s.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(h));\n                    this.printDataLabelsInner(c, e);\n                } else r && s.globals.selectedDataPoints.length && 0 === s.globals.selectedDataPoints[0].length && (r.style.opacity = 0);\n                else r && s.globals.series.length > 1 && (r.style.opacity = 0);\n            }\n        }\n    ]), t;\n}(), Pt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;\n        var i = this.w;\n        this.graphics = new m(this.ctx), this.lineColorArr = void 0 !== i.globals.stroke.colors ? i.globals.stroke.colors : i.globals.colors, this.defaultSize = i.globals.svgHeight < i.globals.svgWidth ? i.globals.gridHeight + 1.5 * i.globals.goldenPadding : i.globals.gridWidth, this.isLog = i.config.yaxis[0].logarithmic, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i.globals.maxY, 0) : i.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i.globals.minY, this.polygons = i.config.plotOptions.radar.polygons, this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i.config.chart.dropShadow.blur, i.config.xaxis.labels.show && (this.size = this.size - i.globals.xAxisLabelsWidth / 1.75), void 0 !== i.config.plotOptions.radar.size && (this.size = i.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var i = this, a = this.w, s = new R(this.ctx), r = [], o = new O(this.ctx);\n                t.length && (this.dataPointsLen = t[a.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;\n                var n = a.globals.gridWidth / 2, l = a.globals.gridHeight / 2, h = n + a.config.plotOptions.radar.offsetX, c = l + a.config.plotOptions.radar.offsetY, d = this.graphics.group({\n                    class: \"apexcharts-radar-series apexcharts-plot-series\",\n                    transform: \"translate(\".concat(h || 0, \", \").concat(c || 0, \")\")\n                }), g = [], u = null, p = null;\n                if (this.yaxisLabels = this.graphics.group({\n                    class: \"apexcharts-yaxis\"\n                }), t.forEach(function(t, n) {\n                    var l = t.length === a.globals.dataPoints, h = i.graphics.group().attr({\n                        class: \"apexcharts-series\",\n                        \"data:longestSeries\": l,\n                        seriesName: x.escapeString(a.globals.seriesNames[n]),\n                        rel: n + 1,\n                        \"data:realIndex\": n\n                    });\n                    i.dataRadiusOfPercent[n] = [], i.dataRadius[n] = [], i.angleArr[n] = [], t.forEach(function(t, e) {\n                        var a = Math.abs(i.maxValue - i.minValue);\n                        t += Math.abs(i.minValue), i.isLog && (t = i.coreUtils.getLogVal(t, 0)), i.dataRadiusOfPercent[n][e] = t / a, i.dataRadius[n][e] = i.dataRadiusOfPercent[n][e] * i.size, i.angleArr[n][e] = e * i.disAngle;\n                    }), g = i.getDataPointsPos(i.dataRadius[n], i.angleArr[n]);\n                    var c = i.createPaths(g, {\n                        x: 0,\n                        y: 0\n                    });\n                    u = i.graphics.group({\n                        class: \"apexcharts-series-markers-wrap apexcharts-element-hidden\"\n                    }), p = i.graphics.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": n\n                    }), a.globals.delayedElements.push({\n                        el: u.node,\n                        index: n\n                    });\n                    var d = {\n                        i: n,\n                        realIndex: n,\n                        animationDelay: n,\n                        initialSpeed: a.config.chart.animations.speed,\n                        dataChangeSpeed: a.config.chart.animations.dynamicAnimation.speed,\n                        className: \"apexcharts-radar\",\n                        shouldClipToGrid: !1,\n                        bindEventsOnPaths: !1,\n                        stroke: a.globals.stroke.colors[n],\n                        strokeLineCap: a.config.stroke.lineCap\n                    }, f = null;\n                    a.globals.previousPaths.length > 0 && (f = i.getPreviousPath(n));\n                    for(var b = 0; b < c.linePathsTo.length; b++){\n                        var m = i.graphics.renderPaths(e(e({}, d), {}, {\n                            pathFrom: null === f ? c.linePathsFrom[b] : f,\n                            pathTo: c.linePathsTo[b],\n                            strokeWidth: Array.isArray(i.strokeWidth) ? i.strokeWidth[n] : i.strokeWidth,\n                            fill: \"none\",\n                            drawShadow: !1\n                        }));\n                        h.add(m);\n                        var y = s.fillPath({\n                            seriesNumber: n\n                        }), w = i.graphics.renderPaths(e(e({}, d), {}, {\n                            pathFrom: null === f ? c.areaPathsFrom[b] : f,\n                            pathTo: c.areaPathsTo[b],\n                            strokeWidth: 0,\n                            fill: y,\n                            drawShadow: !1\n                        }));\n                        if (a.config.chart.dropShadow.enabled) {\n                            var k = new v(i.ctx), A = a.config.chart.dropShadow;\n                            k.dropShadow(w, Object.assign({}, A, {\n                                noUserSpaceOnUse: !0\n                            }), n);\n                        }\n                        h.add(w);\n                    }\n                    t.forEach(function(t, s) {\n                        var r = new H(i.ctx).getMarkerConfig({\n                            cssClass: \"apexcharts-marker\",\n                            seriesIndex: n,\n                            dataPointIndex: s\n                        }), l = i.graphics.drawMarker(g[s].x, g[s].y, r);\n                        l.attr(\"rel\", s), l.attr(\"j\", s), l.attr(\"index\", n), l.node.setAttribute(\"default-marker-size\", r.pSize);\n                        var c = i.graphics.group({\n                            class: \"apexcharts-series-markers\"\n                        });\n                        c && c.add(l), u.add(c), h.add(u);\n                        var d = a.config.dataLabels;\n                        if (d.enabled) {\n                            var f = d.formatter(a.globals.series[n][s], {\n                                seriesIndex: n,\n                                dataPointIndex: s,\n                                w: a\n                            });\n                            o.plotDataLabelsText({\n                                x: g[s].x,\n                                y: g[s].y,\n                                text: f,\n                                textAnchor: \"middle\",\n                                i: n,\n                                j: n,\n                                parent: p,\n                                offsetCorrection: !1,\n                                dataLabelsConfig: e({}, d)\n                            });\n                        }\n                        h.add(p);\n                    }), r.push(h);\n                }), this.drawPolygons({\n                    parent: d\n                }), a.config.xaxis.labels.show) {\n                    var f = this.drawXAxisTexts();\n                    d.add(f);\n                }\n                return r.forEach(function(t) {\n                    d.add(t);\n                }), d.add(this.yaxisLabels), d;\n            }\n        },\n        {\n            key: \"drawPolygons\",\n            value: function(t) {\n                for(var e = this, i = this.w, a = t.parent, s = new Ct(this.ctx), r = i.globals.yAxisScale[0].result.reverse(), o = r.length, n = [], l = this.size / (o - 1), h = 0; h < o; h++)n[h] = l * h;\n                n.reverse();\n                var c = [], d = [];\n                n.forEach(function(t, i) {\n                    var a = x.getPolygonPos(t, e.dataPointsLen), s = \"\";\n                    a.forEach(function(t, a) {\n                        if (0 === i) {\n                            var r = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[a] : e.polygons.connectorColors);\n                            d.push(r);\n                        }\n                        0 === a && e.yaxisLabelsTextsPos.push({\n                            x: t.x,\n                            y: t.y\n                        }), s += t.x + \",\" + t.y + \" \";\n                    }), c.push(s);\n                }), c.forEach(function(t, s) {\n                    var r = e.polygons.strokeColors, o = e.polygons.strokeWidth, n = e.graphics.drawPolygon(t, Array.isArray(r) ? r[s] : r, Array.isArray(o) ? o[s] : o, i.globals.radarPolygons.fill.colors[s]);\n                    a.add(n);\n                }), d.forEach(function(t) {\n                    a.add(t);\n                }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t, i) {\n                    var a = s.drawYAxisTexts(t.x, t.y, i, r[i]);\n                    e.yaxisLabels.add(a);\n                });\n            }\n        },\n        {\n            key: \"drawXAxisTexts\",\n            value: function() {\n                var t = this, i = this.w, a = i.config.xaxis.labels, s = this.graphics.group({\n                    class: \"apexcharts-xaxis\"\n                }), r = x.getPolygonPos(this.size, this.dataPointsLen);\n                return i.globals.labels.forEach(function(o, n) {\n                    var l = i.config.xaxis.labels.formatter, h = new O(t.ctx);\n                    if (r[n]) {\n                        var c = t.getTextPos(r[n], t.size), d = l(o, {\n                            seriesIndex: -1,\n                            dataPointIndex: n,\n                            w: i\n                        });\n                        h.plotDataLabelsText({\n                            x: c.newX,\n                            y: c.newY,\n                            text: d,\n                            textAnchor: c.textAnchor,\n                            i: n,\n                            j: n,\n                            parent: s,\n                            color: Array.isArray(a.style.colors) && a.style.colors[n] ? a.style.colors[n] : \"#a8a8a8\",\n                            dataLabelsConfig: e({\n                                textAnchor: c.textAnchor,\n                                dropShadow: {\n                                    enabled: !1\n                                }\n                            }, a),\n                            offsetCorrection: !1\n                        });\n                    }\n                }), s;\n            }\n        },\n        {\n            key: \"createPaths\",\n            value: function(t, e) {\n                var i = this, a = [], s = [], r = [], o = [];\n                if (t.length) {\n                    s = [\n                        this.graphics.move(e.x, e.y)\n                    ], o = [\n                        this.graphics.move(e.x, e.y)\n                    ];\n                    var n = this.graphics.move(t[0].x, t[0].y), l = this.graphics.move(t[0].x, t[0].y);\n                    t.forEach(function(e, a) {\n                        n += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), a === t.length - 1 && (n += \"Z\", l += \"Z\");\n                    }), a.push(n), r.push(l);\n                }\n                return {\n                    linePathsFrom: s,\n                    linePathsTo: a,\n                    areaPathsFrom: o,\n                    areaPathsTo: r\n                };\n            }\n        },\n        {\n            key: \"getTextPos\",\n            value: function(t, e) {\n                var i = \"middle\", a = t.x, s = t.y;\n                return Math.abs(t.x) >= 10 ? t.x > 0 ? (i = \"start\", a += 10) : t.x < 0 && (i = \"end\", a -= 10) : i = \"middle\", Math.abs(t.y) >= e - 10 && (t.y < 0 ? s -= 10 : t.y > 0 && (s += 10)), {\n                    textAnchor: i,\n                    newX: a,\n                    newY: s\n                };\n            }\n        },\n        {\n            key: \"getPreviousPath\",\n            value: function(t) {\n                for(var e = this.w, i = null, a = 0; a < e.globals.previousPaths.length; a++){\n                    var s = e.globals.previousPaths[a];\n                    s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[a].paths[0] && (i = e.globals.previousPaths[a].paths[0].d);\n                }\n                return i;\n            }\n        },\n        {\n            key: \"getDataPointsPos\",\n            value: function(t, e) {\n                var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;\n                t = t || [], e = e || [];\n                for(var a = [], s = 0; s < i; s++){\n                    var r = {};\n                    r.x = t[s] * Math.sin(e[s]), r.y = -t[s] * Math.cos(e[s]), a.push(r);\n                }\n                return a;\n            }\n        }\n    ]), t;\n}(), It = function(t) {\n    n(i, Lt);\n    var e = d(i);\n    function i(t) {\n        var s;\n        a(this, i), (s = e.call(this, t)).ctx = t, s.w = t.w, s.animBeginArr = [\n            0\n        ], s.animDur = 0;\n        var r = s.w;\n        return s.startAngle = r.config.plotOptions.radialBar.startAngle, s.endAngle = r.config.plotOptions.radialBar.endAngle, s.totalAngle = Math.abs(r.config.plotOptions.radialBar.endAngle - r.config.plotOptions.radialBar.startAngle), s.trackStartAngle = r.config.plotOptions.radialBar.track.startAngle, s.trackEndAngle = r.config.plotOptions.radialBar.track.endAngle, s.barLabels = s.w.config.plotOptions.radialBar.barLabels, s.donutDataLabels = s.w.config.plotOptions.radialBar.dataLabels, s.radialDataLabels = s.donutDataLabels, s.trackStartAngle || (s.trackStartAngle = s.startAngle), s.trackEndAngle || (s.trackEndAngle = s.endAngle), 360 === s.endAngle && (s.endAngle = 359.99), s.margin = parseInt(r.config.plotOptions.radialBar.track.margin, 10), s.onBarLabelClick = s.onBarLabelClick.bind(c(s)), s;\n    }\n    return r(i, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = i.group({\n                    class: \"apexcharts-radialbar\"\n                });\n                if (e.globals.noData) return a;\n                var s = i.group(), r = this.defaultSize / 2, o = e.globals.gridWidth / 2, n = this.defaultSize / 2.05;\n                e.config.chart.sparkline.enabled || (n = n - e.config.stroke.width - e.config.chart.dropShadow.blur);\n                var l = e.globals.fill.colors;\n                if (e.config.plotOptions.radialBar.track.show) {\n                    var h = this.drawTracks({\n                        size: n,\n                        centerX: o,\n                        centerY: r,\n                        colorArr: l,\n                        series: t\n                    });\n                    s.add(h);\n                }\n                var c = this.drawArcs({\n                    size: n,\n                    centerX: o,\n                    centerY: r,\n                    colorArr: l,\n                    series: t\n                }), d = 360;\n                e.config.plotOptions.radialBar.startAngle < 0 && (d = this.totalAngle);\n                var g = (360 - d) / 360;\n                if (e.globals.radialSize = n - n * g, this.radialDataLabels.value.show) {\n                    var u = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);\n                    e.globals.radialSize += u * g;\n                }\n                return s.add(c.g), \"front\" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), a.add(s), a;\n            }\n        },\n        {\n            key: \"drawTracks\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = i.group({\n                    class: \"apexcharts-tracks\"\n                }), s = new v(this.ctx), r = new R(this.ctx), o = this.getStrokeWidth(t);\n                t.size = t.size - o / 2;\n                for(var n = 0; n < t.series.length; n++){\n                    var l = i.group({\n                        class: \"apexcharts-radialbar-track apexcharts-track\"\n                    });\n                    a.add(l), l.attr({\n                        rel: n + 1\n                    }), t.size = t.size - o - this.margin;\n                    var h = e.config.plotOptions.radialBar.track, c = r.fillPath({\n                        seriesNumber: 0,\n                        size: t.size,\n                        fillColors: Array.isArray(h.background) ? h.background[n] : h.background,\n                        solid: !0\n                    }), d = this.trackStartAngle, g = this.trackEndAngle;\n                    Math.abs(g) + Math.abs(d) >= 360 && (g = 360 - Math.abs(this.startAngle) - .1);\n                    var u = i.drawPath({\n                        d: \"\",\n                        stroke: c,\n                        strokeWidth: o * parseInt(h.strokeWidth, 10) / 100,\n                        fill: \"none\",\n                        strokeOpacity: h.opacity,\n                        classes: \"apexcharts-radialbar-area\"\n                    });\n                    if (h.dropShadow.enabled) {\n                        var p = h.dropShadow;\n                        s.dropShadow(u, p);\n                    }\n                    l.add(u), u.attr(\"id\", \"apexcharts-radialbarTrack-\" + n), this.animatePaths(u, {\n                        centerX: t.centerX,\n                        centerY: t.centerY,\n                        endAngle: g,\n                        startAngle: d,\n                        size: t.size,\n                        i: n,\n                        totalItems: 2,\n                        animBeginArr: 0,\n                        dur: 0,\n                        isTrack: !0,\n                        easing: e.globals.easing\n                    });\n                }\n                return a;\n            }\n        },\n        {\n            key: \"drawArcs\",\n            value: function(t) {\n                var e = this.w, i = new m(this.ctx), a = new R(this.ctx), s = new v(this.ctx), r = i.group(), o = this.getStrokeWidth(t);\n                t.size = t.size - o / 2;\n                var n = e.config.plotOptions.radialBar.hollow.background, l = t.size - o * t.series.length - this.margin * t.series.length - o * parseInt(e.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h = l - e.config.plotOptions.radialBar.hollow.margin;\n                void 0 !== e.config.plotOptions.radialBar.hollow.image && (n = this.drawHollowImage(t, r, l, n));\n                var c = this.drawHollow({\n                    size: h,\n                    centerX: t.centerX,\n                    centerY: t.centerY,\n                    fill: n || \"transparent\"\n                });\n                if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {\n                    var d = e.config.plotOptions.radialBar.hollow.dropShadow;\n                    s.dropShadow(c, d);\n                }\n                var g = 1;\n                !this.radialDataLabels.total.show && e.globals.series.length > 1 && (g = 0);\n                var u = null;\n                this.radialDataLabels.show && (u = this.renderInnerDataLabels(this.radialDataLabels, {\n                    hollowSize: l,\n                    centerX: t.centerX,\n                    centerY: t.centerY,\n                    opacity: g\n                })), \"back\" === e.config.plotOptions.radialBar.hollow.position && (r.add(c), u && r.add(u));\n                var p = !1;\n                e.config.plotOptions.radialBar.inverseOrder && (p = !0);\n                for(var f = p ? t.series.length - 1 : 0; p ? f >= 0 : f < t.series.length; p ? f-- : f++){\n                    var b = i.group({\n                        class: \"apexcharts-series apexcharts-radial-series\",\n                        seriesName: x.escapeString(e.globals.seriesNames[f])\n                    });\n                    r.add(b), b.attr({\n                        rel: f + 1,\n                        \"data:realIndex\": f\n                    }), this.ctx.series.addCollapsedClassToSeries(b, f), t.size = t.size - o - this.margin;\n                    var y = a.fillPath({\n                        seriesNumber: f,\n                        size: t.size,\n                        value: t.series[f]\n                    }), w = this.startAngle, k = void 0, A = x.negToZero(t.series[f] > 100 ? 100 : t.series[f]) / 100, S = Math.round(this.totalAngle * A) + this.startAngle, C = void 0;\n                    e.globals.dataChanged && (k = this.startAngle, C = Math.round(this.totalAngle * x.negToZero(e.globals.previousPaths[f]) / 100) + k), Math.abs(S) + Math.abs(w) >= 360 && (S -= .01), Math.abs(C) + Math.abs(k) >= 360 && (C -= .01);\n                    var L = S - w, P = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[f] : e.config.stroke.dashArray, I = i.drawPath({\n                        d: \"\",\n                        stroke: y,\n                        strokeWidth: o,\n                        fill: \"none\",\n                        fillOpacity: e.config.fill.opacity,\n                        classes: \"apexcharts-radialbar-area apexcharts-radialbar-slice-\" + f,\n                        strokeDashArray: P\n                    });\n                    if (m.setAttrs(I.node, {\n                        \"data:angle\": L,\n                        \"data:value\": t.series[f]\n                    }), e.config.chart.dropShadow.enabled) {\n                        var T = e.config.chart.dropShadow;\n                        s.dropShadow(I, T, f);\n                    }\n                    if (s.setSelectionFilter(I, 0, f), this.addListeners(I, this.radialDataLabels), b.add(I), I.attr({\n                        index: 0,\n                        j: f\n                    }), this.barLabels.enabled) {\n                        var M = x.polarToCartesian(t.centerX, t.centerY, t.size, w), z = this.barLabels.formatter(e.globals.seriesNames[f], {\n                            seriesIndex: f,\n                            w: e\n                        }), X = [\n                            \"apexcharts-radialbar-label\"\n                        ];\n                        this.barLabels.onClick || X.push(\"apexcharts-no-click\");\n                        var E = this.barLabels.useSeriesColors ? e.globals.colors[f] : e.config.chart.foreColor;\n                        E || (E = e.config.chart.foreColor);\n                        var Y = M.x - this.barLabels.margin, F = M.y, H = i.drawText({\n                            x: Y,\n                            y: F,\n                            text: z,\n                            textAnchor: \"end\",\n                            dominantBaseline: \"middle\",\n                            fontFamily: this.barLabels.fontFamily,\n                            fontWeight: this.barLabels.fontWeight,\n                            fontSize: this.barLabels.fontSize,\n                            foreColor: E,\n                            cssClass: X.join(\" \")\n                        });\n                        H.on(\"click\", this.onBarLabelClick), H.attr({\n                            rel: f + 1\n                        }), 0 !== w && H.attr({\n                            \"transform-origin\": \"\".concat(Y, \" \").concat(F),\n                            transform: \"rotate(\".concat(w, \" 0 0)\")\n                        }), b.add(H);\n                    }\n                    var D = 0;\n                    !this.initialAnim || e.globals.resized || e.globals.dataChanged || (D = e.config.chart.animations.speed), e.globals.dataChanged && (D = e.config.chart.animations.dynamicAnimation.speed), this.animDur = D / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(I, {\n                        centerX: t.centerX,\n                        centerY: t.centerY,\n                        endAngle: S,\n                        startAngle: w,\n                        prevEndAngle: C,\n                        prevStartAngle: k,\n                        size: t.size,\n                        i: f,\n                        totalItems: 2,\n                        animBeginArr: this.animBeginArr,\n                        dur: D,\n                        shouldSetPrevPaths: !0,\n                        easing: e.globals.easing\n                    });\n                }\n                return {\n                    g: r,\n                    elHollow: c,\n                    dataLabels: u\n                };\n            }\n        },\n        {\n            key: \"drawHollow\",\n            value: function(t) {\n                var e = new m(this.ctx).drawCircle(2 * t.size);\n                return e.attr({\n                    class: \"apexcharts-radialbar-hollow\",\n                    cx: t.centerX,\n                    cy: t.centerY,\n                    r: t.size,\n                    fill: t.fill\n                }), e;\n            }\n        },\n        {\n            key: \"drawHollowImage\",\n            value: function(t, e, i, a) {\n                var s = this.w, r = new R(this.ctx), o = x.randomId(), n = s.config.plotOptions.radialBar.hollow.image;\n                if (s.config.plotOptions.radialBar.hollow.imageClipped) r.clippedImgArea({\n                    width: i,\n                    height: i,\n                    image: n,\n                    patternID: \"pattern\".concat(s.globals.cuid).concat(o)\n                }), a = \"url(#pattern\".concat(s.globals.cuid).concat(o, \")\");\n                else {\n                    var l = s.config.plotOptions.radialBar.hollow.imageWidth, h = s.config.plotOptions.radialBar.hollow.imageHeight;\n                    if (void 0 === l && void 0 === h) {\n                        var c = s.globals.dom.Paper.image(n).loaded(function(e) {\n                            this.move(t.centerX - e.width / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY);\n                        });\n                        e.add(c);\n                    } else {\n                        var d = s.globals.dom.Paper.image(n).loaded(function(e) {\n                            this.move(t.centerX - l / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);\n                        });\n                        e.add(d);\n                    }\n                }\n                return a;\n            }\n        },\n        {\n            key: \"getStrokeWidth\",\n            value: function(t) {\n                var e = this.w;\n                return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t.series.length + 1) - this.margin;\n            }\n        },\n        {\n            key: \"onBarLabelClick\",\n            value: function(t) {\n                var e = parseInt(t.target.getAttribute(\"rel\"), 10) - 1, i = this.barLabels.onClick, a = this.w;\n                i && i(a.globals.seriesNames[e], {\n                    w: a,\n                    seriesIndex: e\n                });\n            }\n        }\n    ]), i;\n}(), Tt = function(t) {\n    n(s, yt);\n    var i = d(s);\n    function s() {\n        return a(this, s), i.apply(this, arguments);\n    }\n    return r(s, [\n        {\n            key: \"draw\",\n            value: function(t, i) {\n                var a = this.w, s = new m(this.ctx);\n                this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = a.globals.seriesRangeStart, this.seriesRangeEnd = a.globals.seriesRangeEnd, this.barHelpers.initVariables(t);\n                for(var r = s.group({\n                    class: \"apexcharts-rangebar-series apexcharts-plot-series\"\n                }), n = 0; n < t.length; n++){\n                    var l, h, c, d, g = void 0, u = void 0, p = a.globals.comboCharts ? i[n] : n, f = s.group({\n                        class: \"apexcharts-series\",\n                        seriesName: x.escapeString(a.globals.seriesNames[p]),\n                        rel: n + 1,\n                        \"data:realIndex\": p\n                    });\n                    this.ctx.series.addCollapsedClassToSeries(f, p), t[n].length > 0 && (this.visibleI = this.visibleI + 1);\n                    var b = 0, v = 0;\n                    this.yRatio.length > 1 && (this.yaxisIndex = p);\n                    var y = this.barHelpers.initialPositions();\n                    u = y.y, d = y.zeroW, g = y.x, v = y.barWidth, b = y.barHeight, l = y.xDivision, h = y.yDivision, c = y.zeroH;\n                    for(var w = s.group({\n                        class: \"apexcharts-datalabels\",\n                        \"data:realIndex\": p\n                    }), k = s.group({\n                        class: \"apexcharts-rangebar-goals-markers\"\n                    }), A = 0; A < a.globals.dataPoints; A++){\n                        var S, C = this.barHelpers.getStrokeWidth(n, A, p), L = this.seriesRangeStart[n][A], P = this.seriesRangeEnd[n][A], I = null, T = null, M = null, z = {\n                            x: g,\n                            y: u,\n                            strokeWidth: C,\n                            elSeries: f\n                        }, X = this.seriesLen;\n                        if (a.config.plotOptions.bar.rangeBarGroupRows && (X = 1), void 0 === a.config.series[n].data[A]) break;\n                        if (this.isHorizontal) {\n                            M = u + b * this.visibleI;\n                            var E = (h - b * X) / 2;\n                            if (a.config.series[n].data[A].x) {\n                                var Y = this.detectOverlappingBars({\n                                    i: n,\n                                    j: A,\n                                    barYPosition: M,\n                                    srty: E,\n                                    barHeight: b,\n                                    yDivision: h,\n                                    initPositions: y\n                                });\n                                b = Y.barHeight, M = Y.barYPosition;\n                            }\n                            v = (I = this.drawRangeBarPaths(e({\n                                indexes: {\n                                    i: n,\n                                    j: A,\n                                    realIndex: p\n                                },\n                                barHeight: b,\n                                barYPosition: M,\n                                zeroW: d,\n                                yDivision: h,\n                                y1: L,\n                                y2: P\n                            }, z))).barWidth;\n                        } else {\n                            a.globals.isXNumeric && (g = (a.globals.seriesX[n][A] - a.globals.minX) / this.xRatio - v / 2), T = g + v * this.visibleI;\n                            var F = (l - v * X) / 2;\n                            if (a.config.series[n].data[A].x) {\n                                var R = this.detectOverlappingBars({\n                                    i: n,\n                                    j: A,\n                                    barXPosition: T,\n                                    srtx: F,\n                                    barWidth: v,\n                                    xDivision: l,\n                                    initPositions: y\n                                });\n                                v = R.barWidth, T = R.barXPosition;\n                            }\n                            b = (I = this.drawRangeColumnPaths(e({\n                                indexes: {\n                                    i: n,\n                                    j: A,\n                                    realIndex: p\n                                },\n                                barWidth: v,\n                                barXPosition: T,\n                                zeroH: c,\n                                xDivision: l\n                            }, z))).barHeight;\n                        }\n                        var H = this.barHelpers.drawGoalLine({\n                            barXPosition: I.barXPosition,\n                            barYPosition: M,\n                            goalX: I.goalX,\n                            goalY: I.goalY,\n                            barHeight: b,\n                            barWidth: v\n                        });\n                        H && k.add(H), u = I.y, g = I.x;\n                        var D = this.barHelpers.getPathFillColor(t, n, A, p), O = a.globals.stroke.colors[p];\n                        this.renderSeries((o(S = {\n                            realIndex: p,\n                            pathFill: D,\n                            lineFill: O,\n                            j: A,\n                            i: n,\n                            x: g,\n                            y: u,\n                            y1: L,\n                            y2: P,\n                            pathFrom: I.pathFrom,\n                            pathTo: I.pathTo,\n                            strokeWidth: C,\n                            elSeries: f,\n                            series: t,\n                            barHeight: b,\n                            barWidth: v,\n                            barXPosition: T,\n                            barYPosition: M\n                        }, \"barWidth\", v), o(S, \"elDataLabelsWrap\", w), o(S, \"elGoalsMarkers\", k), o(S, \"visibleSeries\", this.visibleI), o(S, \"type\", \"rangebar\"), S));\n                    }\n                    r.add(f);\n                }\n                return r;\n            }\n        },\n        {\n            key: \"detectOverlappingBars\",\n            value: function(t) {\n                var e = t.i, i = t.j, a = t.barYPosition, s = t.barXPosition, r = t.srty, o = t.srtx, n = t.barHeight, l = t.barWidth, h = t.yDivision, c = t.xDivision, d = t.initPositions, g = this.w, u = [], p = g.config.series[e].data[i].rangeName, f = g.config.series[e].data[i].x, x = Array.isArray(f) ? f.join(\" \") : f, b = g.globals.labels.map(function(t) {\n                    return Array.isArray(t) ? t.join(\" \") : t;\n                }).indexOf(x), v = g.globals.seriesRange[e].findIndex(function(t) {\n                    return t.x === x && t.overlaps.length > 0;\n                });\n                return this.isHorizontal ? (a = g.config.plotOptions.bar.rangeBarGroupRows ? r + h * b : r + n * this.visibleI + h * b, v > -1 && !g.config.plotOptions.bar.rangeBarOverlap && (u = g.globals.seriesRange[e][v].overlaps).indexOf(p) > -1 && (a = (n = d.barHeight / u.length) * this.visibleI + h * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + n * (this.visibleI + u.indexOf(p)) + h * b)) : (b > -1 && (s = g.config.plotOptions.bar.rangeBarGroupRows ? o + c * b : o + l * this.visibleI + c * b), v > -1 && !g.config.plotOptions.bar.rangeBarOverlap && (u = g.globals.seriesRange[e][v].overlaps).indexOf(p) > -1 && (s = (l = d.barWidth / u.length) * this.visibleI + c * (100 - parseInt(this.barOptions.barWidth, 10)) / 100 / 2 + l * (this.visibleI + u.indexOf(p)) + c * b)), {\n                    barYPosition: a,\n                    barXPosition: s,\n                    barHeight: n,\n                    barWidth: l\n                };\n            }\n        },\n        {\n            key: \"drawRangeColumnPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.x, a = t.xDivision, s = t.barWidth, r = t.barXPosition, o = t.zeroH, n = this.w, l = e.i, h = e.j, c = this.yRatio[this.yaxisIndex], d = e.realIndex, g = this.getRangeValue(d, h), u = Math.min(g.start, g.end), p = Math.max(g.start, g.end);\n                void 0 === this.series[l][h] || null === this.series[l][h] ? u = o : (u = o - u / c, p = o - p / c);\n                var f = Math.abs(p - u), x = this.barHelpers.getColumnPaths({\n                    barXPosition: r,\n                    barWidth: s,\n                    y1: u,\n                    y2: p,\n                    strokeWidth: this.strokeWidth,\n                    series: this.seriesRangeEnd,\n                    realIndex: e.realIndex,\n                    i: d,\n                    j: h,\n                    w: n\n                });\n                if (n.globals.isXNumeric) {\n                    var b = this.getBarXForNumericXAxis({\n                        x: i,\n                        j: h,\n                        realIndex: d,\n                        barWidth: s\n                    });\n                    i = b.x, r = b.barXPosition;\n                } else i += a;\n                return {\n                    pathTo: x.pathTo,\n                    pathFrom: x.pathFrom,\n                    barHeight: f,\n                    x: i,\n                    y: p,\n                    goalY: this.barHelpers.getGoalValues(\"y\", null, o, l, h),\n                    barXPosition: r\n                };\n            }\n        },\n        {\n            key: \"drawRangeBarPaths\",\n            value: function(t) {\n                var e = t.indexes, i = t.y, a = t.y1, s = t.y2, r = t.yDivision, o = t.barHeight, n = t.barYPosition, l = t.zeroW, h = this.w, c = l + a / this.invertedYRatio, d = l + s / this.invertedYRatio, g = Math.abs(d - c), u = this.barHelpers.getBarpaths({\n                    barYPosition: n,\n                    barHeight: o,\n                    x1: c,\n                    x2: d,\n                    strokeWidth: this.strokeWidth,\n                    series: this.seriesRangeEnd,\n                    i: e.realIndex,\n                    realIndex: e.realIndex,\n                    j: e.j,\n                    w: h\n                });\n                return h.globals.isXNumeric || (i += r), {\n                    pathTo: u.pathTo,\n                    pathFrom: u.pathFrom,\n                    barWidth: g,\n                    x: d,\n                    goalX: this.barHelpers.getGoalValues(\"x\", l, null, e.realIndex, e.j),\n                    y: i\n                };\n            }\n        },\n        {\n            key: \"getRangeValue\",\n            value: function(t, e) {\n                var i = this.w;\n                return {\n                    start: i.globals.seriesRangeStart[t][e],\n                    end: i.globals.seriesRangeEnd[t][e]\n                };\n            }\n        }\n    ]), s;\n}(), Mt = function() {\n    function t(e) {\n        a(this, t), this.w = e.w, this.lineCtx = e;\n    }\n    return r(t, [\n        {\n            key: \"sameValueSeriesFix\",\n            value: function(t, e) {\n                var i = this.w;\n                if ((\"gradient\" === i.config.fill.type || \"gradient\" === i.config.fill.type[t]) && new y(this.lineCtx.ctx, i).seriesHaveSameValues(t)) {\n                    var a = e[t].slice();\n                    a[a.length - 1] = a[a.length - 1] + 1e-6, e[t] = a;\n                }\n                return e;\n            }\n        },\n        {\n            key: \"calculatePoints\",\n            value: function(t) {\n                var e = t.series, i = t.realIndex, a = t.x, s = t.y, r = t.i, o = t.j, n = t.prevY, l = this.w, h = [], c = [];\n                if (0 === o) {\n                    var d = this.lineCtx.categoryAxisCorrection + l.config.markers.offsetX;\n                    l.globals.isXNumeric && (d = (l.globals.seriesX[i][0] - l.globals.minX) / this.lineCtx.xRatio + l.config.markers.offsetX), h.push(d), c.push(x.isNumber(e[r][0]) ? n + l.config.markers.offsetY : null), h.push(a + l.config.markers.offsetX), c.push(x.isNumber(e[r][o + 1]) ? s + l.config.markers.offsetY : null);\n                } else h.push(a + l.config.markers.offsetX), c.push(x.isNumber(e[r][o + 1]) ? s + l.config.markers.offsetY : null);\n                return {\n                    x: h,\n                    y: c\n                };\n            }\n        },\n        {\n            key: \"checkPreviousPaths\",\n            value: function(t) {\n                for(var e = t.pathFromLine, i = t.pathFromArea, a = t.realIndex, s = this.w, r = 0; r < s.globals.previousPaths.length; r++){\n                    var o = s.globals.previousPaths[r];\n                    (\"line\" === o.type || \"area\" === o.type) && o.paths.length > 0 && parseInt(o.realIndex, 10) === parseInt(a, 10) && (\"line\" === o.type ? (this.lineCtx.appendPathFrom = !1, e = s.globals.previousPaths[r].paths[0].d) : \"area\" === o.type && (this.lineCtx.appendPathFrom = !1, i = s.globals.previousPaths[r].paths[0].d, s.config.stroke.show && s.globals.previousPaths[r].paths[1] && (e = s.globals.previousPaths[r].paths[1].d)));\n                }\n                return {\n                    pathFromLine: e,\n                    pathFromArea: i\n                };\n            }\n        },\n        {\n            key: \"determineFirstPrevY\",\n            value: function(t) {\n                var e, i, a = t.i, s = t.series, r = t.prevY, o = t.lineYPosition, n = this.w, l = n.config.chart.stacked && !n.globals.comboCharts || n.config.chart.stacked && n.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || \"bar\" === (null === (e = this.w.config.series[a]) || void 0 === e ? void 0 : e.type));\n                if (void 0 !== (null === (i = s[a]) || void 0 === i ? void 0 : i[0])) r = (o = l && a > 0 ? this.lineCtx.prevSeriesY[a - 1][0] : this.lineCtx.zeroY) - s[a][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? s[a][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);\n                else if (l && a > 0 && void 0 === s[a][0]) {\n                    for(var h = a - 1; h >= 0; h--)if (null !== s[h][0] && void 0 !== s[h][0]) {\n                        r = o = this.lineCtx.prevSeriesY[h][0];\n                        break;\n                    }\n                }\n                return {\n                    prevY: r,\n                    lineYPosition: o\n                };\n            }\n        }\n    ]), t;\n}(), zt = function(t) {\n    for(var e, i, a, s, r = function(t) {\n        for(var e = [], i = t[0], a = t[1], s = e[0] = Yt(i, a), r = 1, o = t.length - 1; r < o; r++)i = a, a = t[r + 1], e[r] = .5 * (s + (s = Yt(i, a)));\n        return e[r] = s, e;\n    }(t), o = t.length - 1, n = [], l = 0; l < o; l++)a = Yt(t[l], t[l + 1]), Math.abs(a) < 1e-6 ? r[l] = r[l + 1] = 0 : (s = (e = r[l] / a) * e + (i = r[l + 1] / a) * i) > 9 && (s = 3 * a / Math.sqrt(s), r[l] = s * e, r[l + 1] = s * i);\n    for(var h = 0; h <= o; h++)s = (t[Math.min(o, h + 1)][0] - t[Math.max(0, h - 1)][0]) / (6 * (1 + r[h] * r[h])), n.push([\n        s || 0,\n        r[h] * s || 0\n    ]);\n    return n;\n}, Xt = function(t) {\n    for(var e = \"\", i = 0; i < t.length; i++){\n        var a = t[i], s = a.length;\n        s > 4 ? (e += \"C\".concat(a[0], \", \").concat(a[1]), e += \", \".concat(a[2], \", \").concat(a[3]), e += \", \".concat(a[4], \", \").concat(a[5])) : s > 2 && (e += \"S\".concat(a[0], \", \").concat(a[1]), e += \", \".concat(a[2], \", \").concat(a[3]));\n    }\n    return e;\n}, Et = function(t) {\n    var e = zt(t), i = t[1], a = t[0], s = [], r = e[1], o = e[0];\n    s.push(a, [\n        a[0] + o[0],\n        a[1] + o[1],\n        i[0] - r[0],\n        i[1] - r[1],\n        i[0],\n        i[1]\n    ]);\n    for(var n = 2, l = e.length; n < l; n++){\n        var h = t[n], c = e[n];\n        s.push([\n            h[0] - c[0],\n            h[1] - c[1],\n            h[0],\n            h[1]\n        ]);\n    }\n    return s;\n};\nfunction Yt(t, e) {\n    return (e[1] - t[1]) / (e[0] - t[0]);\n}\nvar Ft = function() {\n    function t(e, i, s) {\n        a(this, t), this.ctx = e, this.w = e.w, this.xyRatios = i, this.pointsChart = !(\"bubble\" !== this.w.config.chart.type && \"scatter\" !== this.w.config.chart.type) || s, this.scatter = new D(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Mt(this), this.markers = new H(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t, i, a, s) {\n                var r, o = this.w, n = new m(this.ctx), l = o.globals.comboCharts ? i : o.config.chart.type, h = n.group({\n                    class: \"apexcharts-\".concat(l, \"-series apexcharts-plot-series\")\n                }), c = new y(this.ctx, o);\n                this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t = c.getLogSeries(t), this.yRatio = c.getLogYRatios(this.yRatio);\n                for(var d = [], g = 0; g < t.length; g++){\n                    t = this.lineHelpers.sameValueSeriesFix(g, t);\n                    var u = o.globals.comboCharts ? a[g] : g;\n                    this._initSerieVariables(t, g, u);\n                    var p = [], f = [], x = [], b = o.globals.padHorizontal + this.categoryAxisCorrection;\n                    this.ctx.series.addCollapsedClassToSeries(this.elSeries, u), o.globals.isXNumeric && o.globals.seriesX.length > 0 && (b = (o.globals.seriesX[u][0] - o.globals.minX) / this.xRatio), x.push(b);\n                    var v, w = b, k = void 0, A = w, S = this.zeroY, C = this.zeroY;\n                    S = this.lineHelpers.determineFirstPrevY({\n                        i: g,\n                        series: t,\n                        prevY: S,\n                        lineYPosition: 0\n                    }).prevY, \"monotonCubic\" === o.config.stroke.curve && null === t[g][0] ? p.push(null) : p.push(S), v = S;\n                    \"rangeArea\" === l && (k = C = this.lineHelpers.determineFirstPrevY({\n                        i: g,\n                        series: s,\n                        prevY: C,\n                        lineYPosition: 0\n                    }).prevY, f.push(C));\n                    var L = {\n                        type: l,\n                        series: t,\n                        realIndex: u,\n                        i: g,\n                        x: b,\n                        y: 1,\n                        pX: w,\n                        pY: v,\n                        pathsFrom: this._calculatePathsFrom({\n                            type: l,\n                            series: t,\n                            i: g,\n                            realIndex: u,\n                            prevX: A,\n                            prevY: S,\n                            prevY2: C\n                        }),\n                        linePaths: [],\n                        areaPaths: [],\n                        seriesIndex: a,\n                        lineYPosition: 0,\n                        xArrj: x,\n                        yArrj: p,\n                        y2Arrj: f,\n                        seriesRangeEnd: s\n                    }, P = this._iterateOverDataPoints(e(e({}, L), {}, {\n                        iterations: \"rangeArea\" === l ? t[g].length - 1 : void 0,\n                        isRangeStart: !0\n                    }));\n                    if (\"rangeArea\" === l) {\n                        var I = this._calculatePathsFrom({\n                            series: s,\n                            i: g,\n                            realIndex: u,\n                            prevX: A,\n                            prevY: C\n                        }), T = this._iterateOverDataPoints(e(e({}, L), {}, {\n                            series: s,\n                            pY: k,\n                            pathsFrom: I,\n                            iterations: s[g].length - 1,\n                            isRangeStart: !1\n                        }));\n                        P.linePaths[0] = T.linePath + P.linePath, P.pathFromLine = T.pathFromLine + P.pathFromLine;\n                    }\n                    this._handlePaths({\n                        type: l,\n                        realIndex: u,\n                        i: g,\n                        paths: P\n                    }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), d.push(this.elSeries);\n                }\n                if (void 0 !== (null === (r = o.config.series[0]) || void 0 === r ? void 0 : r.zIndex) && d.sort(function(t, e) {\n                    return Number(t.node.getAttribute(\"zIndex\")) - Number(e.node.getAttribute(\"zIndex\"));\n                }), o.config.chart.stacked) for(var M = d.length; M > 0; M--)h.add(d[M - 1]);\n                else for(var z = 0; z < d.length; z++)h.add(d[z]);\n                return h;\n            }\n        },\n        {\n            key: \"_initSerieVariables\",\n            value: function(t, e, i) {\n                var a = this.w, s = new m(this.ctx);\n                this.xDivision = a.globals.gridWidth / (a.globals.dataPoints - (\"on\" === a.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a.config.stroke.width) ? a.config.stroke.width[i] : a.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a.globals.gridHeight || \"end\" === a.config.plotOptions.area.fillTo) && (this.areaBottomY = a.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s.group({\n                    class: \"apexcharts-series\",\n                    zIndex: void 0 !== a.config.series[i].zIndex ? a.config.series[i].zIndex : i,\n                    seriesName: x.escapeString(a.globals.seriesNames[i])\n                }), this.elPointsMain = s.group({\n                    class: \"apexcharts-series-markers-wrap\",\n                    \"data:realIndex\": i\n                }), this.elDataLabelsWrap = s.group({\n                    class: \"apexcharts-datalabels\",\n                    \"data:realIndex\": i\n                });\n                var r = t[e].length === a.globals.dataPoints;\n                this.elSeries.attr({\n                    \"data:longestSeries\": r,\n                    rel: e + 1,\n                    \"data:realIndex\": i\n                }), this.appendPathFrom = !0;\n            }\n        },\n        {\n            key: \"_calculatePathsFrom\",\n            value: function(t) {\n                var e, i, a, s, r = t.type, o = t.series, n = t.i, l = t.realIndex, h = t.prevX, c = t.prevY, d = t.prevY2, g = this.w, u = new m(this.ctx);\n                if (null === o[n][0]) {\n                    for(var p = 0; p < o[n].length; p++)if (null !== o[n][p]) {\n                        h = this.xDivision * p, c = this.zeroY - o[n][p] / this.yRatio[this.yaxisIndex], e = u.move(h, c), i = u.move(h, this.areaBottomY);\n                        break;\n                    }\n                } else e = u.move(h, c), \"rangeArea\" === r && (e = u.move(h, d) + u.line(h, c)), i = u.move(h, this.areaBottomY) + u.line(h, c);\n                if (a = u.move(-1, this.zeroY) + u.line(-1, this.zeroY), s = u.move(-1, this.zeroY) + u.line(-1, this.zeroY), g.globals.previousPaths.length > 0) {\n                    var f = this.lineHelpers.checkPreviousPaths({\n                        pathFromLine: a,\n                        pathFromArea: s,\n                        realIndex: l\n                    });\n                    a = f.pathFromLine, s = f.pathFromArea;\n                }\n                return {\n                    prevX: h,\n                    prevY: c,\n                    linePath: e,\n                    areaPath: i,\n                    pathFromLine: a,\n                    pathFromArea: s\n                };\n            }\n        },\n        {\n            key: \"_handlePaths\",\n            value: function(t) {\n                var i = t.type, a = t.realIndex, s = t.i, r = t.paths, o = this.w, n = new m(this.ctx), l = new R(this.ctx);\n                this.prevSeriesY.push(r.yArrj), o.globals.seriesXvalues[a] = r.xArrj, o.globals.seriesYvalues[a] = r.yArrj;\n                var h = o.config.forecastDataPoints;\n                if (h.count > 0 && \"rangeArea\" !== i) {\n                    var c = o.globals.seriesXvalues[a][o.globals.seriesXvalues[a].length - h.count - 1], d = n.drawRect(c, 0, o.globals.gridWidth, o.globals.gridHeight, 0);\n                    o.globals.dom.elForecastMask.appendChild(d.node);\n                    var g = n.drawRect(0, 0, c, o.globals.gridHeight, 0);\n                    o.globals.dom.elNonForecastMask.appendChild(g.node);\n                }\n                this.pointsChart || o.globals.delayedElements.push({\n                    el: this.elPointsMain.node,\n                    index: a\n                });\n                var u = {\n                    i: s,\n                    realIndex: a,\n                    animationDelay: s,\n                    initialSpeed: o.config.chart.animations.speed,\n                    dataChangeSpeed: o.config.chart.animations.dynamicAnimation.speed,\n                    className: \"apexcharts-\".concat(i)\n                };\n                if (\"area\" === i) for(var p = l.fillPath({\n                    seriesNumber: a\n                }), f = 0; f < r.areaPaths.length; f++){\n                    var x = n.renderPaths(e(e({}, u), {}, {\n                        pathFrom: r.pathFromArea,\n                        pathTo: r.areaPaths[f],\n                        stroke: \"none\",\n                        strokeWidth: 0,\n                        strokeLineCap: null,\n                        fill: p\n                    }));\n                    this.elSeries.add(x);\n                }\n                if (o.config.stroke.show && !this.pointsChart) {\n                    var b = null;\n                    if (\"line\" === i) b = l.fillPath({\n                        seriesNumber: a,\n                        i: s\n                    });\n                    else if (\"solid\" === o.config.stroke.fill.type) b = o.globals.stroke.colors[a];\n                    else {\n                        var v = o.config.fill;\n                        o.config.fill = o.config.stroke.fill, b = l.fillPath({\n                            seriesNumber: a,\n                            i: s\n                        }), o.config.fill = v;\n                    }\n                    for(var y = 0; y < r.linePaths.length; y++){\n                        var w = b;\n                        \"rangeArea\" === i && (w = l.fillPath({\n                            seriesNumber: a\n                        }));\n                        var k = e(e({}, u), {}, {\n                            pathFrom: r.pathFromLine,\n                            pathTo: r.linePaths[y],\n                            stroke: b,\n                            strokeWidth: this.strokeWidth,\n                            strokeLineCap: o.config.stroke.lineCap,\n                            fill: \"rangeArea\" === i ? w : \"none\"\n                        }), A = n.renderPaths(k);\n                        if (this.elSeries.add(A), A.attr(\"fill-rule\", \"evenodd\"), h.count > 0 && \"rangeArea\" !== i) {\n                            var S = n.renderPaths(k);\n                            S.node.setAttribute(\"stroke-dasharray\", h.dashArray), h.strokeWidth && S.node.setAttribute(\"stroke-width\", h.strokeWidth), this.elSeries.add(S), S.attr(\"clip-path\", \"url(#forecastMask\".concat(o.globals.cuid, \")\")), A.attr(\"clip-path\", \"url(#nonForecastMask\".concat(o.globals.cuid, \")\"));\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"_iterateOverDataPoints\",\n            value: function(t) {\n                var e, i = this, a = t.type, s = t.series, r = t.iterations, o = t.realIndex, n = t.i, l = t.x, h = t.y, c = t.pX, d = t.pY, g = t.pathsFrom, u = t.linePaths, p = t.areaPaths, f = t.seriesIndex, b = t.lineYPosition, v = t.xArrj, y = t.yArrj, w = t.y2Arrj, k = t.isRangeStart, A = t.seriesRangeEnd, S = this.w, C = new m(this.ctx), L = this.yRatio, P = g.prevY, I = g.linePath, T = g.areaPath, M = g.pathFromLine, z = g.pathFromArea, X = x.isNumber(S.globals.minYArr[o]) ? S.globals.minYArr[o] : S.globals.minY;\n                r || (r = S.globals.dataPoints > 1 ? S.globals.dataPoints - 1 : S.globals.dataPoints);\n                for(var E = function(t, e) {\n                    return e - t / L[i.yaxisIndex] + 2 * (i.isReversed ? t / L[i.yaxisIndex] : 0);\n                }, Y = h, F = S.config.chart.stacked && !S.globals.comboCharts || S.config.chart.stacked && S.globals.comboCharts && (!this.w.config.chart.stackOnlyBar || \"bar\" === (null === (e = this.w.config.series[o]) || void 0 === e ? void 0 : e.type)), R = 0; R < r; R++){\n                    var H = void 0 === s[n][R + 1] || null === s[n][R + 1];\n                    if (S.globals.isXNumeric) {\n                        var D = S.globals.seriesX[o][R + 1];\n                        void 0 === S.globals.seriesX[o][R + 1] && (D = S.globals.seriesX[o][r - 1]), l = (D - S.globals.minX) / this.xRatio;\n                    } else l += this.xDivision;\n                    if (F) if (n > 0 && S.globals.collapsedSeries.length < S.config.series.length - 1) {\n                        b = this.prevSeriesY[function(t) {\n                            for(var e = t, i = 0; i < S.globals.series.length; i++)if (S.globals.collapsedSeriesIndices.indexOf(t) > -1) {\n                                e--;\n                                break;\n                            }\n                            return e >= 0 ? e : 0;\n                        }(n - 1)][R + 1];\n                    } else b = this.zeroY;\n                    else b = this.zeroY;\n                    H ? h = E(X, b) : (h = E(s[n][R + 1], b), \"rangeArea\" === a && (Y = E(A[n][R + 1], b))), v.push(l), H && \"smooth\" === S.config.stroke.curve ? y.push(null) : y.push(h), w.push(Y);\n                    var O = this.lineHelpers.calculatePoints({\n                        series: s,\n                        x: l,\n                        y: h,\n                        realIndex: o,\n                        i: n,\n                        j: R,\n                        prevY: P\n                    }), N = this._createPaths({\n                        type: a,\n                        series: s,\n                        i: n,\n                        realIndex: o,\n                        j: R,\n                        x: l,\n                        y: h,\n                        y2: Y,\n                        xArrj: v,\n                        yArrj: y,\n                        y2Arrj: w,\n                        pX: c,\n                        pY: d,\n                        linePath: I,\n                        areaPath: T,\n                        linePaths: u,\n                        areaPaths: p,\n                        seriesIndex: f,\n                        isRangeStart: k\n                    });\n                    p = N.areaPaths, u = N.linePaths, c = N.pX, d = N.pY, T = N.areaPath, I = N.linePath, !this.appendPathFrom || \"monotoneCubic\" === S.config.stroke.curve && \"rangeArea\" === a || (M += C.line(l, this.zeroY), z += C.line(l, this.zeroY)), this.handleNullDataPoints(s, O, n, R, o), this._handleMarkersAndLabels({\n                        type: a,\n                        pointsPos: O,\n                        i: n,\n                        j: R,\n                        realIndex: o,\n                        isRangeStart: k\n                    });\n                }\n                return {\n                    yArrj: y,\n                    xArrj: v,\n                    pathFromArea: z,\n                    areaPaths: p,\n                    pathFromLine: M,\n                    linePaths: u,\n                    linePath: I,\n                    areaPath: T\n                };\n            }\n        },\n        {\n            key: \"_handleMarkersAndLabels\",\n            value: function(t) {\n                var e = t.type, i = t.pointsPos, a = t.isRangeStart, s = t.i, r = t.j, o = t.realIndex, n = this.w, l = new O(this.ctx);\n                if (this.pointsChart) this.scatter.draw(this.elSeries, r, {\n                    realIndex: o,\n                    pointsPos: i,\n                    zRatio: this.zRatio,\n                    elParent: this.elPointsMain\n                });\n                else {\n                    n.globals.series[s].length > 1 && this.elPointsMain.node.classList.add(\"apexcharts-element-hidden\");\n                    var h = this.markers.plotChartMarkers(i, o, r + 1);\n                    null !== h && this.elPointsMain.add(h);\n                }\n                var c = l.drawDataLabel({\n                    type: e,\n                    isRangeStart: a,\n                    pos: i,\n                    i: o,\n                    j: r + 1\n                });\n                null !== c && this.elDataLabelsWrap.add(c);\n            }\n        },\n        {\n            key: \"_createPaths\",\n            value: function(t) {\n                var e = t.type, i = t.series, a = t.i, s = t.realIndex, r = t.j, o = t.x, n = t.y, l = t.xArrj, h = t.yArrj, c = t.y2, d = t.y2Arrj, g = t.pX, u = t.pY, p = t.linePath, f = t.areaPath, x = t.linePaths, b = t.areaPaths, v = t.seriesIndex, y = t.isRangeStart, w = this.w, k = new m(this.ctx), A = w.config.stroke.curve, S = this.areaBottomY;\n                if (Array.isArray(w.config.stroke.curve) && (A = Array.isArray(v) ? w.config.stroke.curve[v[a]] : w.config.stroke.curve[a]), \"rangeArea\" === e && (w.globals.hasNullValues || w.config.forecastDataPoints.count > 0) && \"monotoneCubic\" === A && (A = \"straight\"), \"monotoneCubic\" === A) {\n                    var C = \"rangeArea\" === e ? l.length === w.globals.dataPoints : r === i[a].length - 2, L = l.map(function(t, e) {\n                        return [\n                            l[e],\n                            h[e]\n                        ];\n                    }).filter(function(t) {\n                        return null !== t[1];\n                    });\n                    if (C && L.length > 1) {\n                        var P = Et(L);\n                        if (p += Xt(P), null === i[a][0] ? f = p : f += Xt(P), \"rangeArea\" === e && y) {\n                            p += k.line(l[l.length - 1], d[d.length - 1]);\n                            var I = l.slice().reverse(), T = d.slice().reverse(), M = I.map(function(t, e) {\n                                return [\n                                    I[e],\n                                    T[e]\n                                ];\n                            }), z = Et(M);\n                            f = p += Xt(z);\n                        } else f += k.line(L[L.length - 1][0], S) + k.line(L[0][0], S) + k.move(L[0][0], L[0][1]) + \"z\";\n                        x.push(p), b.push(f);\n                    }\n                } else if (\"smooth\" === A) {\n                    var X = .35 * (o - g);\n                    w.globals.hasNullValues ? (null !== i[a][r] && (null !== i[a][r + 1] ? (p = k.move(g, u) + k.curve(g + X, u, o - X, n, o + 1, n), f = k.move(g + 1, u) + k.curve(g + X, u, o - X, n, o + 1, n) + k.line(o, S) + k.line(g, S) + \"z\") : (p = k.move(g, u), f = k.move(g, u) + \"z\")), x.push(p), b.push(f)) : (p += k.curve(g + X, u, o - X, n, o, n), f += k.curve(g + X, u, o - X, n, o, n)), g = o, u = n, r === i[a].length - 2 && (f = f + k.curve(g, u, o, n, o, S) + k.move(o, n) + \"z\", \"rangeArea\" === e && y ? p = p + k.curve(g, u, o, n, o, c) + k.move(o, c) + \"z\" : w.globals.hasNullValues || (x.push(p), b.push(f)));\n                } else {\n                    if (null === i[a][r + 1]) {\n                        p += k.move(o, n);\n                        var E = w.globals.isXNumeric ? (w.globals.seriesX[s][r] - w.globals.minX) / this.xRatio : o - this.xDivision;\n                        f = f + k.line(E, S) + k.move(o, n) + \"z\";\n                    }\n                    null === i[a][r] && (p += k.move(o, n), f += k.move(o, S)), \"stepline\" === A ? (p = p + k.line(o, null, \"H\") + k.line(null, n, \"V\"), f = f + k.line(o, null, \"H\") + k.line(null, n, \"V\")) : \"straight\" === A && (p += k.line(o, n), f += k.line(o, n)), r === i[a].length - 2 && (f = f + k.line(o, S) + k.move(o, n) + \"z\", \"rangeArea\" === e && y ? p = p + k.line(o, c) + k.move(o, c) + \"z\" : (x.push(p), b.push(f)));\n                }\n                return {\n                    linePaths: x,\n                    areaPaths: b,\n                    pX: g,\n                    pY: u,\n                    linePath: p,\n                    areaPath: f\n                };\n            }\n        },\n        {\n            key: \"handleNullDataPoints\",\n            value: function(t, e, i, a, s) {\n                var r = this.w;\n                if (null === t[i][a] && r.config.markers.showNullDataPoints || 1 === t[i].length) {\n                    var o = this.markers.plotChartMarkers(e, s, a + 1, this.strokeWidth - r.config.markers.strokeWidth / 2, !0);\n                    null !== o && this.elPointsMain.add(o);\n                }\n            }\n        }\n    ]), t;\n}();\nwindow.TreemapSquared = {}, window.TreemapSquared.generate = function() {\n    function t(e, i, a, s) {\n        this.xoffset = e, this.yoffset = i, this.height = s, this.width = a, this.shortestEdge = function() {\n            return Math.min(this.height, this.width);\n        }, this.getCoordinates = function(t) {\n            var e, i = [], a = this.xoffset, s = this.yoffset, o = r(t) / this.height, n = r(t) / this.width;\n            if (this.width >= this.height) for(e = 0; e < t.length; e++)i.push([\n                a,\n                s,\n                a + o,\n                s + t[e] / o\n            ]), s += t[e] / o;\n            else for(e = 0; e < t.length; e++)i.push([\n                a,\n                s,\n                a + t[e] / n,\n                s + n\n            ]), a += t[e] / n;\n            return i;\n        }, this.cutArea = function(e) {\n            var i;\n            if (this.width >= this.height) {\n                var a = e / this.height, s = this.width - a;\n                i = new t(this.xoffset + a, this.yoffset, s, this.height);\n            } else {\n                var r = e / this.width, o = this.height - r;\n                i = new t(this.xoffset, this.yoffset + r, this.width, o);\n            }\n            return i;\n        };\n    }\n    function e(e, a, s, o, n) {\n        o = void 0 === o ? 0 : o, n = void 0 === n ? 0 : n;\n        var l = i(function(t, e) {\n            var i, a = [], s = e / r(t);\n            for(i = 0; i < t.length; i++)a[i] = t[i] * s;\n            return a;\n        }(e, a * s), [], new t(o, n, a, s), []);\n        return function(t) {\n            var e, i, a = [];\n            for(e = 0; e < t.length; e++)for(i = 0; i < t[e].length; i++)a.push(t[e][i]);\n            return a;\n        }(l);\n    }\n    function i(t, e, s, o) {\n        var n, l, h;\n        if (0 !== t.length) return n = s.shortestEdge(), function(t, e, i) {\n            var s;\n            if (0 === t.length) return !0;\n            (s = t.slice()).push(e);\n            var r = a(t, i), o = a(s, i);\n            return r >= o;\n        }(e, l = t[0], n) ? (e.push(l), i(t.slice(1), e, s, o)) : (h = s.cutArea(r(e), o), o.push(s.getCoordinates(e)), i(t, [], h, o)), o;\n        o.push(s.getCoordinates(e));\n    }\n    function a(t, e) {\n        var i = Math.min.apply(Math, t), a = Math.max.apply(Math, t), s = r(t);\n        return Math.max(Math.pow(e, 2) * a / Math.pow(s, 2), Math.pow(s, 2) / (Math.pow(e, 2) * i));\n    }\n    function s(t) {\n        return t && t.constructor === Array;\n    }\n    function r(t) {\n        var e, i = 0;\n        for(e = 0; e < t.length; e++)i += t[e];\n        return i;\n    }\n    function o(t) {\n        var e, i = 0;\n        if (s(t[0])) for(e = 0; e < t.length; e++)i += o(t[e]);\n        else i = r(t);\n        return i;\n    }\n    return function t(i, a, r, n, l) {\n        n = void 0 === n ? 0 : n, l = void 0 === l ? 0 : l;\n        var h, c, d = [], g = [];\n        if (s(i[0])) {\n            for(c = 0; c < i.length; c++)d[c] = o(i[c]);\n            for(h = e(d, a, r, n, l), c = 0; c < i.length; c++)g.push(t(i[c], h[c][2] - h[c][0], h[c][3] - h[c][1], h[c][0], h[c][1]));\n        } else g = e(i, a, r, n, l);\n        return g;\n    };\n}();\nvar Rt, Ht, Dt = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = e, this.w = e.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new At(e), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];\n    }\n    return r(t, [\n        {\n            key: \"draw\",\n            value: function(t) {\n                var e = this, i = this.w, a = new m(this.ctx), s = new R(this.ctx), r = a.group({\n                    class: \"apexcharts-treemap\"\n                });\n                if (i.globals.noData) return r;\n                var o = [];\n                return t.forEach(function(t) {\n                    var e = t.map(function(t) {\n                        return Math.abs(t);\n                    });\n                    o.push(e);\n                }), this.negRange = this.helpers.checkColorRange(), i.config.series.forEach(function(t, i) {\n                    t.data.forEach(function(t) {\n                        Array.isArray(e.labels[i]) || (e.labels[i] = []), e.labels[i].push(t.x);\n                    });\n                }), window.TreemapSquared.generate(o, i.globals.gridWidth, i.globals.gridHeight).forEach(function(o, n) {\n                    var l = a.group({\n                        class: \"apexcharts-series apexcharts-treemap-series\",\n                        seriesName: x.escapeString(i.globals.seriesNames[n]),\n                        rel: n + 1,\n                        \"data:realIndex\": n\n                    });\n                    if (i.config.chart.dropShadow.enabled) {\n                        var h = i.config.chart.dropShadow;\n                        new v(e.ctx).dropShadow(r, h, n);\n                    }\n                    var c = a.group({\n                        class: \"apexcharts-data-labels\"\n                    });\n                    o.forEach(function(r, o) {\n                        var h = r[0], c = r[1], d = r[2], g = r[3], u = a.drawRect(h, c, d - h, g - c, i.config.plotOptions.treemap.borderRadius, \"#fff\", 1, e.strokeWidth, i.config.plotOptions.treemap.useFillColorAsStroke ? f : i.globals.stroke.colors[n]);\n                        u.attr({\n                            cx: h,\n                            cy: c,\n                            index: n,\n                            i: n,\n                            j: o,\n                            width: d - h,\n                            height: g - c\n                        });\n                        var p = e.helpers.getShadeColor(i.config.chart.type, n, o, e.negRange), f = p.color;\n                        void 0 !== i.config.series[n].data[o] && i.config.series[n].data[o].fillColor && (f = i.config.series[n].data[o].fillColor);\n                        var x = s.fillPath({\n                            color: f,\n                            seriesNumber: n,\n                            dataPointIndex: o\n                        });\n                        u.node.classList.add(\"apexcharts-treemap-rect\"), u.attr({\n                            fill: x\n                        }), e.helpers.addListeners(u);\n                        var b = {\n                            x: h + (d - h) / 2,\n                            y: c + (g - c) / 2,\n                            width: 0,\n                            height: 0\n                        }, v = {\n                            x: h,\n                            y: c,\n                            width: d - h,\n                            height: g - c\n                        };\n                        if (i.config.chart.animations.enabled && !i.globals.dataChanged) {\n                            var m = 1;\n                            i.globals.resized || (m = i.config.chart.animations.speed), e.animateTreemap(u, b, v, m);\n                        }\n                        if (i.globals.dataChanged) {\n                            var y = 1;\n                            e.dynamicAnim.enabled && i.globals.shouldAnimate && (y = e.dynamicAnim.speed, i.globals.previousPaths[n] && i.globals.previousPaths[n][o] && i.globals.previousPaths[n][o].rect && (b = i.globals.previousPaths[n][o].rect), e.animateTreemap(u, b, v, y));\n                        }\n                        var w = e.getFontSize(r), k = i.config.dataLabels.formatter(e.labels[n][o], {\n                            value: i.globals.series[n][o],\n                            seriesIndex: n,\n                            dataPointIndex: o,\n                            w: i\n                        });\n                        \"truncate\" === i.config.plotOptions.treemap.dataLabels.format && (w = parseInt(i.config.dataLabels.style.fontSize, 10), k = e.truncateLabels(k, w, h, c, d, g));\n                        var A = e.helpers.calculateDataLabels({\n                            text: k,\n                            x: (h + d) / 2,\n                            y: (c + g) / 2 + e.strokeWidth / 2 + w / 3,\n                            i: n,\n                            j: o,\n                            colorProps: p,\n                            fontSize: w,\n                            series: t\n                        });\n                        i.config.dataLabels.enabled && A && e.rotateToFitLabel(A, w, k, h, c, d, g), l.add(u), null !== A && l.add(A);\n                    }), l.add(c), r.add(l);\n                }), r;\n            }\n        },\n        {\n            key: \"getFontSize\",\n            value: function(t) {\n                var e = this.w;\n                var i, a, s, r, o = function t(e) {\n                    var i, a = 0;\n                    if (Array.isArray(e[0])) for(i = 0; i < e.length; i++)a += t(e[i]);\n                    else for(i = 0; i < e.length; i++)a += e[i].length;\n                    return a;\n                }(this.labels) / function t(e) {\n                    var i, a = 0;\n                    if (Array.isArray(e[0])) for(i = 0; i < e.length; i++)a += t(e[i]);\n                    else for(i = 0; i < e.length; i++)a += 1;\n                    return a;\n                }(this.labels);\n                return i = t[2] - t[0], a = t[3] - t[1], s = i * a, r = Math.pow(s, .5), Math.min(r / o, parseInt(e.config.dataLabels.style.fontSize, 10));\n            }\n        },\n        {\n            key: \"rotateToFitLabel\",\n            value: function(t, e, i, a, s, r, o) {\n                var n = new m(this.ctx), l = n.getTextRects(i, e);\n                if (l.width + this.w.config.stroke.width + 5 > r - a && l.width <= o - s) {\n                    var h = n.rotateAroundCenter(t.node);\n                    t.node.setAttribute(\"transform\", \"rotate(-90 \".concat(h.x, \" \").concat(h.y, \") translate(\").concat(l.height / 3, \")\"));\n                }\n            }\n        },\n        {\n            key: \"truncateLabels\",\n            value: function(t, e, i, a, s, r) {\n                var o = new m(this.ctx), n = o.getTextRects(t, e).width + this.w.config.stroke.width + 5 > s - i && r - a > s - i ? r - a : s - i, l = o.getTextBasedOnMaxWidth({\n                    text: t,\n                    maxWidth: n,\n                    fontSize: e\n                });\n                return t.length !== l.length && n / e < 5 ? \"\" : l;\n            }\n        },\n        {\n            key: \"animateTreemap\",\n            value: function(t, e, i, a) {\n                var s = new b(this.ctx);\n                s.animateRect(t, {\n                    x: e.x,\n                    y: e.y,\n                    width: e.width,\n                    height: e.height\n                }, {\n                    x: i.x,\n                    y: i.y,\n                    width: i.width,\n                    height: i.height\n                }, a, function() {\n                    s.animationCompleted(t);\n                });\n            }\n        }\n    ]), t;\n}(), Ot = 86400, Nt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;\n    }\n    return r(t, [\n        {\n            key: \"calculateTimeScaleTicks\",\n            value: function(t, i) {\n                var a = this, s = this.w;\n                if (s.globals.allSeriesCollapsed) return s.globals.labels = [], s.globals.timescaleLabels = [], [];\n                var r = new I(this.ctx), o = (i - t) / 864e5;\n                this.determineInterval(o), s.globals.disableZoomIn = !1, s.globals.disableZoomOut = !1, o < .00011574074074074075 ? s.globals.disableZoomIn = !0 : o > 5e4 && (s.globals.disableZoomOut = !0);\n                var n = r.getTimeUnitsfromTimestamp(t, i, this.utc), l = s.globals.gridWidth / o, h = l / 24, c = h / 60, d = c / 60, g = Math.floor(24 * o), u = Math.floor(1440 * o), p = Math.floor(o * Ot), f = Math.floor(o), x = Math.floor(o / 30), b = Math.floor(o / 365), v = {\n                    minMillisecond: n.minMillisecond,\n                    minSecond: n.minSecond,\n                    minMinute: n.minMinute,\n                    minHour: n.minHour,\n                    minDate: n.minDate,\n                    minMonth: n.minMonth,\n                    minYear: n.minYear\n                }, m = {\n                    firstVal: v,\n                    currentMillisecond: v.minMillisecond,\n                    currentSecond: v.minSecond,\n                    currentMinute: v.minMinute,\n                    currentHour: v.minHour,\n                    currentMonthDate: v.minDate,\n                    currentDate: v.minDate,\n                    currentMonth: v.minMonth,\n                    currentYear: v.minYear,\n                    daysWidthOnXAxis: l,\n                    hoursWidthOnXAxis: h,\n                    minutesWidthOnXAxis: c,\n                    secondsWidthOnXAxis: d,\n                    numberOfSeconds: p,\n                    numberOfMinutes: u,\n                    numberOfHours: g,\n                    numberOfDays: f,\n                    numberOfMonths: x,\n                    numberOfYears: b\n                };\n                switch(this.tickInterval){\n                    case \"years\":\n                        this.generateYearScale(m);\n                        break;\n                    case \"months\":\n                    case \"half_year\":\n                        this.generateMonthScale(m);\n                        break;\n                    case \"months_days\":\n                    case \"months_fortnight\":\n                    case \"days\":\n                    case \"week_days\":\n                        this.generateDayScale(m);\n                        break;\n                    case \"hours\":\n                        this.generateHourScale(m);\n                        break;\n                    case \"minutes_fives\":\n                    case \"minutes\":\n                        this.generateMinuteScale(m);\n                        break;\n                    case \"seconds_tens\":\n                    case \"seconds_fives\":\n                    case \"seconds\":\n                        this.generateSecondScale(m);\n                }\n                var y = this.timeScaleArray.map(function(t) {\n                    var i = {\n                        position: t.position,\n                        unit: t.unit,\n                        year: t.year,\n                        day: t.day ? t.day : 1,\n                        hour: t.hour ? t.hour : 0,\n                        month: t.month + 1\n                    };\n                    return \"month\" === t.unit ? e(e({}, i), {}, {\n                        day: 1,\n                        value: t.value + 1\n                    }) : \"day\" === t.unit || \"hour\" === t.unit ? e(e({}, i), {}, {\n                        value: t.value\n                    }) : \"minute\" === t.unit ? e(e({}, i), {}, {\n                        value: t.value,\n                        minute: t.value\n                    }) : \"second\" === t.unit ? e(e({}, i), {}, {\n                        value: t.value,\n                        minute: t.minute,\n                        second: t.second\n                    }) : t;\n                });\n                return y.filter(function(t) {\n                    var e = 1, i = Math.ceil(s.globals.gridWidth / 120), r = t.value;\n                    void 0 !== s.config.xaxis.tickAmount && (i = s.config.xaxis.tickAmount), y.length > i && (e = Math.floor(y.length / i));\n                    var o = !1, n = !1;\n                    switch(a.tickInterval){\n                        case \"years\":\n                            \"year\" === t.unit && (o = !0);\n                            break;\n                        case \"half_year\":\n                            e = 7, \"year\" === t.unit && (o = !0);\n                            break;\n                        case \"months\":\n                            e = 1, \"year\" === t.unit && (o = !0);\n                            break;\n                        case \"months_fortnight\":\n                            e = 15, \"year\" !== t.unit && \"month\" !== t.unit || (o = !0), 30 === r && (n = !0);\n                            break;\n                        case \"months_days\":\n                            e = 10, \"month\" === t.unit && (o = !0), 30 === r && (n = !0);\n                            break;\n                        case \"week_days\":\n                            e = 8, \"month\" === t.unit && (o = !0);\n                            break;\n                        case \"days\":\n                            e = 1, \"month\" === t.unit && (o = !0);\n                            break;\n                        case \"hours\":\n                            \"day\" === t.unit && (o = !0);\n                            break;\n                        case \"minutes_fives\":\n                        case \"seconds_fives\":\n                            r % 5 != 0 && (n = !0);\n                            break;\n                        case \"seconds_tens\":\n                            r % 10 != 0 && (n = !0);\n                    }\n                    if (\"hours\" === a.tickInterval || \"minutes_fives\" === a.tickInterval || \"seconds_tens\" === a.tickInterval || \"seconds_fives\" === a.tickInterval) {\n                        if (!n) return !0;\n                    } else if ((r % e == 0 || o) && !n) return !0;\n                });\n            }\n        },\n        {\n            key: \"recalcDimensionsBasedOnFormat\",\n            value: function(t, e) {\n                var i = this.w, a = this.formatDates(t), s = this.removeOverlappingTS(a);\n                i.globals.timescaleLabels = s.slice(), new ot(this.ctx).plotCoords();\n            }\n        },\n        {\n            key: \"determineInterval\",\n            value: function(t) {\n                var e = 24 * t, i = 60 * e;\n                switch(!0){\n                    case t / 365 > 5:\n                        this.tickInterval = \"years\";\n                        break;\n                    case t > 800:\n                        this.tickInterval = \"half_year\";\n                        break;\n                    case t > 180:\n                        this.tickInterval = \"months\";\n                        break;\n                    case t > 90:\n                        this.tickInterval = \"months_fortnight\";\n                        break;\n                    case t > 60:\n                        this.tickInterval = \"months_days\";\n                        break;\n                    case t > 30:\n                        this.tickInterval = \"week_days\";\n                        break;\n                    case t > 2:\n                        this.tickInterval = \"days\";\n                        break;\n                    case e > 2.4:\n                        this.tickInterval = \"hours\";\n                        break;\n                    case i > 15:\n                        this.tickInterval = \"minutes_fives\";\n                        break;\n                    case i > 5:\n                        this.tickInterval = \"minutes\";\n                        break;\n                    case i > 1:\n                        this.tickInterval = \"seconds_tens\";\n                        break;\n                    case 60 * i > 20:\n                        this.tickInterval = \"seconds_fives\";\n                        break;\n                    default:\n                        this.tickInterval = \"seconds\";\n                }\n            }\n        },\n        {\n            key: \"generateYearScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentMonth, a = t.currentYear, s = t.daysWidthOnXAxis, r = t.numberOfYears, o = e.minYear, n = 0, l = new I(this.ctx), h = \"year\";\n                if (e.minDate > 1 || e.minMonth > 0) {\n                    var c = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);\n                    n = (l.determineDaysOfYear(e.minYear) - c + 1) * s, o = e.minYear + 1, this.timeScaleArray.push({\n                        position: n,\n                        value: o,\n                        unit: h,\n                        year: o,\n                        month: x.monthMod(i + 1)\n                    });\n                } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({\n                    position: n,\n                    value: o,\n                    unit: h,\n                    year: a,\n                    month: x.monthMod(i + 1)\n                });\n                for(var d = o, g = n, u = 0; u < r; u++)d++, g = l.determineDaysOfYear(d - 1) * s + g, this.timeScaleArray.push({\n                    position: g,\n                    value: d,\n                    unit: h,\n                    year: d,\n                    month: 1\n                });\n            }\n        },\n        {\n            key: \"generateMonthScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentMonthDate, a = t.currentMonth, s = t.currentYear, r = t.daysWidthOnXAxis, o = t.numberOfMonths, n = a, l = 0, h = new I(this.ctx), c = \"month\", d = 0;\n                if (e.minDate > 1) {\n                    l = (h.determineDaysOfMonths(a + 1, e.minYear) - i + 1) * r, n = x.monthMod(a + 1);\n                    var g = s + d, u = x.monthMod(n), p = n;\n                    0 === n && (c = \"year\", p = g, u = 1, g += d += 1), this.timeScaleArray.push({\n                        position: l,\n                        value: p,\n                        unit: c,\n                        year: g,\n                        month: u\n                    });\n                } else this.timeScaleArray.push({\n                    position: l,\n                    value: n,\n                    unit: c,\n                    year: s,\n                    month: x.monthMod(a)\n                });\n                for(var f = n + 1, b = l, v = 0, m = 1; v < o; v++, m++){\n                    0 === (f = x.monthMod(f)) ? (c = \"year\", d += 1) : c = \"month\";\n                    var y = this._getYear(s, f, d);\n                    b = h.determineDaysOfMonths(f, y) * r + b;\n                    var w = 0 === f ? y : f;\n                    this.timeScaleArray.push({\n                        position: b,\n                        value: w,\n                        unit: c,\n                        year: y,\n                        month: 0 === f ? 1 : f\n                    }), f++;\n                }\n            }\n        },\n        {\n            key: \"generateDayScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentMonth, a = t.currentYear, s = t.hoursWidthOnXAxis, r = t.numberOfDays, o = new I(this.ctx), n = \"day\", l = e.minDate + 1, h = l, c = function(t, e, i) {\n                    return t > o.determineDaysOfMonths(e + 1, i) ? (h = 1, n = \"month\", g = e += 1, e) : e;\n                }, d = (24 - e.minHour) * s, g = l, u = c(h, i, a);\n                0 === e.minHour && 1 === e.minDate ? (d = 0, g = x.monthMod(e.minMonth), n = \"month\", h = e.minDate) : 1 !== e.minDate && 0 === e.minHour && 0 === e.minMinute && (d = 0, l = e.minDate, g = l, u = c(h = l, i, a)), this.timeScaleArray.push({\n                    position: d,\n                    value: g,\n                    unit: n,\n                    year: this._getYear(a, u, 0),\n                    month: x.monthMod(u),\n                    day: h\n                });\n                for(var p = d, f = 0; f < r; f++){\n                    n = \"day\", u = c(h += 1, u, this._getYear(a, u, 0));\n                    var b = this._getYear(a, u, 0);\n                    p = 24 * s + p;\n                    var v = 1 === h ? x.monthMod(u) : h;\n                    this.timeScaleArray.push({\n                        position: p,\n                        value: v,\n                        unit: n,\n                        year: b,\n                        month: x.monthMod(u),\n                        day: v\n                    });\n                }\n            }\n        },\n        {\n            key: \"generateHourScale\",\n            value: function(t) {\n                var e = t.firstVal, i = t.currentDate, a = t.currentMonth, s = t.currentYear, r = t.minutesWidthOnXAxis, o = t.numberOfHours, n = new I(this.ctx), l = \"hour\", h = function(t, e) {\n                    return t > n.determineDaysOfMonths(e + 1, s) && (f = 1, e += 1), {\n                        month: e,\n                        date: f\n                    };\n                }, c = function(t, e) {\n                    return t > n.determineDaysOfMonths(e + 1, s) ? e += 1 : e;\n                }, d = 60 - (e.minMinute + e.minSecond / 60), g = d * r, u = e.minHour + 1, p = u;\n                60 === d && (g = 0, p = u = e.minHour);\n                var f = i;\n                p >= 24 && (p = 0, f += 1, l = \"day\");\n                var b = h(f, a).month;\n                b = c(f, b), this.timeScaleArray.push({\n                    position: g,\n                    value: u,\n                    unit: l,\n                    day: f,\n                    hour: p,\n                    year: s,\n                    month: x.monthMod(b)\n                }), p++;\n                for(var v = g, m = 0; m < o; m++){\n                    if (l = \"hour\", p >= 24) p = 0, l = \"day\", b = h(f += 1, b).month, b = c(f, b);\n                    var y = this._getYear(s, b, 0);\n                    v = 60 * r + v;\n                    var w = 0 === p ? f : p;\n                    this.timeScaleArray.push({\n                        position: v,\n                        value: w,\n                        unit: l,\n                        hour: p,\n                        day: f,\n                        year: y,\n                        month: x.monthMod(b)\n                    }), p++;\n                }\n            }\n        },\n        {\n            key: \"generateMinuteScale\",\n            value: function(t) {\n                for(var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, o = t.currentMonth, n = t.currentYear, l = t.minutesWidthOnXAxis, h = t.secondsWidthOnXAxis, c = t.numberOfMinutes, d = a + 1, g = r, u = o, p = n, f = s, b = (60 - i - e / 1e3) * h, v = 0; v < c; v++)d >= 60 && (d = 0, 24 === (f += 1) && (f = 0)), this.timeScaleArray.push({\n                    position: b,\n                    value: d,\n                    unit: \"minute\",\n                    hour: f,\n                    minute: d,\n                    day: g,\n                    year: this._getYear(p, u, 0),\n                    month: x.monthMod(u)\n                }), b += l, d++;\n            }\n        },\n        {\n            key: \"generateSecondScale\",\n            value: function(t) {\n                for(var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, o = t.currentMonth, n = t.currentYear, l = t.secondsWidthOnXAxis, h = t.numberOfSeconds, c = i + 1, d = a, g = r, u = o, p = n, f = s, b = (1e3 - e) / 1e3 * l, v = 0; v < h; v++)c >= 60 && (c = 0, ++d >= 60 && (d = 0, 24 === ++f && (f = 0))), this.timeScaleArray.push({\n                    position: b,\n                    value: c,\n                    unit: \"second\",\n                    hour: f,\n                    minute: d,\n                    second: c,\n                    day: g,\n                    year: this._getYear(p, u, 0),\n                    month: x.monthMod(u)\n                }), b += l, c++;\n            }\n        },\n        {\n            key: \"createRawDateString\",\n            value: function(t, e) {\n                var i = t.year;\n                return 0 === t.month && (t.month = 1), i += \"-\" + (\"0\" + t.month.toString()).slice(-2), \"day\" === t.unit ? i += \"day\" === t.unit ? \"-\" + (\"0\" + e).slice(-2) : \"-01\" : i += \"-\" + (\"0\" + (t.day ? t.day : \"1\")).slice(-2), \"hour\" === t.unit ? i += \"hour\" === t.unit ? \"T\" + (\"0\" + e).slice(-2) : \"T00\" : i += \"T\" + (\"0\" + (t.hour ? t.hour : \"0\")).slice(-2), \"minute\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":\" + (t.minute ? (\"0\" + t.minute).slice(-2) : \"00\"), \"second\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":00\", this.utc && (i += \".000Z\"), i;\n            }\n        },\n        {\n            key: \"formatDates\",\n            value: function(t) {\n                var e = this, i = this.w;\n                return t.map(function(t) {\n                    var a = t.value.toString(), s = new I(e.ctx), r = e.createRawDateString(t, a), o = s.getDate(s.parseDate(r));\n                    if (e.utc || (o = s.getDate(s.parseDateWithTimezone(r))), void 0 === i.config.xaxis.labels.format) {\n                        var n = \"dd MMM\", l = i.config.xaxis.labels.datetimeFormatter;\n                        \"year\" === t.unit && (n = l.year), \"month\" === t.unit && (n = l.month), \"day\" === t.unit && (n = l.day), \"hour\" === t.unit && (n = l.hour), \"minute\" === t.unit && (n = l.minute), \"second\" === t.unit && (n = l.second), a = s.formatDate(o, n);\n                    } else a = s.formatDate(o, i.config.xaxis.labels.format);\n                    return {\n                        dateString: r,\n                        position: t.position,\n                        value: a,\n                        unit: t.unit,\n                        year: t.year,\n                        month: t.month\n                    };\n                });\n            }\n        },\n        {\n            key: \"removeOverlappingTS\",\n            value: function(t) {\n                var e, i = this, a = new m(this.ctx), s = !1;\n                t.length > 0 && t[0].value && t.every(function(e) {\n                    return e.value.length === t[0].value.length;\n                }) && (s = !0, e = a.getTextRects(t[0].value).width);\n                var r = 0, o = t.map(function(o, n) {\n                    if (n > 0 && i.w.config.xaxis.labels.hideOverlappingLabels) {\n                        var l = s ? e : a.getTextRects(t[r].value).width, h = t[r].position;\n                        return o.position > h + l + 10 ? (r = n, o) : null;\n                    }\n                    return o;\n                });\n                return o = o.filter(function(t) {\n                    return null !== t;\n                });\n            }\n        },\n        {\n            key: \"_getYear\",\n            value: function(t, e, i) {\n                return t + Math.floor(e / 12) + i;\n            }\n        }\n    ]), t;\n}(), Wt = function() {\n    function t(e, i) {\n        a(this, t), this.ctx = i, this.w = i.w, this.el = e;\n    }\n    return r(t, [\n        {\n            key: \"setupElements\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config, i = e.chart.type;\n                t.axisCharts = [\n                    \"line\",\n                    \"area\",\n                    \"bar\",\n                    \"rangeBar\",\n                    \"rangeArea\",\n                    \"candlestick\",\n                    \"boxPlot\",\n                    \"scatter\",\n                    \"bubble\",\n                    \"radar\",\n                    \"heatmap\",\n                    \"treemap\"\n                ].indexOf(i) > -1, t.xyCharts = [\n                    \"line\",\n                    \"area\",\n                    \"bar\",\n                    \"rangeBar\",\n                    \"rangeArea\",\n                    \"candlestick\",\n                    \"boxPlot\",\n                    \"scatter\",\n                    \"bubble\"\n                ].indexOf(i) > -1, t.isBarHorizontal = (\"bar\" === e.chart.type || \"rangeBar\" === e.chart.type || \"boxPlot\" === e.chart.type) && e.plotOptions.bar.horizontal, t.chartClass = \".apexcharts\" + t.chartID, t.dom.baseEl = this.el, t.dom.elWrap = document.createElement(\"div\"), m.setAttrs(t.dom.elWrap, {\n                    id: t.chartClass.substring(1),\n                    class: \"apexcharts-canvas \" + t.chartClass.substring(1)\n                }), this.el.appendChild(t.dom.elWrap), t.dom.Paper = new window.SVG.Doc(t.dom.elWrap), t.dom.Paper.attr({\n                    class: \"apexcharts-svg\",\n                    \"xmlns:data\": \"ApexChartsNS\",\n                    transform: \"translate(\".concat(e.chart.offsetX, \", \").concat(e.chart.offsetY, \")\")\n                }), t.dom.Paper.node.style.background = \"dark\" !== e.theme.mode || e.chart.background ? e.chart.background : \"rgba(0, 0, 0, 0.8)\", this.setSVGDimensions(), t.dom.elLegendForeign = document.createElementNS(t.SVGNS, \"foreignObject\"), m.setAttrs(t.dom.elLegendForeign, {\n                    x: 0,\n                    y: 0,\n                    width: t.svgWidth,\n                    height: t.svgHeight\n                }), t.dom.elLegendWrap = document.createElement(\"div\"), t.dom.elLegendWrap.classList.add(\"apexcharts-legend\"), t.dom.elLegendWrap.setAttribute(\"xmlns\", \"http://www.w3.org/1999/xhtml\"), t.dom.elLegendForeign.appendChild(t.dom.elLegendWrap), t.dom.Paper.node.appendChild(t.dom.elLegendForeign), t.dom.elGraphical = t.dom.Paper.group().attr({\n                    class: \"apexcharts-inner apexcharts-graphical\"\n                }), t.dom.elDefs = t.dom.Paper.defs(), t.dom.Paper.add(t.dom.elGraphical), t.dom.elGraphical.add(t.dom.elDefs);\n            }\n        },\n        {\n            key: \"plotChartType\",\n            value: function(t, e) {\n                var i = this.w, a = i.config, s = i.globals, r = {\n                    series: [],\n                    i: []\n                }, o = {\n                    series: [],\n                    i: []\n                }, n = {\n                    series: [],\n                    i: []\n                }, l = {\n                    series: [],\n                    i: []\n                }, h = {\n                    series: [],\n                    i: []\n                }, c = {\n                    series: [],\n                    i: []\n                }, d = {\n                    series: [],\n                    i: []\n                }, g = {\n                    series: [],\n                    i: []\n                }, u = {\n                    series: [],\n                    seriesRangeEnd: [],\n                    i: []\n                };\n                s.series.map(function(e, p) {\n                    var f = 0;\n                    void 0 !== t[p].type ? (\"column\" === t[p].type || \"bar\" === t[p].type ? (s.series.length > 1 && a.plotOptions.bar.horizontal && console.warn(\"Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`\"), h.series.push(e), h.i.push(p), f++, i.globals.columnSeries = h.series) : \"area\" === t[p].type ? (o.series.push(e), o.i.push(p), f++) : \"line\" === t[p].type ? (r.series.push(e), r.i.push(p), f++) : \"scatter\" === t[p].type ? (n.series.push(e), n.i.push(p)) : \"bubble\" === t[p].type ? (l.series.push(e), l.i.push(p), f++) : \"candlestick\" === t[p].type ? (c.series.push(e), c.i.push(p), f++) : \"boxPlot\" === t[p].type ? (d.series.push(e), d.i.push(p), f++) : \"rangeBar\" === t[p].type ? (g.series.push(e), g.i.push(p), f++) : \"rangeArea\" === t[p].type ? (u.series.push(s.seriesRangeStart[p]), u.seriesRangeEnd.push(s.seriesRangeEnd[p]), u.i.push(p), f++) : console.warn(\"You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble/candlestick/boxPlot/rangeBar/rangeArea\"), f > 1 && (s.comboCharts = !0)) : (r.series.push(e), r.i.push(p));\n                });\n                var p = new Ft(this.ctx, e), f = new kt(this.ctx, e);\n                this.ctx.pie = new Lt(this.ctx);\n                var x = new It(this.ctx);\n                this.ctx.rangeBar = new Tt(this.ctx, e);\n                var b = new Pt(this.ctx), v = [];\n                if (s.comboCharts) {\n                    if (o.series.length > 0 && v.push(p.draw(o.series, \"area\", o.i)), h.series.length > 0) if (i.config.chart.stacked) {\n                        var m = new wt(this.ctx, e);\n                        v.push(m.draw(h.series, h.i));\n                    } else this.ctx.bar = new yt(this.ctx, e), v.push(this.ctx.bar.draw(h.series, h.i));\n                    if (u.series.length > 0 && v.push(p.draw(u.series, \"rangeArea\", u.i, u.seriesRangeEnd)), r.series.length > 0 && v.push(p.draw(r.series, \"line\", r.i)), c.series.length > 0 && v.push(f.draw(c.series, \"candlestick\", c.i)), d.series.length > 0 && v.push(f.draw(d.series, \"boxPlot\", d.i)), g.series.length > 0 && v.push(this.ctx.rangeBar.draw(g.series, g.i)), n.series.length > 0) {\n                        var y = new Ft(this.ctx, e, !0);\n                        v.push(y.draw(n.series, \"scatter\", n.i));\n                    }\n                    if (l.series.length > 0) {\n                        var w = new Ft(this.ctx, e, !0);\n                        v.push(w.draw(l.series, \"bubble\", l.i));\n                    }\n                } else switch(a.chart.type){\n                    case \"line\":\n                        v = p.draw(s.series, \"line\");\n                        break;\n                    case \"area\":\n                        v = p.draw(s.series, \"area\");\n                        break;\n                    case \"bar\":\n                        if (a.chart.stacked) v = new wt(this.ctx, e).draw(s.series);\n                        else this.ctx.bar = new yt(this.ctx, e), v = this.ctx.bar.draw(s.series);\n                        break;\n                    case \"candlestick\":\n                        v = new kt(this.ctx, e).draw(s.series, \"candlestick\");\n                        break;\n                    case \"boxPlot\":\n                        v = new kt(this.ctx, e).draw(s.series, a.chart.type);\n                        break;\n                    case \"rangeBar\":\n                        v = this.ctx.rangeBar.draw(s.series);\n                        break;\n                    case \"rangeArea\":\n                        v = p.draw(s.seriesRangeStart, \"rangeArea\", void 0, s.seriesRangeEnd);\n                        break;\n                    case \"heatmap\":\n                        v = new St(this.ctx, e).draw(s.series);\n                        break;\n                    case \"treemap\":\n                        v = new Dt(this.ctx, e).draw(s.series);\n                        break;\n                    case \"pie\":\n                    case \"donut\":\n                    case \"polarArea\":\n                        v = this.ctx.pie.draw(s.series);\n                        break;\n                    case \"radialBar\":\n                        v = x.draw(s.series);\n                        break;\n                    case \"radar\":\n                        v = b.draw(s.series);\n                        break;\n                    default:\n                        v = p.draw(s.series);\n                }\n                return v;\n            }\n        },\n        {\n            key: \"setSVGDimensions\",\n            value: function() {\n                var t = this.w.globals, e = this.w.config;\n                t.svgWidth = e.chart.width, t.svgHeight = e.chart.height;\n                var i = x.getDimensions(this.el), a = e.chart.width.toString().split(/[0-9]+/g).pop();\n                \"%\" === a ? x.isNumber(i[0]) && (0 === i[0].width && (i = x.getDimensions(this.el.parentNode)), t.svgWidth = i[0] * parseInt(e.chart.width, 10) / 100) : \"px\" !== a && \"\" !== a || (t.svgWidth = parseInt(e.chart.width, 10));\n                var s = e.chart.height.toString().split(/[0-9]+/g).pop();\n                if (\"auto\" !== t.svgHeight && \"\" !== t.svgHeight) if (\"%\" === s) {\n                    var r = x.getDimensions(this.el.parentNode);\n                    t.svgHeight = r[1] * parseInt(e.chart.height, 10) / 100;\n                } else t.svgHeight = parseInt(e.chart.height, 10);\n                else t.axisCharts ? t.svgHeight = t.svgWidth / 1.61 : t.svgHeight = t.svgWidth / 1.2;\n                if (t.svgWidth < 0 && (t.svgWidth = 0), t.svgHeight < 0 && (t.svgHeight = 0), m.setAttrs(t.dom.Paper.node, {\n                    width: t.svgWidth,\n                    height: t.svgHeight\n                }), \"%\" !== s) {\n                    var o = e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0;\n                    t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + o + \"px\";\n                }\n                t.dom.elWrap.style.width = t.svgWidth + \"px\", t.dom.elWrap.style.height = t.svgHeight + \"px\";\n            }\n        },\n        {\n            key: \"shiftGraphPosition\",\n            value: function() {\n                var t = this.w.globals, e = t.translateY, i = {\n                    transform: \"translate(\" + t.translateX + \", \" + e + \")\"\n                };\n                m.setAttrs(t.dom.elGraphical.node, i);\n            }\n        },\n        {\n            key: \"resizeNonAxisCharts\",\n            value: function() {\n                var t = this.w, e = t.globals, i = 0, a = t.config.chart.sparkline.enabled ? 1 : 15;\n                a += t.config.grid.padding.bottom, \"top\" !== t.config.legend.position && \"bottom\" !== t.config.legend.position || !t.config.legend.show || t.config.legend.floating || (i = new lt(this.ctx).legendHelpers.getLegendBBox().clwh + 10);\n                var s = t.globals.dom.baseEl.querySelector(\".apexcharts-radialbar, .apexcharts-pie\"), r = 2.05 * t.globals.radialSize;\n                if (s && !t.config.chart.sparkline.enabled && 0 !== t.config.plotOptions.radialBar.startAngle) {\n                    var o = x.getBoundingClientRect(s);\n                    r = o.bottom;\n                    var n = o.bottom - o.top;\n                    r = Math.max(2.05 * t.globals.radialSize, n);\n                }\n                var l = r + e.translateY + i + a;\n                e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute(\"height\", l), t.config.chart.height && String(t.config.chart.height).indexOf(\"%\") > 0 || (e.dom.elWrap.style.height = l + \"px\", m.setAttrs(e.dom.Paper.node, {\n                    height: l\n                }), e.dom.Paper.node.parentNode.parentNode.style.minHeight = l + \"px\");\n            }\n        },\n        {\n            key: \"coreCalculations\",\n            value: function() {\n                new U(this.ctx).init();\n            }\n        },\n        {\n            key: \"resetGlobals\",\n            value: function() {\n                var t = this, e = function() {\n                    return t.w.config.series.map(function(t) {\n                        return [];\n                    });\n                }, i = new Y, a = this.w.globals;\n                i.initGlobalVars(a), a.seriesXvalues = e(), a.seriesYvalues = e();\n            }\n        },\n        {\n            key: \"isMultipleY\",\n            value: function() {\n                if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = !0, !0;\n            }\n        },\n        {\n            key: \"xySettings\",\n            value: function() {\n                var t = null, e = this.w;\n                if (e.globals.axisCharts) {\n                    if (\"back\" === e.config.xaxis.crosshairs.position) new Q(this.ctx).drawXCrosshairs();\n                    if (\"back\" === e.config.yaxis[0].crosshairs.position) new Q(this.ctx).drawYCrosshairs();\n                    if (\"datetime\" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter) {\n                        this.ctx.timeScale = new Nt(this.ctx);\n                        var i = [];\n                        isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal ? i = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX) : e.globals.isBarHorizontal && (i = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);\n                    }\n                    t = new y(this.ctx).getCalculatedRatios();\n                }\n                return t;\n            }\n        },\n        {\n            key: \"updateSourceChart\",\n            value: function(t) {\n                this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({\n                    chart: {\n                        selection: {\n                            xaxis: {\n                                min: t.w.globals.minX,\n                                max: t.w.globals.maxX\n                            }\n                        }\n                    }\n                }, !1, !1);\n            }\n        },\n        {\n            key: \"setupBrushHandler\",\n            value: function() {\n                var t = this, i = this.w;\n                if (i.config.chart.brush.enabled && \"function\" != typeof i.config.chart.events.selection) {\n                    var a = Array.isArray(i.config.chart.brush.targets) ? i.config.chart.brush.targets : [\n                        i.config.chart.brush.target\n                    ];\n                    a.forEach(function(e) {\n                        var i = ApexCharts.getChartByID(e);\n                        i.w.globals.brushSource = t.ctx, \"function\" != typeof i.w.config.chart.events.zoomed && (i.w.config.chart.events.zoomed = function() {\n                            t.updateSourceChart(i);\n                        }), \"function\" != typeof i.w.config.chart.events.scrolled && (i.w.config.chart.events.scrolled = function() {\n                            t.updateSourceChart(i);\n                        });\n                    }), i.config.chart.events.selection = function(t, s) {\n                        a.forEach(function(t) {\n                            var a = ApexCharts.getChartByID(t), r = x.clone(i.config.yaxis);\n                            if (i.config.chart.brush.autoScaleYaxis && 1 === a.w.globals.series.length) {\n                                var o = new _(a);\n                                r = o.autoScaleY(a, r, s);\n                            }\n                            var n = a.w.config.yaxis.reduce(function(t, i, s) {\n                                return [].concat(u(t), [\n                                    e(e({}, a.w.config.yaxis[s]), {}, {\n                                        min: r[0].min,\n                                        max: r[0].max\n                                    })\n                                ]);\n                            }, []);\n                            a.ctx.updateHelpers._updateOptions({\n                                xaxis: {\n                                    min: s.xaxis.min,\n                                    max: s.xaxis.max\n                                },\n                                yaxis: n\n                            }, !1, !1, !1, !1);\n                        });\n                    };\n                }\n            }\n        }\n    ]), t;\n}(), Bt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"_updateOptions\",\n            value: function(t) {\n                var e = this, a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n                return new Promise(function(n) {\n                    var l = [\n                        e.ctx\n                    ];\n                    r && (l = e.ctx.getSyncedCharts()), e.ctx.w.globals.isExecCalled && (l = [\n                        e.ctx\n                    ], e.ctx.w.globals.isExecCalled = !1), l.forEach(function(r, h) {\n                        var c = r.w;\n                        if (c.globals.shouldAnimate = s, a || (c.globals.resized = !0, c.globals.dataChanged = !0, s && r.series.getPreviousPaths()), t && \"object\" === i(t) && (r.config = new E(t), t = y.extendArrayProps(r.config, t, c), r.w.globals.chartID !== e.ctx.w.globals.chartID && delete t.series, c.config = x.extend(c.config, t), o && (c.globals.lastXAxis = t.xaxis ? x.clone(t.xaxis) : [], c.globals.lastYAxis = t.yaxis ? x.clone(t.yaxis) : [], c.globals.initialConfig = x.extend({}, c.config), c.globals.initialSeries = x.clone(c.config.series), t.series))) {\n                            for(var d = 0; d < c.globals.collapsedSeriesIndices.length; d++){\n                                var g = c.config.series[c.globals.collapsedSeriesIndices[d]];\n                                c.globals.collapsedSeries[d].data = c.globals.axisCharts ? g.data.slice() : g;\n                            }\n                            for(var u = 0; u < c.globals.ancillaryCollapsedSeriesIndices.length; u++){\n                                var p = c.config.series[c.globals.ancillaryCollapsedSeriesIndices[u]];\n                                c.globals.ancillaryCollapsedSeries[u].data = c.globals.axisCharts ? p.data.slice() : p;\n                            }\n                            r.series.emptyCollapsedSeries(c.config.series);\n                        }\n                        return r.update(t).then(function() {\n                            h === l.length - 1 && n(r);\n                        });\n                    });\n                });\n            }\n        },\n        {\n            key: \"_updateSeries\",\n            value: function(t, e) {\n                var i = this, a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n                return new Promise(function(s) {\n                    var r, o = i.w;\n                    return o.globals.shouldAnimate = e, o.globals.dataChanged = !0, e && i.ctx.series.getPreviousPaths(), o.globals.axisCharts ? (0 === (r = t.map(function(t, e) {\n                        return i._extendSeries(t, e);\n                    })).length && (r = [\n                        {\n                            data: []\n                        }\n                    ]), o.config.series = r) : o.config.series = t.slice(), a && (o.globals.initialConfig.series = x.clone(o.config.series), o.globals.initialSeries = x.clone(o.config.series)), i.ctx.update().then(function() {\n                        s(i.ctx);\n                    });\n                });\n            }\n        },\n        {\n            key: \"_extendSeries\",\n            value: function(t, i) {\n                var a = this.w, s = a.config.series[i];\n                return e(e({}, a.config.series[i]), {}, {\n                    name: t.name ? t.name : null == s ? void 0 : s.name,\n                    color: t.color ? t.color : null == s ? void 0 : s.color,\n                    type: t.type ? t.type : null == s ? void 0 : s.type,\n                    group: t.group ? t.group : null == s ? void 0 : s.group,\n                    data: t.data ? t.data : null == s ? void 0 : s.data,\n                    zIndex: void 0 !== t.zIndex ? t.zIndex : i\n                });\n            }\n        },\n        {\n            key: \"toggleDataPointSelection\",\n            value: function(t, e) {\n                var i = this.w, a = null, s = \".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\");\n                return i.globals.axisCharts ? a = i.globals.dom.Paper.select(\"\".concat(s, \" path[j='\").concat(e, \"'], \").concat(s, \" circle[j='\").concat(e, \"'], \").concat(s, \" rect[j='\").concat(e, \"']\")).members[0] : void 0 === e && (a = i.globals.dom.Paper.select(\"\".concat(s, \" path[j='\").concat(t, \"']\")).members[0], \"pie\" !== i.config.chart.type && \"polarArea\" !== i.config.chart.type && \"donut\" !== i.config.chart.type || this.ctx.pie.pieClicked(t)), a ? (new m(this.ctx).pathMouseDown(a, null), a.node ? a.node : null) : (console.warn(\"toggleDataPointSelection: Element not found\"), null);\n            }\n        },\n        {\n            key: \"forceXAxisUpdate\",\n            value: function(t) {\n                var e = this.w;\n                if ([\n                    \"min\",\n                    \"max\"\n                ].forEach(function(i) {\n                    void 0 !== t.xaxis[i] && (e.config.xaxis[i] = t.xaxis[i], e.globals.lastXAxis[i] = t.xaxis[i]);\n                }), t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories), e.config.xaxis.convertedCatToNumeric) {\n                    var i = new X(t);\n                    t = i.convertCatToNumericXaxis(t, this.ctx);\n                }\n                return t;\n            }\n        },\n        {\n            key: \"forceYAxisUpdate\",\n            value: function(t) {\n                return t.chart && t.chart.stacked && \"100%\" === t.chart.stackType && (Array.isArray(t.yaxis) ? t.yaxis.forEach(function(e, i) {\n                    t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n                }) : (t.yaxis.min = 0, t.yaxis.max = 100)), t;\n            }\n        },\n        {\n            key: \"revertDefaultAxisMinMax\",\n            value: function(t) {\n                var e = this, i = this.w, a = i.globals.lastXAxis, s = i.globals.lastYAxis;\n                t && t.xaxis && (a = t.xaxis), t && t.yaxis && (s = t.yaxis), i.config.xaxis.min = a.min, i.config.xaxis.max = a.max;\n                var r = function(t) {\n                    void 0 !== s[t] && (i.config.yaxis[t].min = s[t].min, i.config.yaxis[t].max = s[t].max);\n                };\n                i.config.yaxis.map(function(t, a) {\n                    i.globals.zoomed || void 0 !== s[a] ? r(a) : void 0 !== e.ctx.opts.yaxis[a] && (t.min = e.ctx.opts.yaxis[a].min, t.max = e.ctx.opts.yaxis[a].max);\n                });\n            }\n        }\n    ]), t;\n}();\nRt =  false ? 0 : void 0, Ht = function(t, e) {\n    var a = (void 0 !== this ? this : t).SVG = function(t) {\n        if (a.supported) return t = new a.Doc(t), a.parser.draw || a.prepare(), t;\n    };\n    if (a.ns = \"http://www.w3.org/2000/svg\", a.xmlns = \"http://www.w3.org/2000/xmlns/\", a.xlink = \"http://www.w3.org/1999/xlink\", a.svgjs = \"http://svgjs.dev\", a.supported = !0, !a.supported) return !1;\n    a.did = 1e3, a.eid = function(t) {\n        return \"Svgjs\" + d(t) + a.did++;\n    }, a.create = function(t) {\n        var i = e.createElementNS(this.ns, t);\n        return i.setAttribute(\"id\", this.eid(t)), i;\n    }, a.extend = function() {\n        var t, e;\n        e = (t = [].slice.call(arguments)).pop();\n        for(var i = t.length - 1; i >= 0; i--)if (t[i]) for(var s in e)t[i].prototype[s] = e[s];\n        a.Set && a.Set.inherit && a.Set.inherit();\n    }, a.invent = function(t) {\n        var e = \"function\" == typeof t.create ? t.create : function() {\n            this.constructor.call(this, a.create(t.create));\n        };\n        return t.inherit && (e.prototype = new t.inherit), t.extend && a.extend(e, t.extend), t.construct && a.extend(t.parent || a.Container, t.construct), e;\n    }, a.adopt = function(e) {\n        return e ? e.instance ? e.instance : ((i = \"svg\" == e.nodeName ? e.parentNode instanceof t.SVGElement ? new a.Nested : new a.Doc : \"linearGradient\" == e.nodeName ? new a.Gradient(\"linear\") : \"radialGradient\" == e.nodeName ? new a.Gradient(\"radial\") : a[d(e.nodeName)] ? new a[d(e.nodeName)] : new a.Element(e)).type = e.nodeName, i.node = e, e.instance = i, i instanceof a.Doc && i.namespace().defs(), i.setData(JSON.parse(e.getAttribute(\"svgjs:data\")) || {}), i) : null;\n        var i;\n    }, a.prepare = function() {\n        var t = e.getElementsByTagName(\"body\")[0], i = (t ? new a.Doc(t) : a.adopt(e.documentElement).nested()).size(2, 0);\n        a.parser = {\n            body: t || e.documentElement,\n            draw: i.style(\"opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden\").node,\n            poly: i.polyline().node,\n            path: i.path().node,\n            native: a.create(\"svg\")\n        };\n    }, a.parser = {\n        native: a.create(\"svg\")\n    }, e.addEventListener(\"DOMContentLoaded\", function() {\n        a.parser.draw || a.prepare();\n    }, !1), a.regex = {\n        numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n        hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n        rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n        reference: /#([a-z0-9\\-_]+)/i,\n        transforms: /\\)\\s*,?\\s*/,\n        whitespace: /\\s/g,\n        isHex: /^#[a-f0-9]{3,6}$/i,\n        isRgb: /^rgb\\(/,\n        isCss: /[^:]+:[^;]+;?/,\n        isBlank: /^(\\s+)?$/,\n        isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        isPercent: /^-?[\\d\\.]+%$/,\n        isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n        delimiter: /[\\s,]+/,\n        hyphen: /([^e])\\-/gi,\n        pathLetters: /[MLHVCSQTAZ]/gi,\n        isPathLetter: /[MLHVCSQTAZ]/i,\n        numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n        dots: /\\./g\n    }, a.utils = {\n        map: function(t, e) {\n            for(var i = t.length, a = [], s = 0; s < i; s++)a.push(e(t[s]));\n            return a;\n        },\n        filter: function(t, e) {\n            for(var i = t.length, a = [], s = 0; s < i; s++)e(t[s]) && a.push(t[s]);\n            return a;\n        },\n        filterSVGElements: function(e) {\n            return this.filter(e, function(e) {\n                return e instanceof t.SVGElement;\n            });\n        }\n    }, a.defaults = {\n        attrs: {\n            \"fill-opacity\": 1,\n            \"stroke-opacity\": 1,\n            \"stroke-width\": 0,\n            \"stroke-linejoin\": \"miter\",\n            \"stroke-linecap\": \"butt\",\n            fill: \"#000000\",\n            stroke: \"#000000\",\n            opacity: 1,\n            x: 0,\n            y: 0,\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0,\n            r: 0,\n            rx: 0,\n            ry: 0,\n            offset: 0,\n            \"stop-opacity\": 1,\n            \"stop-color\": \"#000000\",\n            \"font-size\": 16,\n            \"font-family\": \"Helvetica, Arial, sans-serif\",\n            \"text-anchor\": \"start\"\n        }\n    }, a.Color = function(t) {\n        var e, s;\n        this.r = 0, this.g = 0, this.b = 0, t && (\"string\" == typeof t ? a.regex.isRgb.test(t) ? (e = a.regex.rgb.exec(t.replace(a.regex.whitespace, \"\")), this.r = parseInt(e[1]), this.g = parseInt(e[2]), this.b = parseInt(e[3])) : a.regex.isHex.test(t) && (e = a.regex.hex.exec(4 == (s = t).length ? [\n            \"#\",\n            s.substring(1, 2),\n            s.substring(1, 2),\n            s.substring(2, 3),\n            s.substring(2, 3),\n            s.substring(3, 4),\n            s.substring(3, 4)\n        ].join(\"\") : s), this.r = parseInt(e[1], 16), this.g = parseInt(e[2], 16), this.b = parseInt(e[3], 16)) : \"object\" === i(t) && (this.r = t.r, this.g = t.g, this.b = t.b));\n    }, a.extend(a.Color, {\n        toString: function() {\n            return this.toHex();\n        },\n        toHex: function() {\n            return \"#\" + g(this.r) + g(this.g) + g(this.b);\n        },\n        toRgb: function() {\n            return \"rgb(\" + [\n                this.r,\n                this.g,\n                this.b\n            ].join() + \")\";\n        },\n        brightness: function() {\n            return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;\n        },\n        morph: function(t) {\n            return this.destination = new a.Color(t), this;\n        },\n        at: function(t) {\n            return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new a.Color({\n                r: ~~(this.r + (this.destination.r - this.r) * t),\n                g: ~~(this.g + (this.destination.g - this.g) * t),\n                b: ~~(this.b + (this.destination.b - this.b) * t)\n            })) : this;\n        }\n    }), a.Color.test = function(t) {\n        return t += \"\", a.regex.isHex.test(t) || a.regex.isRgb.test(t);\n    }, a.Color.isRgb = function(t) {\n        return t && \"number\" == typeof t.r && \"number\" == typeof t.g && \"number\" == typeof t.b;\n    }, a.Color.isColor = function(t) {\n        return a.Color.isRgb(t) || a.Color.test(t);\n    }, a.Array = function(t, e) {\n        0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t);\n    }, a.extend(a.Array, {\n        toString: function() {\n            return this.value.join(\" \");\n        },\n        valueOf: function() {\n            return this.value;\n        },\n        parse: function(t) {\n            return t = t.valueOf(), Array.isArray(t) ? t : this.split(t);\n        }\n    }), a.PointArray = function(t, e) {\n        a.Array.call(this, t, e || [\n            [\n                0,\n                0\n            ]\n        ]);\n    }, a.PointArray.prototype = new a.Array, a.PointArray.prototype.constructor = a.PointArray;\n    for(var s = {\n        M: function(t, e, i) {\n            return e.x = i.x = t[0], e.y = i.y = t[1], [\n                \"M\",\n                e.x,\n                e.y\n            ];\n        },\n        L: function(t, e) {\n            return e.x = t[0], e.y = t[1], [\n                \"L\",\n                t[0],\n                t[1]\n            ];\n        },\n        H: function(t, e) {\n            return e.x = t[0], [\n                \"H\",\n                t[0]\n            ];\n        },\n        V: function(t, e) {\n            return e.y = t[0], [\n                \"V\",\n                t[0]\n            ];\n        },\n        C: function(t, e) {\n            return e.x = t[4], e.y = t[5], [\n                \"C\",\n                t[0],\n                t[1],\n                t[2],\n                t[3],\n                t[4],\n                t[5]\n            ];\n        },\n        Q: function(t, e) {\n            return e.x = t[2], e.y = t[3], [\n                \"Q\",\n                t[0],\n                t[1],\n                t[2],\n                t[3]\n            ];\n        },\n        S: function(t, e) {\n            return e.x = t[2], e.y = t[3], [\n                \"S\",\n                t[0],\n                t[1],\n                t[2],\n                t[3]\n            ];\n        },\n        Z: function(t, e, i) {\n            return e.x = i.x, e.y = i.y, [\n                \"Z\"\n            ];\n        }\n    }, r = \"mlhvqtcsaz\".split(\"\"), o = 0, n = r.length; o < n; ++o)s[r[o]] = function(t) {\n        return function(e, i, a) {\n            if (\"H\" == t) e[0] = e[0] + i.x;\n            else if (\"V\" == t) e[0] = e[0] + i.y;\n            else if (\"A\" == t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;\n            else for(var r = 0, o = e.length; r < o; ++r)e[r] = e[r] + (r % 2 ? i.y : i.x);\n            if (s && \"function\" == typeof s[t]) return s[t](e, i, a);\n        };\n    }(r[o].toUpperCase());\n    a.PathArray = function(t, e) {\n        a.Array.call(this, t, e || [\n            [\n                \"M\",\n                0,\n                0\n            ]\n        ]);\n    }, a.PathArray.prototype = new a.Array, a.PathArray.prototype.constructor = a.PathArray, a.extend(a.PathArray, {\n        toString: function() {\n            return function(t) {\n                for(var e = 0, i = t.length, a = \"\"; e < i; e++)a += t[e][0], null != t[e][1] && (a += t[e][1], null != t[e][2] && (a += \" \", a += t[e][2], null != t[e][3] && (a += \" \", a += t[e][3], a += \" \", a += t[e][4], null != t[e][5] && (a += \" \", a += t[e][5], a += \" \", a += t[e][6], null != t[e][7] && (a += \" \", a += t[e][7])))));\n                return a + \" \";\n            }(this.value);\n        },\n        move: function(t, e) {\n            var i = this.bbox();\n            return i.x, i.y, this;\n        },\n        at: function(t) {\n            if (!this.destination) return this;\n            for(var e = this.value, i = this.destination.value, s = [], r = new a.PathArray, o = 0, n = e.length; o < n; o++){\n                s[o] = [\n                    e[o][0]\n                ];\n                for(var l = 1, h = e[o].length; l < h; l++)s[o][l] = e[o][l] + (i[o][l] - e[o][l]) * t;\n                \"A\" === s[o][0] && (s[o][4] = +(0 != s[o][4]), s[o][5] = +(0 != s[o][5]));\n            }\n            return r.value = s, r;\n        },\n        parse: function(t) {\n            if (t instanceof a.PathArray) return t.valueOf();\n            var e, i = {\n                M: 2,\n                L: 2,\n                H: 1,\n                V: 1,\n                C: 6,\n                S: 4,\n                Q: 4,\n                T: 2,\n                A: 7,\n                Z: 0\n            };\n            t = \"string\" == typeof t ? t.replace(a.regex.numbersWithDots, h).replace(a.regex.pathLetters, \" $& \").replace(a.regex.hyphen, \"$1 -\").trim().split(a.regex.delimiter) : t.reduce(function(t, e) {\n                return [].concat.call(t, e);\n            }, []);\n            var r = [], o = new a.Point, n = new a.Point, l = 0, c = t.length;\n            do {\n                a.regex.isPathLetter.test(t[l]) ? (e = t[l], ++l) : \"M\" == e ? e = \"L\" : \"m\" == e && (e = \"l\"), r.push(s[e].call(null, t.slice(l, l += i[e.toUpperCase()]).map(parseFloat), o, n));\n            }while (c > l);\n            return r;\n        },\n        bbox: function() {\n            return a.parser.draw || a.prepare(), a.parser.path.setAttribute(\"d\", this.toString()), a.parser.path.getBBox();\n        }\n    }), a.Number = a.invent({\n        create: function(t, e) {\n            this.value = 0, this.unit = e || \"\", \"number\" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -34e37 : 34e37 : \"string\" == typeof t ? (e = t.match(a.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), \"%\" == e[5] ? this.value /= 100 : \"s\" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof a.Number && (this.value = t.valueOf(), this.unit = t.unit);\n        },\n        extend: {\n            toString: function() {\n                return (\"%\" == this.unit ? ~~(1e8 * this.value) / 1e6 : \"s\" == this.unit ? this.value / 1e3 : this.value) + this.unit;\n            },\n            toJSON: function() {\n                return this.toString();\n            },\n            valueOf: function() {\n                return this.value;\n            },\n            plus: function(t) {\n                return t = new a.Number(t), new a.Number(this + t, this.unit || t.unit);\n            },\n            minus: function(t) {\n                return t = new a.Number(t), new a.Number(this - t, this.unit || t.unit);\n            },\n            times: function(t) {\n                return t = new a.Number(t), new a.Number(this * t, this.unit || t.unit);\n            },\n            divide: function(t) {\n                return t = new a.Number(t), new a.Number(this / t, this.unit || t.unit);\n            },\n            to: function(t) {\n                var e = new a.Number(this);\n                return \"string\" == typeof t && (e.unit = t), e;\n            },\n            morph: function(t) {\n                return this.destination = new a.Number(t), t.relative && (this.destination.value += this.value), this;\n            },\n            at: function(t) {\n                return this.destination ? new a.Number(this.destination).minus(this).times(t).plus(this) : this;\n            }\n        }\n    }), a.Element = a.invent({\n        create: function(t) {\n            this._stroke = a.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute(\"stroke\") || this._stroke);\n        },\n        extend: {\n            x: function(t) {\n                return this.attr(\"x\", t);\n            },\n            y: function(t) {\n                return this.attr(\"y\", t);\n            },\n            cx: function(t) {\n                return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);\n            },\n            cy: function(t) {\n                return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);\n            },\n            move: function(t, e) {\n                return this.x(t).y(e);\n            },\n            center: function(t, e) {\n                return this.cx(t).cy(e);\n            },\n            width: function(t) {\n                return this.attr(\"width\", t);\n            },\n            height: function(t) {\n                return this.attr(\"height\", t);\n            },\n            size: function(t, e) {\n                var i = u(this, t, e);\n                return this.width(new a.Number(i.width)).height(new a.Number(i.height));\n            },\n            clone: function(t) {\n                this.writeDataToDom();\n                var e = x(this.node.cloneNode(!0));\n                return t ? t.add(e) : this.after(e), e;\n            },\n            remove: function() {\n                return this.parent() && this.parent().removeElement(this), this;\n            },\n            replace: function(t) {\n                return this.after(t).remove(), t;\n            },\n            addTo: function(t) {\n                return t.put(this);\n            },\n            putIn: function(t) {\n                return t.add(this);\n            },\n            id: function(t) {\n                return this.attr(\"id\", t);\n            },\n            show: function() {\n                return this.style(\"display\", \"\");\n            },\n            hide: function() {\n                return this.style(\"display\", \"none\");\n            },\n            visible: function() {\n                return \"none\" != this.style(\"display\");\n            },\n            toString: function() {\n                return this.attr(\"id\");\n            },\n            classes: function() {\n                var t = this.attr(\"class\");\n                return null == t ? [] : t.trim().split(a.regex.delimiter);\n            },\n            hasClass: function(t) {\n                return -1 != this.classes().indexOf(t);\n            },\n            addClass: function(t) {\n                if (!this.hasClass(t)) {\n                    var e = this.classes();\n                    e.push(t), this.attr(\"class\", e.join(\" \"));\n                }\n                return this;\n            },\n            removeClass: function(t) {\n                return this.hasClass(t) && this.attr(\"class\", this.classes().filter(function(e) {\n                    return e != t;\n                }).join(\" \")), this;\n            },\n            toggleClass: function(t) {\n                return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);\n            },\n            reference: function(t) {\n                return a.get(this.attr(t));\n            },\n            parent: function(e) {\n                var i = this;\n                if (!i.node.parentNode) return null;\n                if (i = a.adopt(i.node.parentNode), !e) return i;\n                for(; i && i.node instanceof t.SVGElement;){\n                    if (\"string\" == typeof e ? i.matches(e) : i instanceof e) return i;\n                    if (!i.node.parentNode || \"#document\" == i.node.parentNode.nodeName) return null;\n                    i = a.adopt(i.node.parentNode);\n                }\n            },\n            doc: function() {\n                return this instanceof a.Doc ? this : this.parent(a.Doc);\n            },\n            parents: function(t) {\n                var e = [], i = this;\n                do {\n                    if (!(i = i.parent(t)) || !i.node) break;\n                    e.push(i);\n                }while (i.parent);\n                return e;\n            },\n            matches: function(t) {\n                return function(t, e) {\n                    return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e);\n                }(this.node, t);\n            },\n            native: function() {\n                return this.node;\n            },\n            svg: function(t) {\n                var i = e.createElement(\"svg\");\n                if (!(t && this instanceof a.Parent)) return i.appendChild(t = e.createElement(\"svg\")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), i.innerHTML.replace(/^<svg>/, \"\").replace(/<\\/svg>$/, \"\");\n                i.innerHTML = \"<svg>\" + t.replace(/\\n/, \"\").replace(/<([\\w:-]+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n                for(var s = 0, r = i.firstChild.childNodes.length; s < r; s++)this.node.appendChild(i.firstChild.firstChild);\n                return this;\n            },\n            writeDataToDom: function() {\n                return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {\n                    this.writeDataToDom();\n                }), this.node.removeAttribute(\"svgjs:data\"), Object.keys(this.dom).length && this.node.setAttribute(\"svgjs:data\", JSON.stringify(this.dom)), this;\n            },\n            setData: function(t) {\n                return this.dom = t, this;\n            },\n            is: function(t) {\n                return function(t, e) {\n                    return t instanceof e;\n                }(this, t);\n            }\n        }\n    }), a.easing = {\n        \"-\": function(t) {\n            return t;\n        },\n        \"<>\": function(t) {\n            return -Math.cos(t * Math.PI) / 2 + .5;\n        },\n        \">\": function(t) {\n            return Math.sin(t * Math.PI / 2);\n        },\n        \"<\": function(t) {\n            return 1 - Math.cos(t * Math.PI / 2);\n        }\n    }, a.morph = function(t) {\n        return function(e, i) {\n            return new a.MorphObj(e, i).at(t);\n        };\n    }, a.Situation = a.invent({\n        create: function(t) {\n            this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new a.Number(t.duration).valueOf(), this.delay = new a.Number(t.delay).valueOf(), this.start = +new Date + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};\n        }\n    }), a.FX = a.invent({\n        create: function(t) {\n            this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;\n        },\n        extend: {\n            animate: function(t, e, s) {\n                \"object\" === i(t) && (e = t.ease, s = t.delay, t = t.duration);\n                var r = new a.Situation({\n                    duration: t || 1e3,\n                    delay: s || 0,\n                    ease: a.easing[e || \"-\"] || e\n                });\n                return this.queue(r), this;\n            },\n            target: function(t) {\n                return t && t instanceof a.Element ? (this._target = t, this) : this._target;\n            },\n            timeToAbsPos: function(t) {\n                return (t - this.situation.start) / (this.situation.duration / this._speed);\n            },\n            absPosToTime: function(t) {\n                return this.situation.duration / this._speed * t + this.situation.start;\n            },\n            startAnimFrame: function() {\n                this.stopAnimFrame(), this.animationFrame = t.requestAnimationFrame((function() {\n                    this.step();\n                }).bind(this));\n            },\n            stopAnimFrame: function() {\n                t.cancelAnimationFrame(this.animationFrame);\n            },\n            start: function() {\n                return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;\n            },\n            startCurrent: function() {\n                return this.situation.start = +new Date + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();\n            },\n            queue: function(t) {\n                return (\"function\" == typeof t || t instanceof a.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this;\n            },\n            dequeue: function() {\n                return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a.Situation ? this.start() : this.situation.call(this)), this;\n            },\n            initAnimations: function() {\n                var t, e = this.situation;\n                if (e.init) return this;\n                for(var i in e.animations){\n                    t = this.target()[i](), Array.isArray(t) || (t = [\n                        t\n                    ]), Array.isArray(e.animations[i]) || (e.animations[i] = [\n                        e.animations[i]\n                    ]);\n                    for(var s = t.length; s--;)e.animations[i][s] instanceof a.Number && (t[s] = new a.Number(t[s])), e.animations[i][s] = t[s].morph(e.animations[i][s]);\n                }\n                for(var i in e.attrs)e.attrs[i] = new a.MorphObj(this.target().attr(i), e.attrs[i]);\n                for(var i in e.styles)e.styles[i] = new a.MorphObj(this.target().style(i), e.styles[i]);\n                return e.initialTransformation = this.target().matrixify(), e.init = !0, this;\n            },\n            clearQueue: function() {\n                return this.situations = [], this;\n            },\n            clearCurrent: function() {\n                return this.situation = null, this;\n            },\n            stop: function(t, e) {\n                var i = this.active;\n                return this.active = !1, e && this.clearQueue(), t && this.situation && (!i && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();\n            },\n            after: function(t) {\n                var e = this.last();\n                return this.target().on(\"finished.fx\", function i(a) {\n                    a.detail.situation == e && (t.call(this, e), this.off(\"finished.fx\", i));\n                }), this._callStart();\n            },\n            during: function(t) {\n                var e = this.last(), i = function(i) {\n                    i.detail.situation == e && t.call(this, i.detail.pos, a.morph(i.detail.pos), i.detail.eased, e);\n                };\n                return this.target().off(\"during.fx\", i).on(\"during.fx\", i), this.after(function() {\n                    this.off(\"during.fx\", i);\n                }), this._callStart();\n            },\n            afterAll: function(t) {\n                var e = function e(i) {\n                    t.call(this), this.off(\"allfinished.fx\", e);\n                };\n                return this.target().off(\"allfinished.fx\", e).on(\"allfinished.fx\", e), this._callStart();\n            },\n            last: function() {\n                return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n            },\n            add: function(t, e, i) {\n                return this.last()[i || \"animations\"][t] = e, this._callStart();\n            },\n            step: function(t) {\n                var e, i, a;\n                t || (this.absPos = this.timeToAbsPos(+new Date)), !1 !== this.situation.loops ? (e = Math.max(this.absPos, 0), i = Math.floor(e), !0 === this.situation.loops || i < this.situation.loops ? (this.pos = e - i, a = this.situation.loop, this.situation.loop = i) : (this.absPos = this.situation.loops, this.pos = 1, a = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);\n                var s = this.situation.ease(this.pos);\n                for(var r in this.situation.once)r > this.lastPos && r <= s && (this.situation.once[r].call(this.target(), this.pos, s), delete this.situation.once[r]);\n                return this.active && this.target().fire(\"during\", {\n                    pos: this.pos,\n                    eased: s,\n                    fx: this,\n                    situation: this.situation\n                }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire(\"finished\", {\n                    fx: this,\n                    situation: this.situation\n                }), this.situations.length || (this.target().fire(\"allfinished\"), this.situations.length || (this.target().off(\".fx\"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s, this) : this;\n            },\n            eachAt: function() {\n                var t, e = this, i = this.target(), s = this.situation;\n                for(var r in s.animations)t = [].concat(s.animations[r]).map(function(t) {\n                    return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n                }), i[r].apply(i, t);\n                for(var r in s.attrs)t = [\n                    r\n                ].concat(s.attrs[r]).map(function(t) {\n                    return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n                }), i.attr.apply(i, t);\n                for(var r in s.styles)t = [\n                    r\n                ].concat(s.styles[r]).map(function(t) {\n                    return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n                }), i.style.apply(i, t);\n                if (s.transforms.length) {\n                    t = s.initialTransformation, r = 0;\n                    for(var o = s.transforms.length; r < o; r++){\n                        var n = s.transforms[r];\n                        n instanceof a.Matrix ? t = n.relative ? t.multiply((new a.Matrix).morph(n).at(s.ease(this.pos))) : t.morph(n).at(s.ease(this.pos)) : (n.relative || n.undo(t.extract()), t = t.multiply(n.at(s.ease(this.pos))));\n                    }\n                    i.matrix(t);\n                }\n                return this;\n            },\n            once: function(t, e, i) {\n                var a = this.last();\n                return i || (t = a.ease(t)), a.once[t] = e, this;\n            },\n            _callStart: function() {\n                return setTimeout((function() {\n                    this.start();\n                }).bind(this), 0), this;\n            }\n        },\n        parent: a.Element,\n        construct: {\n            animate: function(t, e, i) {\n                return (this.fx || (this.fx = new a.FX(this))).animate(t, e, i);\n            },\n            delay: function(t) {\n                return (this.fx || (this.fx = new a.FX(this))).delay(t);\n            },\n            stop: function(t, e) {\n                return this.fx && this.fx.stop(t, e), this;\n            },\n            finish: function() {\n                return this.fx && this.fx.finish(), this;\n            }\n        }\n    }), a.MorphObj = a.invent({\n        create: function(t, e) {\n            return a.Color.isColor(e) ? new a.Color(t).morph(e) : a.regex.delimiter.test(t) ? a.regex.pathLetters.test(t) ? new a.PathArray(t).morph(e) : new a.Array(t).morph(e) : a.regex.numberAndUnit.test(e) ? new a.Number(t).morph(e) : (this.value = t, void (this.destination = e));\n        },\n        extend: {\n            at: function(t, e) {\n                return e < 1 ? this.value : this.destination;\n            },\n            valueOf: function() {\n                return this.value;\n            }\n        }\n    }), a.extend(a.FX, {\n        attr: function(t, e, a) {\n            if (\"object\" === i(t)) for(var s in t)this.attr(s, t[s]);\n            else this.add(t, e, \"attrs\");\n            return this;\n        },\n        plot: function(t, e, i, a) {\n            return 4 == arguments.length ? this.plot([\n                t,\n                e,\n                i,\n                a\n            ]) : this.add(\"plot\", new (this.target()).morphArray(t));\n        }\n    }), a.Box = a.invent({\n        create: function(t, e, s, r) {\n            if (!(\"object\" !== i(t) || t instanceof a.Element)) return a.Box.call(this, null != t.left ? t.left : t.x, null != t.top ? t.top : t.y, t.width, t.height);\n            var o;\n            4 == arguments.length && (this.x = t, this.y = e, this.width = s, this.height = r), null == (o = this).x && (o.x = 0, o.y = 0, o.width = 0, o.height = 0), o.w = o.width, o.h = o.height, o.x2 = o.x + o.width, o.y2 = o.y + o.height, o.cx = o.x + o.width / 2, o.cy = o.y + o.height / 2;\n        }\n    }), a.BBox = a.invent({\n        create: function(t) {\n            if (a.Box.apply(this, [].slice.call(arguments)), t instanceof a.Element) {\n                var i;\n                try {\n                    if (!e.documentElement.contains) {\n                        for(var s = t.node; s.parentNode;)s = s.parentNode;\n                        if (s != e) throw new Error(\"Element not in the dom\");\n                    }\n                    i = t.node.getBBox();\n                } catch (e) {\n                    if (t instanceof a.Shape) {\n                        a.parser.draw || a.prepare();\n                        var r = t.clone(a.parser.draw.instance).show();\n                        r && r.node && \"function\" == typeof r.node.getBBox && (i = r.node.getBBox()), r && \"function\" == typeof r.remove && r.remove();\n                    } else i = {\n                        x: t.node.clientLeft,\n                        y: t.node.clientTop,\n                        width: t.node.clientWidth,\n                        height: t.node.clientHeight\n                    };\n                }\n                a.Box.call(this, i);\n            }\n        },\n        inherit: a.Box,\n        parent: a.Element,\n        construct: {\n            bbox: function() {\n                return new a.BBox(this);\n            }\n        }\n    }), a.BBox.prototype.constructor = a.BBox, a.Matrix = a.invent({\n        create: function(t) {\n            var e = f([\n                1,\n                0,\n                0,\n                1,\n                0,\n                0\n            ]);\n            t = null === t ? e : t instanceof a.Element ? t.matrixify() : \"string\" == typeof t ? f(t.split(a.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f([].slice.call(arguments)) : Array.isArray(t) ? f(t) : t && \"object\" === i(t) ? t : e;\n            for(var s = v.length - 1; s >= 0; --s)this[v[s]] = null != t[v[s]] ? t[v[s]] : e[v[s]];\n        },\n        extend: {\n            extract: function() {\n                var t = p(this, 0, 1);\n                p(this, 1, 0);\n                var e = 180 / Math.PI * Math.atan2(t.y, t.x) - 90;\n                return {\n                    x: this.e,\n                    y: this.f,\n                    transformedX: (this.e * Math.cos(e * Math.PI / 180) + this.f * Math.sin(e * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n                    transformedY: (this.f * Math.cos(e * Math.PI / 180) + this.e * Math.sin(-e * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n                    rotation: e,\n                    a: this.a,\n                    b: this.b,\n                    c: this.c,\n                    d: this.d,\n                    e: this.e,\n                    f: this.f,\n                    matrix: new a.Matrix(this)\n                };\n            },\n            clone: function() {\n                return new a.Matrix(this);\n            },\n            morph: function(t) {\n                return this.destination = new a.Matrix(t), this;\n            },\n            multiply: function(t) {\n                return new a.Matrix(this.native().multiply((function(t) {\n                    return t instanceof a.Matrix || (t = new a.Matrix(t)), t;\n                })(t).native()));\n            },\n            inverse: function() {\n                return new a.Matrix(this.native().inverse());\n            },\n            translate: function(t, e) {\n                return new a.Matrix(this.native().translate(t || 0, e || 0));\n            },\n            native: function() {\n                for(var t = a.parser.native.createSVGMatrix(), e = v.length - 1; e >= 0; e--)t[v[e]] = this[v[e]];\n                return t;\n            },\n            toString: function() {\n                return \"matrix(\" + b(this.a) + \",\" + b(this.b) + \",\" + b(this.c) + \",\" + b(this.d) + \",\" + b(this.e) + \",\" + b(this.f) + \")\";\n            }\n        },\n        parent: a.Element,\n        construct: {\n            ctm: function() {\n                return new a.Matrix(this.node.getCTM());\n            },\n            screenCTM: function() {\n                if (this instanceof a.Nested) {\n                    var t = this.rect(1, 1), e = t.node.getScreenCTM();\n                    return t.remove(), new a.Matrix(e);\n                }\n                return new a.Matrix(this.node.getScreenCTM());\n            }\n        }\n    }), a.Point = a.invent({\n        create: function(t, e) {\n            var a;\n            a = Array.isArray(t) ? {\n                x: t[0],\n                y: t[1]\n            } : \"object\" === i(t) ? {\n                x: t.x,\n                y: t.y\n            } : null != t ? {\n                x: t,\n                y: null != e ? e : t\n            } : {\n                x: 0,\n                y: 0\n            }, this.x = a.x, this.y = a.y;\n        },\n        extend: {\n            clone: function() {\n                return new a.Point(this);\n            },\n            morph: function(t, e) {\n                return this.destination = new a.Point(t, e), this;\n            }\n        }\n    }), a.extend(a.Element, {\n        point: function(t, e) {\n            return new a.Point(t, e).transform(this.screenCTM().inverse());\n        }\n    }), a.extend(a.Element, {\n        attr: function(t, e, s) {\n            if (null == t) {\n                for(t = {}, s = (e = this.node.attributes).length - 1; s >= 0; s--)t[e[s].nodeName] = a.regex.isNumber.test(e[s].nodeValue) ? parseFloat(e[s].nodeValue) : e[s].nodeValue;\n                return t;\n            }\n            if (\"object\" === i(t)) for(var r in t)this.attr(r, t[r]);\n            else if (null === e) this.node.removeAttribute(t);\n            else {\n                if (null == e) return null == (e = this.node.getAttribute(t)) ? a.defaults.attrs[t] : a.regex.isNumber.test(e) ? parseFloat(e) : e;\n                \"stroke-width\" == t ? this.attr(\"stroke\", parseFloat(e) > 0 ? this._stroke : null) : \"stroke\" == t && (this._stroke = e), \"fill\" != t && \"stroke\" != t || (a.regex.isImage.test(e) && (e = this.doc().defs().image(e, 0, 0)), e instanceof a.Image && (e = this.doc().defs().pattern(0, 0, function() {\n                    this.add(e);\n                }))), \"number\" == typeof e ? e = new a.Number(e) : a.Color.isColor(e) ? e = new a.Color(e) : Array.isArray(e) && (e = new a.Array(e)), \"leading\" == t ? this.leading && this.leading(e) : \"string\" == typeof s ? this.node.setAttributeNS(s, t, e.toString()) : this.node.setAttribute(t, e.toString()), !this.rebuild || \"font-size\" != t && \"x\" != t || this.rebuild(t, e);\n            }\n            return this;\n        }\n    }), a.extend(a.Element, {\n        transform: function(t, e) {\n            var s;\n            return \"object\" !== i(t) ? (s = new a.Matrix(this).extract(), \"string\" == typeof t ? s[t] : s) : (s = new a.Matrix(this), e = !!e || !!t.relative, null != t.a && (s = e ? s.multiply(new a.Matrix(t)) : new a.Matrix(t)), this.attr(\"transform\", s));\n        }\n    }), a.extend(a.Element, {\n        untransform: function() {\n            return this.attr(\"transform\", null);\n        },\n        matrixify: function() {\n            return (this.attr(\"transform\") || \"\").split(a.regex.transforms).slice(0, -1).map(function(t) {\n                var e = t.trim().split(\"(\");\n                return [\n                    e[0],\n                    e[1].split(a.regex.delimiter).map(function(t) {\n                        return parseFloat(t);\n                    })\n                ];\n            }).reduce(function(t, e) {\n                return \"matrix\" == e[0] ? t.multiply(f(e[1])) : t[e[0]].apply(t, e[1]);\n            }, new a.Matrix);\n        },\n        toParent: function(t) {\n            if (this == t) return this;\n            var e = this.screenCTM(), i = t.screenCTM().inverse();\n            return this.addTo(t).untransform().transform(i.multiply(e)), this;\n        },\n        toDoc: function() {\n            return this.toParent(this.doc());\n        }\n    }), a.Transformation = a.invent({\n        create: function(t, e) {\n            if (arguments.length > 1 && \"boolean\" != typeof e) return this.constructor.call(this, [].slice.call(arguments));\n            if (Array.isArray(t)) for(var a = 0, s = this.arguments.length; a < s; ++a)this[this.arguments[a]] = t[a];\n            else if (t && \"object\" === i(t)) for(a = 0, s = this.arguments.length; a < s; ++a)this[this.arguments[a]] = t[this.arguments[a]];\n            this.inversed = !1, !0 === e && (this.inversed = !0);\n        }\n    }), a.Translate = a.invent({\n        parent: a.Matrix,\n        inherit: a.Transformation,\n        create: function(t, e) {\n            this.constructor.apply(this, [].slice.call(arguments));\n        },\n        extend: {\n            arguments: [\n                \"transformedX\",\n                \"transformedY\"\n            ],\n            method: \"translate\"\n        }\n    }), a.extend(a.Element, {\n        style: function(t, e) {\n            if (0 == arguments.length) return this.node.style.cssText || \"\";\n            if (arguments.length < 2) if (\"object\" === i(t)) for(var s in t)this.style(s, t[s]);\n            else {\n                if (!a.regex.isCss.test(t)) return this.node.style[c(t)];\n                for(t = t.split(/\\s*;\\s*/).filter(function(t) {\n                    return !!t;\n                }).map(function(t) {\n                    return t.split(/\\s*:\\s*/);\n                }); e = t.pop();)this.style(e[0], e[1]);\n            }\n            else this.node.style[c(t)] = null === e || a.regex.isBlank.test(e) ? \"\" : e;\n            return this;\n        }\n    }), a.Parent = a.invent({\n        create: function(t) {\n            this.constructor.call(this, t);\n        },\n        inherit: a.Element,\n        extend: {\n            children: function() {\n                return a.utils.map(a.utils.filterSVGElements(this.node.childNodes), function(t) {\n                    return a.adopt(t);\n                });\n            },\n            add: function(t, e) {\n                return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;\n            },\n            put: function(t, e) {\n                return this.add(t, e), t;\n            },\n            has: function(t) {\n                return this.index(t) >= 0;\n            },\n            index: function(t) {\n                return [].slice.call(this.node.childNodes).indexOf(t.node);\n            },\n            get: function(t) {\n                return a.adopt(this.node.childNodes[t]);\n            },\n            first: function() {\n                return this.get(0);\n            },\n            last: function() {\n                return this.get(this.node.childNodes.length - 1);\n            },\n            each: function(t, e) {\n                for(var i = this.children(), s = 0, r = i.length; s < r; s++)i[s] instanceof a.Element && t.apply(i[s], [\n                    s,\n                    i\n                ]), e && i[s] instanceof a.Container && i[s].each(t, e);\n                return this;\n            },\n            removeElement: function(t) {\n                return this.node.removeChild(t.node), this;\n            },\n            clear: function() {\n                for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);\n                return delete this._defs, this;\n            },\n            defs: function() {\n                return this.doc().defs();\n            }\n        }\n    }), a.extend(a.Parent, {\n        ungroup: function(t, e) {\n            return 0 === e || this instanceof a.Defs || this.node == a.parser.draw || (t = t || (this instanceof a.Doc ? this : this.parent(a.Parent)), e = e || 1 / 0, this.each(function() {\n                return this instanceof a.Defs ? this : this instanceof a.Parent ? this.ungroup(t, e - 1) : this.toParent(t);\n            }), this.node.firstChild || this.remove()), this;\n        },\n        flatten: function(t, e) {\n            return this.ungroup(t, e);\n        }\n    }), a.Container = a.invent({\n        create: function(t) {\n            this.constructor.call(this, t);\n        },\n        inherit: a.Parent\n    }), a.ViewBox = a.invent({\n        parent: a.Container,\n        construct: {}\n    }), [\n        \"click\",\n        \"dblclick\",\n        \"mousedown\",\n        \"mouseup\",\n        \"mouseover\",\n        \"mouseout\",\n        \"mousemove\",\n        \"touchstart\",\n        \"touchmove\",\n        \"touchleave\",\n        \"touchend\",\n        \"touchcancel\"\n    ].forEach(function(t) {\n        a.Element.prototype[t] = function(e) {\n            return a.on(this.node, t, e), this;\n        };\n    }), a.listeners = [], a.handlerMap = [], a.listenerId = 0, a.on = function(t, e, i, s, r) {\n        var o = i.bind(s || t.instance || t), n = (a.handlerMap.indexOf(t) + 1 || a.handlerMap.push(t)) - 1, l = e.split(\".\")[0], h = e.split(\".\")[1] || \"*\";\n        a.listeners[n] = a.listeners[n] || {}, a.listeners[n][l] = a.listeners[n][l] || {}, a.listeners[n][l][h] = a.listeners[n][l][h] || {}, i._svgjsListenerId || (i._svgjsListenerId = ++a.listenerId), a.listeners[n][l][h][i._svgjsListenerId] = o, t.addEventListener(l, o, r || {\n            passive: !0\n        });\n    }, a.off = function(t, e, i) {\n        var s = a.handlerMap.indexOf(t), r = e && e.split(\".\")[0], o = e && e.split(\".\")[1], n = \"\";\n        if (-1 != s) if (i) {\n            if (\"function\" == typeof i && (i = i._svgjsListenerId), !i) return;\n            a.listeners[s][r] && a.listeners[s][r][o || \"*\"] && (t.removeEventListener(r, a.listeners[s][r][o || \"*\"][i], !1), delete a.listeners[s][r][o || \"*\"][i]);\n        } else if (o && r) {\n            if (a.listeners[s][r] && a.listeners[s][r][o]) {\n                for(var l in a.listeners[s][r][o])a.off(t, [\n                    r,\n                    o\n                ].join(\".\"), l);\n                delete a.listeners[s][r][o];\n            }\n        } else if (o) for(var h in a.listeners[s])for(var n in a.listeners[s][h])o === n && a.off(t, [\n            h,\n            o\n        ].join(\".\"));\n        else if (r) {\n            if (a.listeners[s][r]) {\n                for(var n in a.listeners[s][r])a.off(t, [\n                    r,\n                    n\n                ].join(\".\"));\n                delete a.listeners[s][r];\n            }\n        } else {\n            for(var h in a.listeners[s])a.off(t, h);\n            delete a.listeners[s], delete a.handlerMap[s];\n        }\n    }, a.extend(a.Element, {\n        on: function(t, e, i, s) {\n            return a.on(this.node, t, e, i, s), this;\n        },\n        off: function(t, e) {\n            return a.off(this.node, t, e), this;\n        },\n        fire: function(e, i) {\n            return e instanceof t.Event ? this.node.dispatchEvent(e) : this.node.dispatchEvent(e = new a.CustomEvent(e, {\n                detail: i,\n                cancelable: !0\n            })), this._event = e, this;\n        },\n        event: function() {\n            return this._event;\n        }\n    }), a.Defs = a.invent({\n        create: \"defs\",\n        inherit: a.Container\n    }), a.G = a.invent({\n        create: \"g\",\n        inherit: a.Container,\n        extend: {\n            x: function(t) {\n                return null == t ? this.transform(\"x\") : this.transform({\n                    x: t - this.x()\n                }, !0);\n            }\n        },\n        construct: {\n            group: function() {\n                return this.put(new a.G);\n            }\n        }\n    }), a.Doc = a.invent({\n        create: function(t) {\n            t && (\"svg\" == (t = \"string\" == typeof t ? e.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, a.create(\"svg\")), t.appendChild(this.node), this.size(\"100%\", \"100%\")), this.namespace().defs());\n        },\n        inherit: a.Container,\n        extend: {\n            namespace: function() {\n                return this.attr({\n                    xmlns: a.ns,\n                    version: \"1.1\"\n                }).attr(\"xmlns:xlink\", a.xlink, a.xmlns).attr(\"xmlns:svgjs\", a.svgjs, a.xmlns);\n            },\n            defs: function() {\n                var t;\n                return this._defs || ((t = this.node.getElementsByTagName(\"defs\")[0]) ? this._defs = a.adopt(t) : this._defs = new a.Defs, this.node.appendChild(this._defs.node)), this._defs;\n            },\n            parent: function() {\n                return this.node.parentNode && \"#document\" != this.node.parentNode.nodeName ? this.node.parentNode : null;\n            },\n            remove: function() {\n                return this.parent() && this.parent().removeChild(this.node), this;\n            },\n            clear: function() {\n                for(; this.node.hasChildNodes();)this.node.removeChild(this.node.lastChild);\n                return delete this._defs, a.parser.draw && !a.parser.draw.parentNode && this.node.appendChild(a.parser.draw), this;\n            },\n            clone: function(t) {\n                this.writeDataToDom();\n                var e = this.node, i = x(e.cloneNode(!0));\n                return t ? (t.node || t).appendChild(i.node) : e.parentNode.insertBefore(i.node, e.nextSibling), i;\n            }\n        }\n    }), a.extend(a.Element, {}), a.Gradient = a.invent({\n        create: function(t) {\n            this.constructor.call(this, a.create(t + \"Gradient\")), this.type = t;\n        },\n        inherit: a.Container,\n        extend: {\n            at: function(t, e, i) {\n                return this.put(new a.Stop).update(t, e, i);\n            },\n            update: function(t) {\n                return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n            },\n            fill: function() {\n                return \"url(#\" + this.id() + \")\";\n            },\n            toString: function() {\n                return this.fill();\n            },\n            attr: function(t, e, i) {\n                return \"transform\" == t && (t = \"gradientTransform\"), a.Container.prototype.attr.call(this, t, e, i);\n            }\n        },\n        construct: {\n            gradient: function(t, e) {\n                return this.defs().gradient(t, e);\n            }\n        }\n    }), a.extend(a.Gradient, a.FX, {\n        from: function(t, e) {\n            return \"radial\" == (this._target || this).type ? this.attr({\n                fx: new a.Number(t),\n                fy: new a.Number(e)\n            }) : this.attr({\n                x1: new a.Number(t),\n                y1: new a.Number(e)\n            });\n        },\n        to: function(t, e) {\n            return \"radial\" == (this._target || this).type ? this.attr({\n                cx: new a.Number(t),\n                cy: new a.Number(e)\n            }) : this.attr({\n                x2: new a.Number(t),\n                y2: new a.Number(e)\n            });\n        }\n    }), a.extend(a.Defs, {\n        gradient: function(t, e) {\n            return this.put(new a.Gradient(t)).update(e);\n        }\n    }), a.Stop = a.invent({\n        create: \"stop\",\n        inherit: a.Element,\n        extend: {\n            update: function(t) {\n                return (\"number\" == typeof t || t instanceof a.Number) && (t = {\n                    offset: arguments[0],\n                    color: arguments[1],\n                    opacity: arguments[2]\n                }), null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", new a.Number(t.offset)), this;\n            }\n        }\n    }), a.Pattern = a.invent({\n        create: \"pattern\",\n        inherit: a.Container,\n        extend: {\n            fill: function() {\n                return \"url(#\" + this.id() + \")\";\n            },\n            update: function(t) {\n                return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n            },\n            toString: function() {\n                return this.fill();\n            },\n            attr: function(t, e, i) {\n                return \"transform\" == t && (t = \"patternTransform\"), a.Container.prototype.attr.call(this, t, e, i);\n            }\n        },\n        construct: {\n            pattern: function(t, e, i) {\n                return this.defs().pattern(t, e, i);\n            }\n        }\n    }), a.extend(a.Defs, {\n        pattern: function(t, e, i) {\n            return this.put(new a.Pattern).update(i).attr({\n                x: 0,\n                y: 0,\n                width: t,\n                height: e,\n                patternUnits: \"userSpaceOnUse\"\n            });\n        }\n    }), a.Shape = a.invent({\n        create: function(t) {\n            this.constructor.call(this, t);\n        },\n        inherit: a.Element\n    }), a.Symbol = a.invent({\n        create: \"symbol\",\n        inherit: a.Container,\n        construct: {\n            symbol: function() {\n                return this.put(new a.Symbol);\n            }\n        }\n    }), a.Use = a.invent({\n        create: \"use\",\n        inherit: a.Shape,\n        extend: {\n            element: function(t, e) {\n                return this.attr(\"href\", (e || \"\") + \"#\" + t, a.xlink);\n            }\n        },\n        construct: {\n            use: function(t, e) {\n                return this.put(new a.Use).element(t, e);\n            }\n        }\n    }), a.Rect = a.invent({\n        create: \"rect\",\n        inherit: a.Shape,\n        construct: {\n            rect: function(t, e) {\n                return this.put(new a.Rect).size(t, e);\n            }\n        }\n    }), a.Circle = a.invent({\n        create: \"circle\",\n        inherit: a.Shape,\n        construct: {\n            circle: function(t) {\n                return this.put(new a.Circle).rx(new a.Number(t).divide(2)).move(0, 0);\n            }\n        }\n    }), a.extend(a.Circle, a.FX, {\n        rx: function(t) {\n            return this.attr(\"r\", t);\n        },\n        ry: function(t) {\n            return this.rx(t);\n        }\n    }), a.Ellipse = a.invent({\n        create: \"ellipse\",\n        inherit: a.Shape,\n        construct: {\n            ellipse: function(t, e) {\n                return this.put(new a.Ellipse).size(t, e).move(0, 0);\n            }\n        }\n    }), a.extend(a.Ellipse, a.Rect, a.FX, {\n        rx: function(t) {\n            return this.attr(\"rx\", t);\n        },\n        ry: function(t) {\n            return this.attr(\"ry\", t);\n        }\n    }), a.extend(a.Circle, a.Ellipse, {\n        x: function(t) {\n            return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());\n        },\n        y: function(t) {\n            return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());\n        },\n        cx: function(t) {\n            return null == t ? this.attr(\"cx\") : this.attr(\"cx\", t);\n        },\n        cy: function(t) {\n            return null == t ? this.attr(\"cy\") : this.attr(\"cy\", t);\n        },\n        width: function(t) {\n            return null == t ? 2 * this.rx() : this.rx(new a.Number(t).divide(2));\n        },\n        height: function(t) {\n            return null == t ? 2 * this.ry() : this.ry(new a.Number(t).divide(2));\n        },\n        size: function(t, e) {\n            var i = u(this, t, e);\n            return this.rx(new a.Number(i.width).divide(2)).ry(new a.Number(i.height).divide(2));\n        }\n    }), a.Line = a.invent({\n        create: \"line\",\n        inherit: a.Shape,\n        extend: {\n            array: function() {\n                return new a.PointArray([\n                    [\n                        this.attr(\"x1\"),\n                        this.attr(\"y1\")\n                    ],\n                    [\n                        this.attr(\"x2\"),\n                        this.attr(\"y2\")\n                    ]\n                ]);\n            },\n            plot: function(t, e, i, s) {\n                return null == t ? this.array() : (t = void 0 !== e ? {\n                    x1: t,\n                    y1: e,\n                    x2: i,\n                    y2: s\n                } : new a.PointArray(t).toLine(), this.attr(t));\n            },\n            move: function(t, e) {\n                return this.attr(this.array().move(t, e).toLine());\n            },\n            size: function(t, e) {\n                var i = u(this, t, e);\n                return this.attr(this.array().size(i.width, i.height).toLine());\n            }\n        },\n        construct: {\n            line: function(t, e, i, s) {\n                return a.Line.prototype.plot.apply(this.put(new a.Line), null != t ? [\n                    t,\n                    e,\n                    i,\n                    s\n                ] : [\n                    0,\n                    0,\n                    0,\n                    0\n                ]);\n            }\n        }\n    }), a.Polyline = a.invent({\n        create: \"polyline\",\n        inherit: a.Shape,\n        construct: {\n            polyline: function(t) {\n                return this.put(new a.Polyline).plot(t || new a.PointArray);\n            }\n        }\n    }), a.Polygon = a.invent({\n        create: \"polygon\",\n        inherit: a.Shape,\n        construct: {\n            polygon: function(t) {\n                return this.put(new a.Polygon).plot(t || new a.PointArray);\n            }\n        }\n    }), a.extend(a.Polyline, a.Polygon, {\n        array: function() {\n            return this._array || (this._array = new a.PointArray(this.attr(\"points\")));\n        },\n        plot: function(t) {\n            return null == t ? this.array() : this.clear().attr(\"points\", \"string\" == typeof t ? t : this._array = new a.PointArray(t));\n        },\n        clear: function() {\n            return delete this._array, this;\n        },\n        move: function(t, e) {\n            return this.attr(\"points\", this.array().move(t, e));\n        },\n        size: function(t, e) {\n            var i = u(this, t, e);\n            return this.attr(\"points\", this.array().size(i.width, i.height));\n        }\n    }), a.extend(a.Line, a.Polyline, a.Polygon, {\n        morphArray: a.PointArray,\n        x: function(t) {\n            return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n        },\n        y: function(t) {\n            return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n        },\n        width: function(t) {\n            var e = this.bbox();\n            return null == t ? e.width : this.size(t, e.height);\n        },\n        height: function(t) {\n            var e = this.bbox();\n            return null == t ? e.height : this.size(e.width, t);\n        }\n    }), a.Path = a.invent({\n        create: \"path\",\n        inherit: a.Shape,\n        extend: {\n            morphArray: a.PathArray,\n            array: function() {\n                return this._array || (this._array = new a.PathArray(this.attr(\"d\")));\n            },\n            plot: function(t) {\n                return null == t ? this.array() : this.clear().attr(\"d\", \"string\" == typeof t ? t : this._array = new a.PathArray(t));\n            },\n            clear: function() {\n                return delete this._array, this;\n            }\n        },\n        construct: {\n            path: function(t) {\n                return this.put(new a.Path).plot(t || new a.PathArray);\n            }\n        }\n    }), a.Image = a.invent({\n        create: \"image\",\n        inherit: a.Shape,\n        extend: {\n            load: function(e) {\n                if (!e) return this;\n                var i = this, s = new t.Image;\n                return a.on(s, \"load\", function() {\n                    a.off(s);\n                    var t = i.parent(a.Pattern);\n                    null !== t && (0 == i.width() && 0 == i.height() && i.size(s.width, s.height), t && 0 == t.width() && 0 == t.height() && t.size(i.width(), i.height()), \"function\" == typeof i._loaded && i._loaded.call(i, {\n                        width: s.width,\n                        height: s.height,\n                        ratio: s.width / s.height,\n                        url: e\n                    }));\n                }), a.on(s, \"error\", function(t) {\n                    a.off(s), \"function\" == typeof i._error && i._error.call(i, t);\n                }), this.attr(\"href\", s.src = this.src = e, a.xlink);\n            },\n            loaded: function(t) {\n                return this._loaded = t, this;\n            },\n            error: function(t) {\n                return this._error = t, this;\n            }\n        },\n        construct: {\n            image: function(t, e, i) {\n                return this.put(new a.Image).load(t).size(e || 0, i || e || 0);\n            }\n        }\n    }), a.Text = a.invent({\n        create: function() {\n            this.constructor.call(this, a.create(\"text\")), this.dom.leading = new a.Number(1.3), this._rebuild = !0, this._build = !1, this.attr(\"font-family\", a.defaults.attrs[\"font-family\"]);\n        },\n        inherit: a.Shape,\n        extend: {\n            x: function(t) {\n                return null == t ? this.attr(\"x\") : this.attr(\"x\", t);\n            },\n            text: function(t) {\n                if (void 0 === t) {\n                    t = \"\";\n                    for(var e = this.node.childNodes, i = 0, s = e.length; i < s; ++i)0 != i && 3 != e[i].nodeType && 1 == a.adopt(e[i]).dom.newLined && (t += \"\\n\"), t += e[i].textContent;\n                    return t;\n                }\n                if (this.clear().build(!0), \"function\" == typeof t) t.call(this, this);\n                else {\n                    i = 0;\n                    for(var r = (t = t.split(\"\\n\")).length; i < r; i++)this.tspan(t[i]).newLine();\n                }\n                return this.build(!1).rebuild();\n            },\n            size: function(t) {\n                return this.attr(\"font-size\", t).rebuild();\n            },\n            leading: function(t) {\n                return null == t ? this.dom.leading : (this.dom.leading = new a.Number(t), this.rebuild());\n            },\n            lines: function() {\n                var t = (this.textPath && this.textPath() || this).node, e = a.utils.map(a.utils.filterSVGElements(t.childNodes), function(t) {\n                    return a.adopt(t);\n                });\n                return new a.Set(e);\n            },\n            rebuild: function(t) {\n                if (\"boolean\" == typeof t && (this._rebuild = t), this._rebuild) {\n                    var e = this, i = 0, s = this.dom.leading * new a.Number(this.attr(\"font-size\"));\n                    this.lines().each(function() {\n                        this.dom.newLined && (e.textPath() || this.attr(\"x\", e.attr(\"x\")), \"\\n\" == this.text() ? i += s : (this.attr(\"dy\", s + i), i = 0));\n                    }), this.fire(\"rebuild\");\n                }\n                return this;\n            },\n            build: function(t) {\n                return this._build = !!t, this;\n            },\n            setData: function(t) {\n                return this.dom = t, this.dom.leading = new a.Number(t.leading || 1.3), this;\n            }\n        },\n        construct: {\n            text: function(t) {\n                return this.put(new a.Text).text(t);\n            },\n            plain: function(t) {\n                return this.put(new a.Text).plain(t);\n            }\n        }\n    }), a.Tspan = a.invent({\n        create: \"tspan\",\n        inherit: a.Shape,\n        extend: {\n            text: function(t) {\n                return null == t ? this.node.textContent + (this.dom.newLined ? \"\\n\" : \"\") : (\"function\" == typeof t ? t.call(this, this) : this.plain(t), this);\n            },\n            dx: function(t) {\n                return this.attr(\"dx\", t);\n            },\n            dy: function(t) {\n                return this.attr(\"dy\", t);\n            },\n            newLine: function() {\n                var t = this.parent(a.Text);\n                return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr(\"font-size\")).attr(\"x\", t.x());\n            }\n        }\n    }), a.extend(a.Text, a.Tspan, {\n        plain: function(t) {\n            return !1 === this._build && this.clear(), this.node.appendChild(e.createTextNode(t)), this;\n        },\n        tspan: function(t) {\n            var e = (this.textPath && this.textPath() || this).node, i = new a.Tspan;\n            return !1 === this._build && this.clear(), e.appendChild(i.node), i.text(t);\n        },\n        clear: function() {\n            for(var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();)t.removeChild(t.lastChild);\n            return this;\n        },\n        length: function() {\n            return this.node.getComputedTextLength();\n        }\n    }), a.TextPath = a.invent({\n        create: \"textPath\",\n        inherit: a.Parent,\n        parent: a.Text,\n        construct: {\n            morphArray: a.PathArray,\n            array: function() {\n                var t = this.track();\n                return t ? t.array() : null;\n            },\n            plot: function(t) {\n                var e = this.track(), i = null;\n                return e && (i = e.plot(t)), null == t ? i : this;\n            },\n            track: function() {\n                var t = this.textPath();\n                if (t) return t.reference(\"href\");\n            },\n            textPath: function() {\n                if (this.node.firstChild && \"textPath\" == this.node.firstChild.nodeName) return a.adopt(this.node.firstChild);\n            }\n        }\n    }), a.Nested = a.invent({\n        create: function() {\n            this.constructor.call(this, a.create(\"svg\")), this.style(\"overflow\", \"visible\");\n        },\n        inherit: a.Container,\n        construct: {\n            nested: function() {\n                return this.put(new a.Nested);\n            }\n        }\n    });\n    var l = {\n        stroke: [\n            \"color\",\n            \"width\",\n            \"opacity\",\n            \"linecap\",\n            \"linejoin\",\n            \"miterlimit\",\n            \"dasharray\",\n            \"dashoffset\"\n        ],\n        fill: [\n            \"color\",\n            \"opacity\",\n            \"rule\"\n        ],\n        prefix: function(t, e) {\n            return \"color\" == e ? t : t + \"-\" + e;\n        }\n    };\n    function h(t, e, i, s) {\n        return i + s.replace(a.regex.dots, \" .\");\n    }\n    function c(t) {\n        return t.toLowerCase().replace(/-(.)/g, function(t, e) {\n            return e.toUpperCase();\n        });\n    }\n    function d(t) {\n        return t.charAt(0).toUpperCase() + t.slice(1);\n    }\n    function g(t) {\n        var e = t.toString(16);\n        return 1 == e.length ? \"0\" + e : e;\n    }\n    function u(t, e, i) {\n        if (null == e || null == i) {\n            var a = t.bbox();\n            null == e ? e = a.width / a.height * i : null == i && (i = a.height / a.width * e);\n        }\n        return {\n            width: e,\n            height: i\n        };\n    }\n    function p(t, e, i) {\n        return {\n            x: e * t.a + i * t.c + 0,\n            y: e * t.b + i * t.d + 0\n        };\n    }\n    function f(t) {\n        return {\n            a: t[0],\n            b: t[1],\n            c: t[2],\n            d: t[3],\n            e: t[4],\n            f: t[5]\n        };\n    }\n    function x(e) {\n        for(var i = e.childNodes.length - 1; i >= 0; i--)e.childNodes[i] instanceof t.SVGElement && x(e.childNodes[i]);\n        return a.adopt(e).id(a.eid(e.nodeName));\n    }\n    function b(t) {\n        return Math.abs(t) > 1e-37 ? t : 0;\n    }\n    [\n        \"fill\",\n        \"stroke\"\n    ].forEach(function(t) {\n        var e = {};\n        e[t] = function(e) {\n            if (void 0 === e) return this;\n            if (\"string\" == typeof e || a.Color.isRgb(e) || e && \"function\" == typeof e.fill) this.attr(t, e);\n            else for(var i = l[t].length - 1; i >= 0; i--)null != e[l[t][i]] && this.attr(l.prefix(t, l[t][i]), e[l[t][i]]);\n            return this;\n        }, a.extend(a.Element, a.FX, e);\n    }), a.extend(a.Element, a.FX, {\n        translate: function(t, e) {\n            return this.transform({\n                x: t,\n                y: e\n            });\n        },\n        matrix: function(t) {\n            return this.attr(\"transform\", new a.Matrix(6 == arguments.length ? [].slice.call(arguments) : t));\n        },\n        opacity: function(t) {\n            return this.attr(\"opacity\", t);\n        },\n        dx: function(t) {\n            return this.x(new a.Number(t).plus(this instanceof a.FX ? 0 : this.x()), !0);\n        },\n        dy: function(t) {\n            return this.y(new a.Number(t).plus(this instanceof a.FX ? 0 : this.y()), !0);\n        }\n    }), a.extend(a.Path, {\n        length: function() {\n            return this.node.getTotalLength();\n        },\n        pointAt: function(t) {\n            return this.node.getPointAtLength(t);\n        }\n    }), a.Set = a.invent({\n        create: function(t) {\n            Array.isArray(t) ? this.members = t : this.clear();\n        },\n        extend: {\n            add: function() {\n                for(var t = [].slice.call(arguments), e = 0, i = t.length; e < i; e++)this.members.push(t[e]);\n                return this;\n            },\n            remove: function(t) {\n                var e = this.index(t);\n                return e > -1 && this.members.splice(e, 1), this;\n            },\n            each: function(t) {\n                for(var e = 0, i = this.members.length; e < i; e++)t.apply(this.members[e], [\n                    e,\n                    this.members\n                ]);\n                return this;\n            },\n            clear: function() {\n                return this.members = [], this;\n            },\n            length: function() {\n                return this.members.length;\n            },\n            has: function(t) {\n                return this.index(t) >= 0;\n            },\n            index: function(t) {\n                return this.members.indexOf(t);\n            },\n            get: function(t) {\n                return this.members[t];\n            },\n            first: function() {\n                return this.get(0);\n            },\n            last: function() {\n                return this.get(this.members.length - 1);\n            },\n            valueOf: function() {\n                return this.members;\n            }\n        },\n        construct: {\n            set: function(t) {\n                return new a.Set(t);\n            }\n        }\n    }), a.FX.Set = a.invent({\n        create: function(t) {\n            this.set = t;\n        }\n    }), a.Set.inherit = function() {\n        var t = [];\n        for(var e in a.Shape.prototype)\"function\" == typeof a.Shape.prototype[e] && \"function\" != typeof a.Set.prototype[e] && t.push(e);\n        for(var e in t.forEach(function(t) {\n            a.Set.prototype[t] = function() {\n                for(var e = 0, i = this.members.length; e < i; e++)this.members[e] && \"function\" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);\n                return \"animate\" == t ? this.fx || (this.fx = new a.FX.Set(this)) : this;\n            };\n        }), t = [], a.FX.prototype)\"function\" == typeof a.FX.prototype[e] && \"function\" != typeof a.FX.Set.prototype[e] && t.push(e);\n        t.forEach(function(t) {\n            a.FX.Set.prototype[t] = function() {\n                for(var e = 0, i = this.set.members.length; e < i; e++)this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);\n                return this;\n            };\n        });\n    }, a.extend(a.Element, {}), a.extend(a.Element, {\n        remember: function(t, e) {\n            if (\"object\" === i(arguments[0])) for(var a in t)this.remember(a, t[a]);\n            else {\n                if (1 == arguments.length) return this.memory()[t];\n                this.memory()[t] = e;\n            }\n            return this;\n        },\n        forget: function() {\n            if (0 == arguments.length) this._memory = {};\n            else for(var t = arguments.length - 1; t >= 0; t--)delete this.memory()[arguments[t]];\n            return this;\n        },\n        memory: function() {\n            return this._memory || (this._memory = {});\n        }\n    }), a.get = function(t) {\n        var i = e.getElementById(function(t) {\n            var e = (t || \"\").toString().match(a.regex.reference);\n            if (e) return e[1];\n        }(t) || t);\n        return a.adopt(i);\n    }, a.select = function(t, i) {\n        return new a.Set(a.utils.map((i || e).querySelectorAll(t), function(t) {\n            return a.adopt(t);\n        }));\n    }, a.extend(a.Parent, {\n        select: function(t) {\n            return a.select(t, this.node);\n        }\n    });\n    var v = \"abcdef\".split(\"\");\n    if (\"function\" != typeof t.CustomEvent) {\n        var m = function(t, i) {\n            i = i || {\n                bubbles: !1,\n                cancelable: !1,\n                detail: void 0\n            };\n            var a = e.createEvent(\"CustomEvent\");\n            return a.initCustomEvent(t, i.bubbles, i.cancelable, i.detail), a;\n        };\n        m.prototype = t.Event.prototype, a.CustomEvent = m;\n    } else a.CustomEvent = t.CustomEvent;\n    return a;\n},  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n    return Ht(Rt, Rt.document);\n}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0, /*! svg.filter.js - v2.0.2 - 2016-02-24\n* https://github.com/wout/svg.filter.js\n* Copyright (c) 2016 Wout Fierens; Licensed MIT */ (function() {\n    SVG.Filter = SVG.invent({\n        create: \"filter\",\n        inherit: SVG.Parent,\n        extend: {\n            source: \"SourceGraphic\",\n            sourceAlpha: \"SourceAlpha\",\n            background: \"BackgroundImage\",\n            backgroundAlpha: \"BackgroundAlpha\",\n            fill: \"FillPaint\",\n            stroke: \"StrokePaint\",\n            autoSetIn: !0,\n            put: function(t, e) {\n                return this.add(t, e), !t.attr(\"in\") && this.autoSetIn && t.attr(\"in\", this.source), t.attr(\"result\") || t.attr(\"result\", t), t;\n            },\n            blend: function(t, e, i) {\n                return this.put(new SVG.BlendEffect(t, e, i));\n            },\n            colorMatrix: function(t, e) {\n                return this.put(new SVG.ColorMatrixEffect(t, e));\n            },\n            convolveMatrix: function(t) {\n                return this.put(new SVG.ConvolveMatrixEffect(t));\n            },\n            componentTransfer: function(t) {\n                return this.put(new SVG.ComponentTransferEffect(t));\n            },\n            composite: function(t, e, i) {\n                return this.put(new SVG.CompositeEffect(t, e, i));\n            },\n            flood: function(t, e) {\n                return this.put(new SVG.FloodEffect(t, e));\n            },\n            offset: function(t, e) {\n                return this.put(new SVG.OffsetEffect(t, e));\n            },\n            image: function(t) {\n                return this.put(new SVG.ImageEffect(t));\n            },\n            merge: function() {\n                var t = [\n                    void 0\n                ];\n                for(var e in arguments)t.push(arguments[e]);\n                return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t)));\n            },\n            gaussianBlur: function(t, e) {\n                return this.put(new SVG.GaussianBlurEffect(t, e));\n            },\n            morphology: function(t, e) {\n                return this.put(new SVG.MorphologyEffect(t, e));\n            },\n            diffuseLighting: function(t, e, i) {\n                return this.put(new SVG.DiffuseLightingEffect(t, e, i));\n            },\n            displacementMap: function(t, e, i, a, s) {\n                return this.put(new SVG.DisplacementMapEffect(t, e, i, a, s));\n            },\n            specularLighting: function(t, e, i, a) {\n                return this.put(new SVG.SpecularLightingEffect(t, e, i, a));\n            },\n            tile: function() {\n                return this.put(new SVG.TileEffect);\n            },\n            turbulence: function(t, e, i, a, s) {\n                return this.put(new SVG.TurbulenceEffect(t, e, i, a, s));\n            },\n            toString: function() {\n                return \"url(#\" + this.attr(\"id\") + \")\";\n            }\n        }\n    }), SVG.extend(SVG.Defs, {\n        filter: function(t) {\n            var e = this.put(new SVG.Filter);\n            return \"function\" == typeof t && t.call(e, e), e;\n        }\n    }), SVG.extend(SVG.Container, {\n        filter: function(t) {\n            return this.defs().filter(t);\n        }\n    }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {\n        filter: function(t) {\n            return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr(\"filter\", this.filterer), this.filterer;\n        },\n        unfilter: function(t) {\n            return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr(\"filter\", null);\n        }\n    }), SVG.Effect = SVG.invent({\n        create: function() {\n            this.constructor.call(this);\n        },\n        inherit: SVG.Element,\n        extend: {\n            in: function(t) {\n                return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n            },\n            result: function(t) {\n                return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n            },\n            toString: function() {\n                return this.result();\n            }\n        }\n    }), SVG.ParentEffect = SVG.invent({\n        create: function() {\n            this.constructor.call(this);\n        },\n        inherit: SVG.Parent,\n        extend: {\n            in: function(t) {\n                return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n            },\n            result: function(t) {\n                return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n            },\n            toString: function() {\n                return this.result();\n            }\n        }\n    });\n    var t = {\n        blend: function(t, e) {\n            return this.parent() && this.parent().blend(this, t, e);\n        },\n        colorMatrix: function(t, e) {\n            return this.parent() && this.parent().colorMatrix(t, e).in(this);\n        },\n        convolveMatrix: function(t) {\n            return this.parent() && this.parent().convolveMatrix(t).in(this);\n        },\n        componentTransfer: function(t) {\n            return this.parent() && this.parent().componentTransfer(t).in(this);\n        },\n        composite: function(t, e) {\n            return this.parent() && this.parent().composite(this, t, e);\n        },\n        flood: function(t, e) {\n            return this.parent() && this.parent().flood(t, e);\n        },\n        offset: function(t, e) {\n            return this.parent() && this.parent().offset(t, e).in(this);\n        },\n        image: function(t) {\n            return this.parent() && this.parent().image(t);\n        },\n        merge: function() {\n            return this.parent() && this.parent().merge.apply(this.parent(), [\n                this\n            ].concat(arguments));\n        },\n        gaussianBlur: function(t, e) {\n            return this.parent() && this.parent().gaussianBlur(t, e).in(this);\n        },\n        morphology: function(t, e) {\n            return this.parent() && this.parent().morphology(t, e).in(this);\n        },\n        diffuseLighting: function(t, e, i) {\n            return this.parent() && this.parent().diffuseLighting(t, e, i).in(this);\n        },\n        displacementMap: function(t, e, i, a) {\n            return this.parent() && this.parent().displacementMap(this, t, e, i, a);\n        },\n        specularLighting: function(t, e, i, a) {\n            return this.parent() && this.parent().specularLighting(t, e, i, a).in(this);\n        },\n        tile: function() {\n            return this.parent() && this.parent().tile().in(this);\n        },\n        turbulence: function(t, e, i, a, s) {\n            return this.parent() && this.parent().turbulence(t, e, i, a, s).in(this);\n        }\n    };\n    SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({\n        create: function() {\n            this.constructor.call(this);\n        },\n        inherit: SVG.Element,\n        extend: {\n            in: function(t) {\n                this.attr(\"in\", t);\n            }\n        }\n    });\n    var e = {\n        blend: function(t, e, i) {\n            this.attr({\n                in: t,\n                in2: e,\n                mode: i || \"normal\"\n            });\n        },\n        colorMatrix: function(t, e) {\n            \"matrix\" == t && (e = s(e)), this.attr({\n                type: t,\n                values: void 0 === e ? null : e\n            });\n        },\n        convolveMatrix: function(t) {\n            t = s(t), this.attr({\n                order: Math.sqrt(t.split(\" \").length),\n                kernelMatrix: t\n            });\n        },\n        composite: function(t, e, i) {\n            this.attr({\n                in: t,\n                in2: e,\n                operator: i\n            });\n        },\n        flood: function(t, e) {\n            this.attr(\"flood-color\", t), null != e && this.attr(\"flood-opacity\", e);\n        },\n        offset: function(t, e) {\n            this.attr({\n                dx: t,\n                dy: e\n            });\n        },\n        image: function(t) {\n            this.attr(\"href\", t, SVG.xlink);\n        },\n        displacementMap: function(t, e, i, a, s) {\n            this.attr({\n                in: t,\n                in2: e,\n                scale: i,\n                xChannelSelector: a,\n                yChannelSelector: s\n            });\n        },\n        gaussianBlur: function(t, e) {\n            null != t || null != e ? this.attr(\"stdDeviation\", function(t) {\n                if (!Array.isArray(t)) return t;\n                for(var e = 0, i = t.length, a = []; e < i; e++)a.push(t[e]);\n                return a.join(\" \");\n            }(Array.prototype.slice.call(arguments))) : this.attr(\"stdDeviation\", \"0 0\");\n        },\n        morphology: function(t, e) {\n            this.attr({\n                operator: t,\n                radius: e\n            });\n        },\n        tile: function() {},\n        turbulence: function(t, e, i, a, s) {\n            this.attr({\n                numOctaves: e,\n                seed: i,\n                stitchTiles: a,\n                baseFrequency: t,\n                type: s\n            });\n        }\n    }, i = {\n        merge: function() {\n            var t;\n            if (arguments[0] instanceof SVG.Set) {\n                var e = this;\n                arguments[0].each(function(t) {\n                    this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this));\n                });\n            } else {\n                t = Array.isArray(arguments[0]) ? arguments[0] : arguments;\n                for(var i = 0; i < t.length; i++)t[i] instanceof SVG.MergeNode ? this.put(t[i]) : this.put(new SVG.MergeNode(t[i]));\n            }\n        },\n        componentTransfer: function(t) {\n            if (this.rgb = new SVG.Set, [\n                \"r\",\n                \"g\",\n                \"b\",\n                \"a\"\n            ].forEach((function(t) {\n                this[t] = new SVG[\"Func\" + t.toUpperCase()](\"identity\"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);\n            }).bind(this)), t) for(var e in t.rgb && ([\n                \"r\",\n                \"g\",\n                \"b\"\n            ].forEach((function(e) {\n                this[e].attr(t.rgb);\n            }).bind(this)), delete t.rgb), t)this[e].attr(t[e]);\n        },\n        diffuseLighting: function(t, e, i) {\n            this.attr({\n                surfaceScale: t,\n                diffuseConstant: e,\n                kernelUnitLength: i\n            });\n        },\n        specularLighting: function(t, e, i, a) {\n            this.attr({\n                surfaceScale: t,\n                diffuseConstant: e,\n                specularExponent: i,\n                kernelUnitLength: a\n            });\n        }\n    }, a = {\n        distantLight: function(t, e) {\n            this.attr({\n                azimuth: t,\n                elevation: e\n            });\n        },\n        pointLight: function(t, e, i) {\n            this.attr({\n                x: t,\n                y: e,\n                z: i\n            });\n        },\n        spotLight: function(t, e, i, a, s, r) {\n            this.attr({\n                x: t,\n                y: e,\n                z: i,\n                pointsAtX: a,\n                pointsAtY: s,\n                pointsAtZ: r\n            });\n        },\n        mergeNode: function(t) {\n            this.attr(\"in\", t);\n        }\n    };\n    function s(t) {\n        return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\\s+/, \"\").replace(/\\s+$/, \"\").replace(/\\s+/g, \" \");\n    }\n    function r() {\n        var t = function() {};\n        for(var e in \"function\" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)for(var i in arguments[e])t(arguments[e][i], i, arguments[e]);\n    }\n    [\n        \"r\",\n        \"g\",\n        \"b\",\n        \"a\"\n    ].forEach(function(t) {\n        a[\"Func\" + t.toUpperCase()] = function(t) {\n            switch(this.attr(\"type\", t), t){\n                case \"table\":\n                    this.attr(\"tableValues\", arguments[1]);\n                    break;\n                case \"linear\":\n                    this.attr(\"slope\", arguments[1]), this.attr(\"intercept\", arguments[2]);\n                    break;\n                case \"gamma\":\n                    this.attr(\"amplitude\", arguments[1]), this.attr(\"exponent\", arguments[2]), this.attr(\"offset\", arguments[2]);\n            }\n        };\n    }), r(e, function(t, e) {\n        var i = e.charAt(0).toUpperCase() + e.slice(1);\n        SVG[i + \"Effect\"] = SVG.invent({\n            create: function() {\n                this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n            },\n            inherit: SVG.Effect,\n            extend: {}\n        });\n    }), r(i, function(t, e) {\n        var i = e.charAt(0).toUpperCase() + e.slice(1);\n        SVG[i + \"Effect\"] = SVG.invent({\n            create: function() {\n                this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n            },\n            inherit: SVG.ParentEffect,\n            extend: {}\n        });\n    }), r(a, function(t, e) {\n        var i = e.charAt(0).toUpperCase() + e.slice(1);\n        SVG[i] = SVG.invent({\n            create: function() {\n                this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments);\n            },\n            inherit: SVG.ChildEffect,\n            extend: {}\n        });\n    }), SVG.extend(SVG.MergeEffect, {\n        in: function(t) {\n            return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this;\n        }\n    }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {\n        in2: function(t) {\n            return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in2\") + '\"]').get(0) || this.attr(\"in2\") : this.attr(\"in2\", t);\n        }\n    }), SVG.filter = {\n        sepiatone: [\n            .343,\n            .669,\n            .119,\n            0,\n            0,\n            .249,\n            .626,\n            .13,\n            0,\n            0,\n            .172,\n            .334,\n            .111,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ]\n    };\n}).call(void 0), function() {\n    function t(t, s, r, o, n, l, h) {\n        for(var c = t.slice(s, r || h), d = o.slice(n, l || h), g = 0, u = {\n            pos: [\n                0,\n                0\n            ],\n            start: [\n                0,\n                0\n            ]\n        }, p = {\n            pos: [\n                0,\n                0\n            ],\n            start: [\n                0,\n                0\n            ]\n        };;){\n            if (c[g] = e.call(u, c[g]), d[g] = e.call(p, d[g]), c[g][0] != d[g][0] || \"M\" == c[g][0] || \"A\" == c[g][0] && (c[g][4] != d[g][4] || c[g][5] != d[g][5]) ? (Array.prototype.splice.apply(c, [\n                g,\n                1\n            ].concat(a.call(u, c[g]))), Array.prototype.splice.apply(d, [\n                g,\n                1\n            ].concat(a.call(p, d[g])))) : (c[g] = i.call(u, c[g]), d[g] = i.call(p, d[g])), ++g == c.length && g == d.length) break;\n            g == c.length && c.push([\n                \"C\",\n                u.pos[0],\n                u.pos[1],\n                u.pos[0],\n                u.pos[1],\n                u.pos[0],\n                u.pos[1]\n            ]), g == d.length && d.push([\n                \"C\",\n                p.pos[0],\n                p.pos[1],\n                p.pos[0],\n                p.pos[1],\n                p.pos[0],\n                p.pos[1]\n            ]);\n        }\n        return {\n            start: c,\n            dest: d\n        };\n    }\n    function e(t) {\n        switch(t[0]){\n            case \"z\":\n            case \"Z\":\n                t[0] = \"L\", t[1] = this.start[0], t[2] = this.start[1];\n                break;\n            case \"H\":\n                t[0] = \"L\", t[2] = this.pos[1];\n                break;\n            case \"V\":\n                t[0] = \"L\", t[2] = t[1], t[1] = this.pos[0];\n                break;\n            case \"T\":\n                t[0] = \"Q\", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];\n                break;\n            case \"S\":\n                t[0] = \"C\", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];\n        }\n        return t;\n    }\n    function i(t) {\n        var e = t.length;\n        return this.pos = [\n            t[e - 2],\n            t[e - 1]\n        ], -1 != \"SCQT\".indexOf(t[0]) && (this.reflection = [\n            2 * this.pos[0] - t[e - 4],\n            2 * this.pos[1] - t[e - 3]\n        ]), t;\n    }\n    function a(t) {\n        var e = [\n            t\n        ];\n        switch(t[0]){\n            case \"M\":\n                return this.pos = this.start = [\n                    t[1],\n                    t[2]\n                ], e;\n            case \"L\":\n                t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];\n                break;\n            case \"Q\":\n                t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;\n                break;\n            case \"A\":\n                e = function(t, e) {\n                    var i, a, s, r, o, n, l, h, c, d, g, u, p, f, x, b, v, m, y, w, k, A, S, C, L, P, I = Math.abs(e[1]), T = Math.abs(e[2]), M = e[3] % 360, z = e[4], X = e[5], E = e[6], Y = e[7], F = new SVG.Point(t), R = new SVG.Point(E, Y), H = [];\n                    if (0 === I || 0 === T || F.x === R.x && F.y === R.y) return [\n                        [\n                            \"C\",\n                            F.x,\n                            F.y,\n                            R.x,\n                            R.y,\n                            R.x,\n                            R.y\n                        ]\n                    ];\n                    i = new SVG.Point((F.x - R.x) / 2, (F.y - R.y) / 2).transform((new SVG.Matrix).rotate(M)), (a = i.x * i.x / (I * I) + i.y * i.y / (T * T)) > 1 && (I *= a = Math.sqrt(a), T *= a);\n                    s = (new SVG.Matrix).rotate(M).scale(1 / I, 1 / T).rotate(-M), F = F.transform(s), R = R.transform(s), r = [\n                        R.x - F.x,\n                        R.y - F.y\n                    ], n = r[0] * r[0] + r[1] * r[1], o = Math.sqrt(n), r[0] /= o, r[1] /= o, l = n < 4 ? Math.sqrt(1 - n / 4) : 0, z === X && (l *= -1);\n                    h = new SVG.Point((R.x + F.x) / 2 + l * -r[1], (R.y + F.y) / 2 + l * r[0]), c = new SVG.Point(F.x - h.x, F.y - h.y), d = new SVG.Point(R.x - h.x, R.y - h.y), g = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (g *= -1);\n                    u = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (u *= -1);\n                    X && g > u && (u += 2 * Math.PI);\n                    !X && g < u && (u -= 2 * Math.PI);\n                    for(f = Math.ceil(2 * Math.abs(g - u) / Math.PI), b = [], v = g, p = (u - g) / f, x = 4 * Math.tan(p / 4) / 3, k = 0; k <= f; k++)y = Math.cos(v), m = Math.sin(v), w = new SVG.Point(h.x + y, h.y + m), b[k] = [\n                        new SVG.Point(w.x + x * m, w.y - x * y),\n                        w,\n                        new SVG.Point(w.x - x * m, w.y + x * y)\n                    ], v += p;\n                    for(b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), s = (new SVG.Matrix).rotate(M).scale(I, T).rotate(-M), k = 0, A = b.length; k < A; k++)b[k][0] = b[k][0].transform(s), b[k][1] = b[k][1].transform(s), b[k][2] = b[k][2].transform(s);\n                    for(k = 1, A = b.length; k < A; k++)S = (w = b[k - 1][2]).x, C = w.y, L = (w = b[k][0]).x, P = w.y, E = (w = b[k][1]).x, Y = w.y, H.push([\n                        \"C\",\n                        S,\n                        C,\n                        L,\n                        P,\n                        E,\n                        Y\n                    ]);\n                    return H;\n                }(this.pos, t), t = e[0];\n        }\n        return t[0] = \"C\", this.pos = [\n            t[5],\n            t[6]\n        ], this.reflection = [\n            2 * t[5] - t[3],\n            2 * t[6] - t[4]\n        ], e;\n    }\n    function s(t, e) {\n        if (!1 === e) return !1;\n        for(var i = e, a = t.length; i < a; ++i)if (\"M\" == t[i][0]) return i;\n        return !1;\n    }\n    SVG.extend(SVG.PathArray, {\n        morph: function(e) {\n            for(var i = this.value, a = this.parse(e), r = 0, o = 0, n = !1, l = !1; !1 !== r || !1 !== o;){\n                var h;\n                n = s(i, !1 !== r && r + 1), l = s(a, !1 !== o && o + 1), !1 === r && (r = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push([\n                    \"M\",\n                    h.x + h.width / 2,\n                    h.y + h.height / 2\n                ]) - 1), !1 === o && (o = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? a.push(a[0]) - 1 : a.push([\n                    \"M\",\n                    h.x + h.width / 2,\n                    h.y + h.height / 2\n                ]) - 1);\n                var c = t(i, r, n, a, o, l);\n                i = i.slice(0, r).concat(c.start, !1 === n ? [] : i.slice(n)), a = a.slice(0, o).concat(c.dest, !1 === l ? [] : a.slice(l)), r = !1 !== n && r + c.start.length, o = !1 !== l && o + c.dest.length;\n            }\n            return this.value = i, this.destination = new SVG.PathArray, this.destination.value = a, this;\n        }\n    });\n}(), /*! svg.draggable.js - v2.2.2 - 2019-01-08\n* https://github.com/svgdotjs/svg.draggable.js\n* Copyright (c) 2019 Wout Fierens; Licensed MIT */ (function() {\n    function t(t) {\n        t.remember(\"_draggable\", this), this.el = t;\n    }\n    t.prototype.init = function(t, e) {\n        var i = this;\n        this.constraint = t, this.value = e, this.el.on(\"mousedown.drag\", function(t) {\n            i.start(t);\n        }), this.el.on(\"touchstart.drag\", function(t) {\n            i.start(t);\n        });\n    }, t.prototype.transformPoint = function(t, e) {\n        var i = (t = t || window.event).changedTouches && t.changedTouches[0] || t;\n        return this.p.x = i.clientX - (e || 0), this.p.y = i.clientY, this.p.matrixTransform(this.m);\n    }, t.prototype.getBBox = function() {\n        var t = this.el.bbox();\n        return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t;\n    }, t.prototype.start = function(t) {\n        if (\"click\" != t.type && \"mousedown\" != t.type && \"mousemove\" != t.type || 1 == (t.which || t.buttons)) {\n            var e = this;\n            if (this.el.fire(\"beforedrag\", {\n                event: t,\n                handler: this\n            }), !this.el.event().defaultPrevented) {\n                t.preventDefault(), t.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();\n                var i, a = this.getBBox();\n                if (this.el instanceof SVG.Text) switch(i = this.el.node.getComputedTextLength(), this.el.attr(\"text-anchor\")){\n                    case \"middle\":\n                        i /= 2;\n                        break;\n                    case \"start\":\n                        i = 0;\n                }\n                this.startPoints = {\n                    point: this.transformPoint(t, i),\n                    box: a,\n                    transform: this.el.transform()\n                }, SVG.on(window, \"mousemove.drag\", function(t) {\n                    e.drag(t);\n                }), SVG.on(window, \"touchmove.drag\", function(t) {\n                    e.drag(t);\n                }), SVG.on(window, \"mouseup.drag\", function(t) {\n                    e.end(t);\n                }), SVG.on(window, \"touchend.drag\", function(t) {\n                    e.end(t);\n                }), this.el.fire(\"dragstart\", {\n                    event: t,\n                    p: this.startPoints.point,\n                    m: this.m,\n                    handler: this\n                });\n            }\n        }\n    }, t.prototype.drag = function(t) {\n        var e = this.getBBox(), i = this.transformPoint(t), a = this.startPoints.box.x + i.x - this.startPoints.point.x, s = this.startPoints.box.y + i.y - this.startPoints.point.y, r = this.constraint, o = i.x - this.startPoints.point.x, n = i.y - this.startPoints.point.y;\n        if (this.el.fire(\"dragmove\", {\n            event: t,\n            p: i,\n            m: this.m,\n            handler: this\n        }), this.el.event().defaultPrevented) return i;\n        if (\"function\" == typeof r) {\n            var l = r.call(this.el, a, s, this.m);\n            \"boolean\" == typeof l && (l = {\n                x: l,\n                y: l\n            }), !0 === l.x ? this.el.x(a) : !1 !== l.x && this.el.x(l.x), !0 === l.y ? this.el.y(s) : !1 !== l.y && this.el.y(l.y);\n        } else \"object\" == typeof r && (null != r.minX && a < r.minX ? o = (a = r.minX) - this.startPoints.box.x : null != r.maxX && a > r.maxX - e.width && (o = (a = r.maxX - e.width) - this.startPoints.box.x), null != r.minY && s < r.minY ? n = (s = r.minY) - this.startPoints.box.y : null != r.maxY && s > r.maxY - e.height && (n = (s = r.maxY - e.height) - this.startPoints.box.y), null != r.snapToGrid && (a -= a % r.snapToGrid, s -= s % r.snapToGrid, o -= o % r.snapToGrid, n -= n % r.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({\n            x: o,\n            y: n\n        }, !0) : this.el.move(a, s));\n        return i;\n    }, t.prototype.end = function(t) {\n        var e = this.drag(t);\n        this.el.fire(\"dragend\", {\n            event: t,\n            p: e,\n            m: this.m,\n            handler: this\n        }), SVG.off(window, \"mousemove.drag\"), SVG.off(window, \"touchmove.drag\"), SVG.off(window, \"mouseup.drag\"), SVG.off(window, \"touchend.drag\");\n    }, SVG.extend(SVG.Element, {\n        draggable: function(e, i) {\n            \"function\" != typeof e && \"object\" != typeof e || (i = e, e = !0);\n            var a = this.remember(\"_draggable\") || new t(this);\n            return (e = void 0 === e || e) ? a.init(i || {}, e) : (this.off(\"mousedown.drag\"), this.off(\"touchstart.drag\")), this;\n        }\n    });\n}).call(void 0), function() {\n    function t(t) {\n        this.el = t, t.remember(\"_selectHandler\", this), this.pointSelection = {\n            isSelected: !1\n        }, this.rectSelection = {\n            isSelected: !1\n        }, this.pointsList = {\n            lt: [\n                0,\n                0\n            ],\n            rt: [\n                \"width\",\n                0\n            ],\n            rb: [\n                \"width\",\n                \"height\"\n            ],\n            lb: [\n                0,\n                \"height\"\n            ],\n            t: [\n                \"width\",\n                0\n            ],\n            r: [\n                \"width\",\n                \"height\"\n            ],\n            b: [\n                \"width\",\n                \"height\"\n            ],\n            l: [\n                0,\n                \"height\"\n            ]\n        }, this.pointCoord = function(t, e, i) {\n            var a = \"string\" != typeof t ? t : e[t];\n            return i ? a / 2 : a;\n        }, this.pointCoords = function(t, e) {\n            var i = this.pointsList[t];\n            return {\n                x: this.pointCoord(i[0], e, \"t\" === t || \"b\" === t),\n                y: this.pointCoord(i[1], e, \"r\" === t || \"l\" === t)\n            };\n        };\n    }\n    t.prototype.init = function(t, e) {\n        var i = this.el.bbox();\n        this.options = {};\n        var a = this.el.selectize.defaults.points;\n        for(var s in this.el.selectize.defaults)this.options[s] = this.el.selectize.defaults[s], void 0 !== e[s] && (this.options[s] = e[s]);\n        var r = [\n            \"points\",\n            \"pointsExclude\"\n        ];\n        for(var s in r){\n            var o = this.options[r[s]];\n            \"string\" == typeof o ? o = o.length > 0 ? o.split(/\\s*,\\s*/i) : [] : \"boolean\" == typeof o && \"points\" === r[s] && (o = o ? a : []), this.options[r[s]] = o;\n        }\n        this.options.points = [\n            a,\n            this.options.points\n        ].reduce(function(t, e) {\n            return t.filter(function(t) {\n                return e.indexOf(t) > -1;\n            });\n        }), this.options.points = [\n            this.options.points,\n            this.options.pointsExclude\n        ].reduce(function(t, e) {\n            return t.filter(function(t) {\n                return e.indexOf(t) < 0;\n            });\n        }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== [\n            \"line\",\n            \"polyline\",\n            \"polygon\"\n        ].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup();\n    }, t.prototype.selectPoints = function(t) {\n        return this.pointSelection.isSelected = t, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;\n    }, t.prototype.getPointArray = function() {\n        var t = this.el.bbox();\n        return this.el.array().valueOf().map(function(e) {\n            return [\n                e[0] - t.x,\n                e[1] - t.y\n            ];\n        });\n    }, t.prototype.drawPoints = function() {\n        for(var t = this, e = this.getPointArray(), i = 0, a = e.length; i < a; ++i){\n            var s = function(e) {\n                return function(i) {\n                    (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n                    var a = i.pageX || i.touches[0].pageX, s = i.pageY || i.touches[0].pageY;\n                    t.el.fire(\"point\", {\n                        x: a,\n                        y: s,\n                        i: e,\n                        event: i\n                    });\n                };\n            }(i), r = this.drawPoint(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + \"_point\").on(\"touchstart\", s).on(\"mousedown\", s);\n            this.pointSelection.set.add(r);\n        }\n    }, t.prototype.drawPoint = function(t, e) {\n        var i = this.options.pointType;\n        switch(i){\n            case \"circle\":\n                return this.drawCircle(t, e);\n            case \"rect\":\n                return this.drawRect(t, e);\n            default:\n                if (\"function\" == typeof i) return i.call(this, t, e);\n                throw new Error(\"Unknown \" + i + \" point type!\");\n        }\n    }, t.prototype.drawCircle = function(t, e) {\n        return this.nested.circle(this.options.pointSize).center(t, e);\n    }, t.prototype.drawRect = function(t, e) {\n        return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t, e);\n    }, t.prototype.updatePointSelection = function() {\n        var t = this.getPointArray();\n        this.pointSelection.set.each(function(e) {\n            this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]);\n        });\n    }, t.prototype.updateRectSelection = function() {\n        var t = this, e = this.el.bbox();\n        if (this.rectSelection.set.get(0).attr({\n            width: e.width,\n            height: e.height\n        }), this.options.points.length && this.options.points.map(function(i, a) {\n            var s = t.pointCoords(i, e);\n            t.rectSelection.set.get(a + 1).center(s.x, s.y);\n        }), this.options.rotationPoint) {\n            var i = this.rectSelection.set.length();\n            this.rectSelection.set.get(i - 1).center(e.width / 2, 20);\n        }\n    }, t.prototype.selectRect = function(t) {\n        var e = this, i = this.el.bbox();\n        function a(t) {\n            return function(i) {\n                (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n                var a = i.pageX || i.touches[0].pageX, s = i.pageY || i.touches[0].pageY;\n                e.el.fire(t, {\n                    x: a,\n                    y: s,\n                    event: i\n                });\n            };\n        }\n        if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {\n            this.options.points.map(function(t, s) {\n                var r = e.pointCoords(t, i), o = e.drawPoint(r.x, r.y).attr(\"class\", e.options.classPoints + \"_\" + t).on(\"mousedown\", a(t)).on(\"touchstart\", a(t));\n                e.rectSelection.set.add(o);\n            }), this.rectSelection.set.each(function() {\n                this.addClass(e.options.classPoints);\n            });\n        }\n        if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {\n            var s = function(t) {\n                (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();\n                var i = t.pageX || t.touches[0].pageX, a = t.pageY || t.touches[0].pageY;\n                e.el.fire(\"rot\", {\n                    x: i,\n                    y: a,\n                    event: t\n                });\n            }, r = this.drawPoint(i.width / 2, 20).attr(\"class\", this.options.classPoints + \"_rot\").on(\"touchstart\", s).on(\"mousedown\", s);\n            this.rectSelection.set.add(r);\n        }\n    }, t.prototype.handler = function() {\n        var t = this.el.bbox();\n        this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();\n    }, t.prototype.observe = function() {\n        var t = this;\n        if (MutationObserver) if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function() {\n            t.handler();\n        }), this.observerInst.observe(this.el.node, {\n            attributes: !0\n        });\n        else try {\n            this.observerInst.disconnect(), delete this.observerInst;\n        } catch (t) {}\n        else this.el.off(\"DOMAttrModified.select\"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on(\"DOMAttrModified.select\", function() {\n            t.handler();\n        });\n    }, t.prototype.cleanup = function() {\n        !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {\n            this.remove();\n        }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {\n            this.remove();\n        }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);\n    }, SVG.extend(SVG.Element, {\n        selectize: function(e, i) {\n            return \"object\" == typeof e && (i = e, e = !0), (this.remember(\"_selectHandler\") || new t(this)).init(void 0 === e || e, i || {}), this;\n        }\n    }), SVG.Element.prototype.selectize.defaults = {\n        points: [\n            \"lt\",\n            \"rt\",\n            \"rb\",\n            \"lb\",\n            \"t\",\n            \"r\",\n            \"b\",\n            \"l\"\n        ],\n        pointsExclude: [],\n        classRect: \"svg_select_boundingRect\",\n        classPoints: \"svg_select_points\",\n        pointSize: 7,\n        rotationPoint: !0,\n        deepSelect: !1,\n        pointType: \"circle\"\n    };\n}(), function() {\n    (function() {\n        function t(t) {\n            t.remember(\"_resizeHandler\", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint();\n        }\n        t.prototype.transformPoint = function(t, e, i) {\n            return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i || this.m);\n        }, t.prototype._extractPosition = function(t) {\n            return {\n                x: null != t.clientX ? t.clientX : t.touches[0].clientX,\n                y: null != t.clientY ? t.clientY : t.touches[0].clientY\n            };\n        }, t.prototype.init = function(t) {\n            var e = this;\n            if (this.stop(), \"stop\" !== t) {\n                for(var i in this.options = {}, this.el.resize.defaults)this.options[i] = this.el.resize.defaults[i], void 0 !== t[i] && (this.options[i] = t[i]);\n                this.el.on(\"lt.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"rt.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"rb.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"lb.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"t.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"r.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"b.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"l.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"rot.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.el.on(\"point.resize\", function(t) {\n                    e.resize(t || window.event);\n                }), this.update();\n            }\n        }, t.prototype.stop = function() {\n            return this.el.off(\"lt.resize\"), this.el.off(\"rt.resize\"), this.el.off(\"rb.resize\"), this.el.off(\"lb.resize\"), this.el.off(\"t.resize\"), this.el.off(\"r.resize\"), this.el.off(\"b.resize\"), this.el.off(\"l.resize\"), this.el.off(\"rot.resize\"), this.el.off(\"point.resize\"), this;\n        }, t.prototype.resize = function(t) {\n            var e = this;\n            this.m = this.el.node.getScreenCTM().inverse(), this.offset = {\n                x: window.pageXOffset,\n                y: window.pageYOffset\n            };\n            var i = this._extractPosition(t.detail.event);\n            if (this.parameters = {\n                type: this.el.type,\n                p: this.transformPoint(i.x, i.y),\n                x: t.detail.x,\n                y: t.detail.y,\n                box: this.el.bbox(),\n                rotation: this.el.transform().rotation\n            }, \"text\" === this.el.type && (this.parameters.fontSize = this.el.attr()[\"font-size\"]), void 0 !== t.detail.i) {\n                var a = this.el.array().valueOf();\n                this.parameters.i = t.detail.i, this.parameters.pointCoords = [\n                    a[t.detail.i][0],\n                    a[t.detail.i][1]\n                ];\n            }\n            switch(t.type){\n                case \"lt\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e);\n                        if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n                            if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n                            i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y + i[1]).size(this.parameters.box.width - i[0], this.parameters.box.height - i[1]);\n                        }\n                    };\n                    break;\n                case \"rt\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 2);\n                        if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n                            if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n                            i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).size(this.parameters.box.width + i[0], this.parameters.box.height - i[1]);\n                        }\n                    };\n                    break;\n                case \"rb\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 0);\n                        if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n                            if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n                            i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i[0], this.parameters.box.height + i[1]);\n                        }\n                    };\n                    break;\n                case \"lb\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 1);\n                        if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n                            if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n                            i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).size(this.parameters.box.width - i[0], this.parameters.box.height + i[1]);\n                        }\n                    };\n                    break;\n                case \"t\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 2);\n                        if (this.parameters.box.height - i[1] > 0) {\n                            if (\"text\" === this.parameters.type) return;\n                            this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).height(this.parameters.box.height - i[1]);\n                        }\n                    };\n                    break;\n                case \"r\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 0);\n                        if (this.parameters.box.width + i[0] > 0) {\n                            if (\"text\" === this.parameters.type) return;\n                            this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i[0]);\n                        }\n                    };\n                    break;\n                case \"b\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 0);\n                        if (this.parameters.box.height + i[1] > 0) {\n                            if (\"text\" === this.parameters.type) return;\n                            this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i[1]);\n                        }\n                    };\n                    break;\n                case \"l\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, 1);\n                        if (this.parameters.box.width - i[0] > 0) {\n                            if (\"text\" === this.parameters.type) return;\n                            this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).width(this.parameters.box.width - i[0]);\n                        }\n                    };\n                    break;\n                case \"rot\":\n                    this.calc = function(t, e) {\n                        var i = t + this.parameters.p.x, a = e + this.parameters.p.y, s = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r = Math.atan2(a - this.parameters.box.y - this.parameters.box.height / 2, i - this.parameters.box.x - this.parameters.box.width / 2), o = this.parameters.rotation + 180 * (r - s) / Math.PI + this.options.snapToAngle / 2;\n                        this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o - o % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\n                    };\n                    break;\n                case \"point\":\n                    this.calc = function(t, e) {\n                        var i = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a = this.el.array().valueOf();\n                        a[this.parameters.i][0] = this.parameters.pointCoords[0] + i[0], a[this.parameters.i][1] = this.parameters.pointCoords[1] + i[1], this.el.plot(a);\n                    };\n            }\n            this.el.fire(\"resizestart\", {\n                dx: this.parameters.x,\n                dy: this.parameters.y,\n                event: t\n            }), SVG.on(window, \"touchmove.resize\", function(t) {\n                e.update(t || window.event);\n            }), SVG.on(window, \"touchend.resize\", function() {\n                e.done();\n            }), SVG.on(window, \"mousemove.resize\", function(t) {\n                e.update(t || window.event);\n            }), SVG.on(window, \"mouseup.resize\", function() {\n                e.done();\n            });\n        }, t.prototype.update = function(t) {\n            if (t) {\n                var e = this._extractPosition(t), i = this.transformPoint(e.x, e.y), a = i.x - this.parameters.p.x, s = i.y - this.parameters.p.y;\n                this.lastUpdateCall = [\n                    a,\n                    s\n                ], this.calc(a, s), this.el.fire(\"resizing\", {\n                    dx: a,\n                    dy: s,\n                    event: t\n                });\n            } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\n        }, t.prototype.done = function() {\n            this.lastUpdateCall = null, SVG.off(window, \"mousemove.resize\"), SVG.off(window, \"mouseup.resize\"), SVG.off(window, \"touchmove.resize\"), SVG.off(window, \"touchend.resize\"), this.el.fire(\"resizedone\");\n        }, t.prototype.snapToGrid = function(t, e, i, a) {\n            var s;\n            return void 0 !== a ? s = [\n                (i + t) % this.options.snapToGrid,\n                (a + e) % this.options.snapToGrid\n            ] : (i = null == i ? 3 : i, s = [\n                (this.parameters.box.x + t + (1 & i ? 0 : this.parameters.box.width)) % this.options.snapToGrid,\n                (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid\n            ]), t < 0 && (s[0] -= this.options.snapToGrid), e < 0 && (s[1] -= this.options.snapToGrid), t -= Math.abs(s[0]) < this.options.snapToGrid / 2 ? s[0] : s[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(s[1]) < this.options.snapToGrid / 2 ? s[1] : s[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, i, a);\n        }, t.prototype.constraintToBox = function(t, e, i, a) {\n            var s, r, o = this.options.constraint || {};\n            return void 0 !== a ? (s = i, r = a) : (s = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width), r = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height)), void 0 !== o.minX && s + t < o.minX && (t = o.minX - s), void 0 !== o.maxX && s + t > o.maxX && (t = o.maxX - s), void 0 !== o.minY && r + e < o.minY && (e = o.minY - r), void 0 !== o.maxY && r + e > o.maxY && (e = o.maxY - r), [\n                t,\n                e\n            ];\n        }, t.prototype.checkAspectRatio = function(t, e) {\n            if (!this.options.saveAspectRatio) return t;\n            var i = t.slice(), a = this.parameters.box.width / this.parameters.box.height, s = this.parameters.box.width + t[0], r = this.parameters.box.height - t[1], o = s / r;\n            return o < a ? (i[1] = s / a - this.parameters.box.height, e && (i[1] = -i[1])) : o > a && (i[0] = this.parameters.box.width - r * a, e && (i[0] = -i[0])), i;\n        }, SVG.extend(SVG.Element, {\n            resize: function(e) {\n                return (this.remember(\"_resizeHandler\") || new t(this)).init(e || {}), this;\n            }\n        }), SVG.Element.prototype.resize.defaults = {\n            snapToAngle: .1,\n            snapToGrid: 1,\n            constraint: {},\n            saveAspectRatio: !1\n        };\n    }).call(this);\n}(), void 0 === window.Apex && (window.Apex = {});\nvar Gt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"initModules\",\n            value: function() {\n                this.ctx.publicMethods = [\n                    \"updateOptions\",\n                    \"updateSeries\",\n                    \"appendData\",\n                    \"appendSeries\",\n                    \"isSeriesHidden\",\n                    \"toggleSeries\",\n                    \"showSeries\",\n                    \"hideSeries\",\n                    \"setLocale\",\n                    \"resetSeries\",\n                    \"zoomX\",\n                    \"toggleDataPointSelection\",\n                    \"dataURI\",\n                    \"exportToCSV\",\n                    \"addXaxisAnnotation\",\n                    \"addYaxisAnnotation\",\n                    \"addPointAnnotation\",\n                    \"clearAnnotations\",\n                    \"removeAnnotation\",\n                    \"paper\",\n                    \"destroy\"\n                ], this.ctx.eventList = [\n                    \"click\",\n                    \"mousedown\",\n                    \"mousemove\",\n                    \"mouseleave\",\n                    \"touchstart\",\n                    \"touchmove\",\n                    \"touchleave\",\n                    \"mouseup\",\n                    \"touchend\"\n                ], this.ctx.animations = new b(this.ctx), this.ctx.axes = new J(this.ctx), this.ctx.core = new Wt(this.ctx.el, this.ctx), this.ctx.config = new E({}), this.ctx.data = new W(this.ctx), this.ctx.grid = new j(this.ctx), this.ctx.graphics = new m(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new Q(this.ctx), this.ctx.events = new Z(this.ctx), this.ctx.exports = new G(this.ctx), this.ctx.localization = new $(this.ctx), this.ctx.options = new L, this.ctx.responsive = new K(this.ctx), this.ctx.series = new N(this.ctx), this.ctx.theme = new tt(this.ctx), this.ctx.formatters = new T(this.ctx), this.ctx.titleSubtitle = new et(this.ctx), this.ctx.legend = new lt(this.ctx), this.ctx.toolbar = new ht(this.ctx), this.ctx.tooltip = new bt(this.ctx), this.ctx.dimensions = new ot(this.ctx), this.ctx.updateHelpers = new Bt(this.ctx), this.ctx.zoomPanSelection = new ct(this.ctx), this.ctx.w.globals.tooltip = new bt(this.ctx);\n            }\n        }\n    ]), t;\n}(), Vt = function() {\n    function t(e) {\n        a(this, t), this.ctx = e, this.w = e.w;\n    }\n    return r(t, [\n        {\n            key: \"clear\",\n            value: function(t) {\n                var e = t.isUpdating;\n                this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({\n                    isUpdating: e\n                });\n            }\n        },\n        {\n            key: \"killSVG\",\n            value: function(t) {\n                t.each(function(t, e) {\n                    this.removeClass(\"*\"), this.off(), this.stop();\n                }, !0), t.ungroup(), t.clear();\n            }\n        },\n        {\n            key: \"clearDomElements\",\n            value: function(t) {\n                var e = this, i = t.isUpdating, a = this.w.globals.dom.Paper.node;\n                a.parentNode && a.parentNode.parentNode && !i && (a.parentNode.parentNode.style.minHeight = \"unset\");\n                var s = this.w.globals.dom.baseEl;\n                s && this.ctx.eventList.forEach(function(t) {\n                    s.removeEventListener(t, e.ctx.events.documentEvent);\n                });\n                var r = this.w.globals.dom;\n                if (null !== this.ctx.el) for(; this.ctx.el.firstChild;)this.ctx.el.removeChild(this.ctx.el.firstChild);\n                this.killSVG(r.Paper), r.Paper.remove(), r.elWrap = null, r.elGraphical = null, r.elLegendWrap = null, r.elLegendForeign = null, r.baseEl = null, r.elGridRect = null, r.elGridRectMask = null, r.elGridRectMarkerMask = null, r.elForecastMask = null, r.elNonForecastMask = null, r.elDefs = null;\n            }\n        }\n    ]), t;\n}(), jt = new WeakMap;\nvar _t = function() {\n    function t(e, i) {\n        a(this, t), this.opts = i, this.ctx = this, this.w = new F(i).init(), this.el = e, this.w.globals.cuid = x.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Gt(this).initModules(), this.create = x.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);\n    }\n    return r(t, [\n        {\n            key: \"render\",\n            value: function() {\n                var t = this;\n                return new Promise(function(e, i) {\n                    if (null !== t.el) {\n                        void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({\n                            id: t.w.globals.chartID,\n                            group: t.w.config.chart.group,\n                            chart: t\n                        }), t.setLocale(t.w.config.chart.defaultLocale);\n                        var a = t.w.config.chart.events.beforeMount;\n                        if (\"function\" == typeof a && a(t, t.w), t.events.fireEvent(\"beforeMount\", [\n                            t,\n                            t.w\n                        ]), window.addEventListener(\"resize\", t.windowResizeHandler), function(t, e) {\n                            var i = !1;\n                            if (t.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n                                var a = t.getBoundingClientRect();\n                                \"none\" !== t.style.display && 0 !== a.width || (i = !0);\n                            }\n                            var s = new ResizeObserver(function(a) {\n                                i && e.call(t, a), i = !0;\n                            });\n                            t.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t.children).forEach(function(t) {\n                                return s.observe(t);\n                            }) : s.observe(t), jt.set(e, s);\n                        }(t.el.parentNode, t.parentResizeHandler), !t.css) {\n                            var s = t.el.getRootNode && t.el.getRootNode(), r = x.is(\"ShadowRoot\", s), o = t.el.ownerDocument, n = o.getElementById(\"apexcharts-css\");\n                            if (r || !n) {\n                                var l;\n                                t.css = document.createElement(\"style\"), t.css.id = \"apexcharts-css\", t.css.textContent = '@keyframes opaque {\\n  0% {\\n      opacity: 0\\n  }\\n\\n  to {\\n      opacity: 1\\n  }\\n}\\n\\n@keyframes resizeanim {\\n  0%,to {\\n      opacity: 0\\n  }\\n}\\n\\n.apexcharts-canvas {\\n  position: relative;\\n  user-select: none\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0,0,0,.5);\\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\\n}\\n\\n.apexcharts-inner {\\n  position: relative\\n}\\n\\n.apexcharts-text tspan {\\n  font-family: inherit\\n}\\n\\n.legend-mouseover-inactive {\\n  transition: .15s ease all;\\n  opacity: .2\\n}\\n\\n.apexcharts-legend-text {\\n  padding-left: 15px;\\n  margin-left: -15px;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-tooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255,255,255,.96)\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark {\\n  color: #fff;\\n  background: rgba(30,30,30,.8)\\n}\\n\\n.apexcharts-tooltip * {\\n  font-family: inherit\\n}\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\\n  background: #eceff1;\\n  border-bottom: 1px solid #ddd\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\\n  background: rgba(0,0,0,.7);\\n  border-bottom: 1px solid #333\\n}\\n\\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  margin-left: 5px;\\n  font-weight: 600\\n}\\n\\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\\n  display: none\\n}\\n\\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\\n  padding: 6px 0 5px\\n}\\n\\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\\n  display: flex\\n}\\n\\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\\n  margin-top: -6px\\n}\\n\\n.apexcharts-tooltip-marker {\\n  width: 12px;\\n  height: 12px;\\n  position: relative;\\n  top: 0;\\n  margin-right: 10px;\\n  border-radius: 50%\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\\n  opacity: 1\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px\\n}\\n\\n.apexcharts-tooltip-series-group-hidden {\\n  opacity: 0;\\n  height: 0;\\n  line-height: 0;\\n  padding: 0!important\\n}\\n\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px\\n}\\n\\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\\n  padding: 4px 8px\\n}\\n\\n.apexcharts-tooltip-boxPlot {\\n  display: flex;\\n  flex-direction: column-reverse\\n}\\n\\n.apexcharts-tooltip-box>div {\\n  margin: 4px 0\\n}\\n\\n.apexcharts-tooltip-box span.value {\\n  font-weight: 700\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: 700;\\n  display: block;\\n  margin-bottom: 5px\\n}\\n\\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #eceff1;\\n  border: 1px solid #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip {\\n  padding: 9px 10px;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0,0,0,.7);\\n  border: 1px solid rgba(0,0,0,.5);\\n  color: #fff\\n}\\n\\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\\n  left: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n  border-color: transparent;\\n  border-width: 6px;\\n  margin-left: -6px\\n}\\n\\n.apexcharts-xaxistooltip:before {\\n  border-color: transparent;\\n  border-width: 7px;\\n  margin-left: -7px\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%\\n}\\n\\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\\n  top: 100%\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #eceff1\\n}\\n\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\\n  border-bottom-color: rgba(0,0,0,.5)\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color: #eceff1\\n}\\n\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90a4ae\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\\n  border-top-color: rgba(0,0,0,.5)\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-yaxistooltip {\\n  padding: 4px 10px\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0,0,0,.7);\\n  border: 1px solid rgba(0,0,0,.5);\\n  color: #fff\\n}\\n\\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\\n  top: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none\\n}\\n\\n.apexcharts-yaxistooltip:after {\\n  border-color: transparent;\\n  border-width: 6px;\\n  margin-top: -6px\\n}\\n\\n.apexcharts-yaxistooltip:before {\\n  border-color: transparent;\\n  border-width: 7px;\\n  margin-top: -7px\\n}\\n\\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\\n  left: 100%\\n}\\n\\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\\n  right: 100%\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #eceff1\\n}\\n\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90a4ae\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\\n  border-left-color: rgba(0,0,0,.5)\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #eceff1\\n}\\n\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90a4ae\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\\n  border-right-color: rgba(0,0,0,.5)\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-active {\\n  opacity: 1\\n}\\n\\n.apexcharts-yaxistooltip-hidden {\\n  display: none\\n}\\n\\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\\n  opacity: 1;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0\\n}\\n\\n.apexcharts-selection-rect {\\n  cursor: move\\n}\\n\\n.svg_select_boundingRect,.svg_select_points_rot {\\n  pointer-events: none;\\n  opacity: 0;\\n  visibility: hidden\\n}\\n\\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\\n  opacity: 0;\\n  visibility: hidden\\n}\\n\\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\\n  cursor: ew-resize;\\n  opacity: 1;\\n  visibility: visible\\n}\\n\\n.svg_select_points {\\n  fill: #efefef;\\n  stroke: #333;\\n  rx: 2\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\\n  cursor: crosshair\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6e8192;\\n  text-align: center\\n}\\n\\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\\n  fill: #6e8192\\n}\\n\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(.76)\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\\n  fill: #f3f4f5\\n}\\n\\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\\n  fill: #008ffb\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\\n  fill: #333\\n}\\n\\n.apexcharts-menu-icon,.apexcharts-selection-icon {\\n  position: relative\\n}\\n\\n.apexcharts-reset-icon {\\n  margin-left: 5px\\n}\\n\\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\\n  transform: scale(.85)\\n}\\n\\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\\n  transform: scale(.7)\\n}\\n\\n.apexcharts-zoomout-icon {\\n  margin-right: 3px\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0\\n}\\n\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6e8192;\\n  stroke-width: 2\\n}\\n\\n.apexcharts-pan-icon.apexcharts-selected svg {\\n  stroke: #008ffb\\n}\\n\\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\\n  stroke: #333\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0 6px 2px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: .15s ease all;\\n  pointer-events: none\\n}\\n\\n.apexcharts-menu.apexcharts-menu-open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: .15s ease all\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-item:hover {\\n  background: #eee\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu {\\n  background: rgba(0,0,0,.7);\\n  color: #fff\\n}\\n\\n@media screen and (min-width:768px) {\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n      opacity: 1\\n  }\\n}\\n\\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0\\n}\\n\\n.apexcharts-hidden-element-shown {\\n  opacity: 1;\\n  transition: 0.25s ease all;\\n}\\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\\n  cursor: default;\\n  pointer-events: none\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: .3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease\\n}\\n\\n.apexcharts-radialbar-label {\\n  cursor: pointer;\\n}\\n\\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\\n  pointer-events: none\\n}\\n\\n.apexcharts-marker {\\n  transition: .15s ease all\\n}\\n\\n.resize-triggers {\\n  animation: 1ms resizeanim;\\n  visibility: hidden;\\n  opacity: 0;\\n  height: 100%;\\n  width: 100%;\\n  overflow: hidden\\n}\\n\\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\\n  content: \" \";\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  left: 0\\n}\\n\\n.resize-triggers>div {\\n  height: 100%;\\n  width: 100%;\\n  background: #eee;\\n  overflow: auto\\n}\\n\\n.contract-trigger:before {\\n  overflow: hidden;\\n  width: 200%;\\n  height: 200%\\n}\\n\\n.apexcharts-bar-goals-markers{\\n  pointer-events: none\\n}\\n\\n.apexcharts-bar-shadows{\\n  pointer-events: none\\n}\\n\\n.apexcharts-rangebar-goals-markers{\\n  pointer-events: none\\n}';\n                                var h = (null === (l = t.opts.chart) || void 0 === l ? void 0 : l.nonce) || t.w.config.chart.nonce;\n                                h && t.css.setAttribute(\"nonce\", h), r ? s.prepend(t.css) : o.head.appendChild(t.css);\n                            }\n                        }\n                        var c = t.create(t.w.config.series, {});\n                        if (!c) return e(t);\n                        t.mount(c).then(function() {\n                            \"function\" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent(\"mounted\", [\n                                t,\n                                t.w\n                            ]), e(c);\n                        }).catch(function(t) {\n                            i(t);\n                        });\n                    } else i(new Error(\"Element not found\"));\n                });\n            }\n        },\n        {\n            key: \"create\",\n            value: function(t, e) {\n                var i = this.w;\n                new Gt(this).initModules();\n                var a = this.w.globals;\n                (a.noData = !1, a.animationEnded = !1, this.responsive.checkResponsiveConfig(e), i.config.xaxis.convertedCatToNumeric) && new X(i.config).convertCatToNumericXaxis(i.config, this.ctx);\n                if (null === this.el) return a.animationEnded = !0, null;\n                if (this.core.setupElements(), \"treemap\" === i.config.chart.type && (i.config.grid.show = !1, i.config.yaxis[0].show = !1), 0 === a.svgWidth) return a.animationEnded = !0, null;\n                var s = y.checkComboSeries(t);\n                a.comboCharts = s.comboCharts, a.comboBarCount = s.comboBarCount;\n                var r = t.every(function(t) {\n                    return t.data && 0 === t.data.length;\n                });\n                (0 === t.length || r) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t), this.theme.init(), new H(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a.noData && a.collapsedSeries.length !== a.series.length && !i.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a.axisCharts && (this.core.coreCalculations(), \"category\" !== i.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i.globals.minX, this.ctx.toolbar.maxX = i.globals.maxX), this.formatters.heatmapLabelFormatters(), new y(this).getLargestMarkerSize(), this.dimensions.plotCoords();\n                var o = this.core.xySettings();\n                this.grid.createGridMask();\n                var n = this.core.plotChartType(t, o), l = new O(this);\n                return l.bringForward(), i.config.dataLabels.background.enabled && l.dataLabelsBackground(), this.core.shiftGraphPosition(), {\n                    elGraph: n,\n                    xyRatios: o,\n                    dimensions: {\n                        plot: {\n                            left: i.globals.translateX,\n                            top: i.globals.translateY,\n                            width: i.globals.gridWidth,\n                            height: i.globals.gridHeight\n                        }\n                    }\n                };\n            }\n        },\n        {\n            key: \"mount\",\n            value: function() {\n                var t = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i = this, a = i.w;\n                return new Promise(function(s, r) {\n                    if (null === i.el) return r(new Error(\"Not enough data to display or target element not found\"));\n                    (null === e || a.globals.allSeriesCollapsed) && i.series.handleNoData(), i.grid = new j(i);\n                    var o, n, l = i.grid.drawGrid();\n                    (i.annotations = new P(i), i.annotations.drawImageAnnos(), i.annotations.drawTextAnnos(), \"back\" === a.config.grid.position) && (l && a.globals.dom.elGraphical.add(l.el), null != l && null !== (o = l.elGridBorders) && void 0 !== o && o.node && a.globals.dom.elGraphical.add(l.elGridBorders));\n                    if (Array.isArray(e.elGraph)) for(var h = 0; h < e.elGraph.length; h++)a.globals.dom.elGraphical.add(e.elGraph[h]);\n                    else a.globals.dom.elGraphical.add(e.elGraph);\n                    \"front\" === a.config.grid.position && (l && a.globals.dom.elGraphical.add(l.el), null != l && null !== (n = l.elGridBorders) && void 0 !== n && n.node && a.globals.dom.elGraphical.add(l.elGridBorders));\n                    \"front\" === a.config.xaxis.crosshairs.position && i.crosshairs.drawXCrosshairs(), \"front\" === a.config.yaxis[0].crosshairs.position && i.crosshairs.drawYCrosshairs(), \"treemap\" !== a.config.chart.type && i.axes.drawAxis(a.config.chart.type, l);\n                    var c = new V(t.ctx, l), d = new q(t.ctx, l);\n                    if (null !== l && (c.xAxisLabelCorrections(l.xAxisTickWidth), d.setYAxisTextAlignments(), a.config.yaxis.map(function(t, e) {\n                        -1 === a.globals.ignoreYAxisIndexes.indexOf(e) && d.yAxisTitleRotate(e, t.opposite);\n                    })), i.annotations.drawAxesAnnotations(), !a.globals.noData) {\n                        if (a.config.tooltip.enabled && !a.globals.noData && i.w.globals.tooltip.drawTooltip(e.xyRatios), a.globals.axisCharts && (a.globals.isXNumeric || a.config.xaxis.convertedCatToNumeric || a.globals.isRangeBar)) (a.config.chart.zoom.enabled || a.config.chart.selection && a.config.chart.selection.enabled || a.config.chart.pan && a.config.chart.pan.enabled) && i.zoomPanSelection.init({\n                            xyRatios: e.xyRatios\n                        });\n                        else {\n                            var g = a.config.chart.toolbar.tools;\n                            [\n                                \"zoom\",\n                                \"zoomin\",\n                                \"zoomout\",\n                                \"selection\",\n                                \"pan\",\n                                \"reset\"\n                            ].forEach(function(t) {\n                                g[t] = !1;\n                            });\n                        }\n                        a.config.chart.toolbar.show && !a.globals.allSeriesCollapsed && i.toolbar.createToolbar();\n                    }\n                    a.globals.memory.methodsToExec.length > 0 && a.globals.memory.methodsToExec.forEach(function(t) {\n                        t.method(t.params, !1, t.context);\n                    }), a.globals.axisCharts || a.globals.noData || i.core.resizeNonAxisCharts(), s(i);\n                });\n            }\n        },\n        {\n            key: \"destroy\",\n            value: function() {\n                var t, e;\n                window.removeEventListener(\"resize\", this.windowResizeHandler), this.el.parentNode, t = this.parentResizeHandler, (e = jt.get(t)) && (e.disconnect(), jt.delete(t));\n                var i = this.w.config.chart.id;\n                i && Apex._chartInstances.forEach(function(t, e) {\n                    t.id === x.escapeString(i) && Apex._chartInstances.splice(e, 1);\n                }), new Vt(this.ctx).clear({\n                    isUpdating: !1\n                });\n            }\n        },\n        {\n            key: \"updateOptions\",\n            value: function(t) {\n                var e = this, i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o = this.w;\n                return o.globals.selection = void 0, t.series && (this.series.resetSeries(!1, !0, !1), t.series.length && t.series[0].data && (t.series = t.series.map(function(t, i) {\n                    return e.updateHelpers._extendSeries(t, i);\n                })), this.updateHelpers.revertDefaultAxisMinMax()), t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)), t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)), o.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this.updateHelpers._updateOptions(t, i, a, s, r);\n            }\n        },\n        {\n            key: \"updateSeries\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n                return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, i);\n            }\n        },\n        {\n            key: \"appendSeries\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a = this.w.config.series.slice();\n                return a.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a, e, i);\n            }\n        },\n        {\n            key: \"appendData\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = this;\n                i.w.globals.dataChanged = !0, i.series.getPreviousPaths();\n                for(var a = i.w.config.series.slice(), s = 0; s < a.length; s++)if (null !== t[s] && void 0 !== t[s]) for(var r = 0; r < t[s].data.length; r++)a[s].data.push(t[s].data[r]);\n                return i.w.config.series = a, e && (i.w.globals.initialSeries = x.clone(i.w.config.series)), this.update();\n            }\n        },\n        {\n            key: \"update\",\n            value: function(t) {\n                var e = this;\n                return new Promise(function(i, a) {\n                    new Vt(e.ctx).clear({\n                        isUpdating: !0\n                    });\n                    var s = e.create(e.w.config.series, t);\n                    if (!s) return i(e);\n                    e.mount(s).then(function() {\n                        \"function\" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent(\"updated\", [\n                            e,\n                            e.w\n                        ]), e.w.globals.isDirty = !0, i(e);\n                    }).catch(function(t) {\n                        a(t);\n                    });\n                });\n            }\n        },\n        {\n            key: \"getSyncedCharts\",\n            value: function() {\n                var t = this.getGroupedCharts(), e = [\n                    this\n                ];\n                return t.length && (e = [], t.forEach(function(t) {\n                    e.push(t);\n                })), e;\n            }\n        },\n        {\n            key: \"getGroupedCharts\",\n            value: function() {\n                var t = this;\n                return Apex._chartInstances.filter(function(t) {\n                    if (t.group) return !0;\n                }).map(function(e) {\n                    return t.w.config.chart.group === e.group ? e.chart : t;\n                });\n            }\n        },\n        {\n            key: \"toggleSeries\",\n            value: function(t) {\n                return this.series.toggleSeries(t);\n            }\n        },\n        {\n            key: \"highlightSeriesOnLegendHover\",\n            value: function(t, e) {\n                return this.series.toggleSeriesOnHover(t, e);\n            }\n        },\n        {\n            key: \"showSeries\",\n            value: function(t) {\n                this.series.showSeries(t);\n            }\n        },\n        {\n            key: \"hideSeries\",\n            value: function(t) {\n                this.series.hideSeries(t);\n            }\n        },\n        {\n            key: \"isSeriesHidden\",\n            value: function(t) {\n                this.series.isSeriesHidden(t);\n            }\n        },\n        {\n            key: \"resetSeries\",\n            value: function() {\n                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n                this.series.resetSeries(t, e);\n            }\n        },\n        {\n            key: \"addEventListener\",\n            value: function(t, e) {\n                this.events.addEventListener(t, e);\n            }\n        },\n        {\n            key: \"removeEventListener\",\n            value: function(t, e) {\n                this.events.removeEventListener(t, e);\n            }\n        },\n        {\n            key: \"addXaxisAnnotation\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a = this;\n                i && (a = i), a.annotations.addXaxisAnnotationExternal(t, e, a);\n            }\n        },\n        {\n            key: \"addYaxisAnnotation\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a = this;\n                i && (a = i), a.annotations.addYaxisAnnotationExternal(t, e, a);\n            }\n        },\n        {\n            key: \"addPointAnnotation\",\n            value: function(t) {\n                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a = this;\n                i && (a = i), a.annotations.addPointAnnotationExternal(t, e, a);\n            }\n        },\n        {\n            key: \"clearAnnotations\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e = this;\n                t && (e = t), e.annotations.clearAnnotations(e);\n            }\n        },\n        {\n            key: \"removeAnnotation\",\n            value: function(t) {\n                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i = this;\n                e && (i = e), i.annotations.removeAnnotation(i, t);\n            }\n        },\n        {\n            key: \"getChartArea\",\n            value: function() {\n                return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner\");\n            }\n        },\n        {\n            key: \"getSeriesTotalXRange\",\n            value: function(t, e) {\n                return this.coreUtils.getSeriesTotalsXRange(t, e);\n            }\n        },\n        {\n            key: \"getHighestValueInSeries\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n                return new U(this.ctx).getMinYMaxY(t).highestY;\n            }\n        },\n        {\n            key: \"getLowestValueInSeries\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;\n                return new U(this.ctx).getMinYMaxY(t).lowestY;\n            }\n        },\n        {\n            key: \"getSeriesTotal\",\n            value: function() {\n                return this.w.globals.seriesTotals;\n            }\n        },\n        {\n            key: \"toggleDataPointSelection\",\n            value: function(t, e) {\n                return this.updateHelpers.toggleDataPointSelection(t, e);\n            }\n        },\n        {\n            key: \"zoomX\",\n            value: function(t, e) {\n                this.ctx.toolbar.zoomUpdateOptions(t, e);\n            }\n        },\n        {\n            key: \"setLocale\",\n            value: function(t) {\n                this.localization.setCurrentLocaleValues(t);\n            }\n        },\n        {\n            key: \"dataURI\",\n            value: function(t) {\n                return new G(this.ctx).dataURI(t);\n            }\n        },\n        {\n            key: \"exportToCSV\",\n            value: function() {\n                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};\n                return new G(this.ctx).exportToCSV(t);\n            }\n        },\n        {\n            key: \"paper\",\n            value: function() {\n                return this.w.globals.dom.Paper;\n            }\n        },\n        {\n            key: \"_parentResizeCallback\",\n            value: function() {\n                this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();\n            }\n        },\n        {\n            key: \"_windowResize\",\n            value: function() {\n                var t = this;\n                clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {\n                    t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.ctx.update();\n                }, 150);\n            }\n        },\n        {\n            key: \"_windowResizeHandler\",\n            value: function() {\n                var t = this.w.config.chart.redrawOnWindowResize;\n                \"function\" == typeof t && (t = t()), t && this._windowResize();\n            }\n        }\n    ], [\n        {\n            key: \"getChartByID\",\n            value: function(t) {\n                var e = x.escapeString(t);\n                if (Apex._chartInstances) {\n                    var i = Apex._chartInstances.filter(function(t) {\n                        return t.id === e;\n                    })[0];\n                    return i && i.chart;\n                }\n            }\n        },\n        {\n            key: \"initOnLoad\",\n            value: function() {\n                for(var e = document.querySelectorAll(\"[data-apexcharts]\"), i = 0; i < e.length; i++){\n                    new t(e[i], JSON.parse(e[i].getAttribute(\"data-options\"))).render();\n                }\n            }\n        },\n        {\n            key: \"exec\",\n            value: function(t, e) {\n                var i = this.getChartByID(t);\n                if (i) {\n                    i.w.globals.isExecCalled = !0;\n                    var a = null;\n                    if (-1 !== i.publicMethods.indexOf(e)) {\n                        for(var s = arguments.length, r = new Array(s > 2 ? s - 2 : 0), o = 2; o < s; o++)r[o - 2] = arguments[o];\n                        a = i[e].apply(i, r);\n                    }\n                    return a;\n                }\n            }\n        },\n        {\n            key: \"merge\",\n            value: function(t, e) {\n                return x.extend(t, e);\n            }\n        }\n    ]), t;\n}();\nmodule.exports = _t;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/apexcharts/dist/apexcharts.common.js\n");

/***/ })

};
;